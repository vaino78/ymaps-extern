[
  {
    "name": "Balloon",
    "url": "Balloon",
    "def": {
      "name": "Balloon",
      "description": "Расширяет\n            IBalloon, Popup.\n\nБалун - всплывающее облако, которое может отображать любое HTML-содержимое.\nОбычно балун существует на карте в единственном экземпляре, управление им происходит через специальные менеджеры\n(карты,\nгеообъектов,\nслоёв активных областей и т.д.).\nНе создавайте их самостоятельно, если в этом нет необходимости.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "map",
          "type": "Map",
          "description": "Ссылка на объект карты."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции."
        }
      ],
      "inherits": [
        "IBalloon",
        "Popup"
      ]
    }
  },
  {
    "name": "behavior.Drag",
    "url": "behavior.Drag",
    "def": {
      "name": "behavior.Drag",
      "description": "Расширяет\n            IBehavior.\n\nПоведение \"перетаскивание карты с помощью мыши либо одиночного касания\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции."
        }
      ],
      "inherits": [
        "IBehavior"
      ]
    }
  },
  {
    "name": "behavior.LeftMouseButtonMagnifier",
    "url": "behavior.LeftMouseButtonMagnifier",
    "def": {
      "name": "behavior.LeftMouseButtonMagnifier",
      "description": "Расширяет\n            IBehavior.\n\nПоведение \"масштабирование карты при выделении области левой кнопкой мыши\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции."
        }
      ],
      "inherits": [
        "IBehavior"
      ]
    }
  },
  {
    "name": "behavior.RightMouseButtonMagnifier",
    "url": "behavior.RightMouseButtonMagnifier",
    "def": {
      "name": "behavior.RightMouseButtonMagnifier",
      "description": "Расширяет\n            IBehavior.\n\nПоведение \"масштабирование карты при выделении области правой кнопкой мыши\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции."
        }
      ],
      "inherits": [
        "IBehavior"
      ]
    }
  },
  {
    "name": "behavior.RouteEditor",
    "url": "behavior.RouteEditor",
    "def": {
      "name": "behavior.RouteEditor",
      "description": "Расширяет\n            IBehavior.\n\nПоведение \"редактор маршрутов\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IBehavior"
      ]
    }
  },
  {
    "name": "behavior.MultiTouch",
    "url": "behavior.MultiTouch",
    "def": {
      "name": "behavior.MultiTouch",
      "description": "Расширяет\n            IBehavior.\n\nПоведение \"масштабирование карты мультисенсорным касанием\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции."
        }
      ],
      "inherits": [
        "IBehavior"
      ]
    }
  },
  {
    "name": "behavior.storage",
    "url": "behavior.storage",
    "def": {
      "name": "behavior.storage",
      "description": "Статический объект.\n\n\n            Экземпляр класса  util.Storage\n        \n\nХранилище классов поведений карты.\nДобавление нового поведения на карту производится через это хранилище.\n\n\nПо умолчанию в хранилище добавлены следующие поведения:\n    \n        \"drag\" - перемещание карты при нажатой левой кнопке мыши либо одиночным касанием behavior.Drag;\n        \"scrollZoom\" - изменение масштаба колесом мыши behavior.ScrollZoom (только для десктопных браузеров);\n        \"dblClickZoom\" - масштабирование карты двойным щелчком кнопки мыши behavior.DblClickZoom;\n        \"multiTouch\" - масштабирование карты двойным касанием (например, пальцами на сенсорном экране) behavior.MultiTouch (только для мобильных браузеров);\n        \"rightMouseButtonMagnifier\" - увеличение области, выделенной правой кнопкой мыши (только для настольных браузеров), behavior.RightMouseButtonMagnifier (только для десктопных браузеров);\n        \"leftMouseButtonMagnifier\" - увеличение области, выделенной левой кнопкой мыши либо одиночным касанием, behavior.LeftMouseButtonMagnifier;\n        \"ruler\" - измерение расстояния behavior.Ruler.\n        \"routeEditor\" - редактор маршрутов behavior.RouteEditor;\n     \n\n\nМетоды ",
      "hasCtor": false
    }
  },
  {
    "name": "behavior.DblClickZoom",
    "url": "behavior.DblClickZoom",
    "def": {
      "name": "behavior.DblClickZoom",
      "description": "Расширяет\n            IBehavior.\n\nПоведение \"масштабирование карты двойным щелчком кнопки мыши\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции."
        }
      ],
      "inherits": [
        "IBehavior"
      ]
    }
  },
  {
    "name": "Circle",
    "url": "Circle",
    "def": {
      "name": "Circle",
      "description": "Расширяет\n            GeoObject.\n\nКруг. Представляет собой геообъект с геометрией geometry.Circle.\n\nСм.: GeoObject geometry.Circle \n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "geometry",
          "type": "ICircleGeometry|Number[][]|Object",
          "description": "Ссылка на объект геометрии точки\nили массив, первый элемент которого координаты центра круга, второй - радиус в метрах,\nили объект с параметрами геометрии."
        },
        {
          "isRequired": false,
          "param": "properties",
          "type": "Object|IDataManager",
          "description": "Данные круга. Соответствуют данным класса GeoObject.\nМогут задаваться как экземпляр класса, реализующего интерфейс IDataManager, либо в виде хэша.\nПри значениях опций по умолчанию кругу трактуются следующие поля данных:\n\n    hintContent - содержимое всплывающей подсказки круга;\n    balloonContent - содержимое балуна круга;\n    balloonContentHeader - содержимое заголовка балуна круга;\n    balloonContentBody - содержимое основой части балуна круга;\n    balloonContentFooter - содержимое нижней части балуна круга.\n\nПоле balloonContent является кратким обозначением для поля balloonContentBody, но при одновременном задании\nballoonContentBody более приоритетен.\nТакже вы можете дополнить данные круга своими собственными полями и использовать их везде, где это возможно.\nНапример в макете круга или макете балуна."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции круга. Используя этот параметр можно задавать как опции самого круга,\nтак и опции его составных частей:\n\n    Опции балуна круга с префиксом balloon.\n    Опции всплывающей подсказки круга с префиксом hint.\n    Опции геометрии могут задаваться без префикса. Смотрите описание класса IGeometry геометрии\n    geometry.Circle.\n"
        }
      ],
      "inherits": [
        "GeoObject"
      ],
      "props": [
        {
          "type": "Null",
          "description": "Редактор геометрии \"Круг\" на данный момент не реализован.",
          "name": "editor"
        },
        {
          "type": "geometry.Circle",
          "description": "Геометрия типа \"Круг\".",
          "name": "geometry"
        }
      ]
    }
  },
  {
    "name": "behavior.ScrollZoom",
    "url": "behavior.ScrollZoom",
    "def": {
      "name": "behavior.ScrollZoom",
      "description": "Расширяет\n            IBehavior.\n\nПоведение \"масштабирование карты колесом мыши\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции."
        }
      ],
      "inherits": [
        "IBehavior"
      ]
    }
  },
  {
    "name": "behavior.Ruler",
    "url": "behavior.Ruler",
    "def": {
      "name": "behavior.Ruler",
      "description": "Расширяет\n            IBehavior.\n\nПоведение \"Линейка\". Позволяет отмечать на карте точки\nи отображать расстояния между ними.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IBehavior"
      ],
      "methods": [
        {
          "return": "Boolean",
          "desciption": "Удаляет все точки линейки. Если текущее количество точек больше двух, то будет выведен запрос на\nподтверждение действия.\n\nВозвращает true, если действие произведено успешно.",
          "name": "close"
        },
        {
          "return": "String",
          "desciption": "Состояние линейки описывается строкой, состоящей из последовательностей, разделяемых символом \"~\".\nКаждая последовательность представляет собой подстроку вида \"долгота,широта\" и описывает приращение координат\nотносительно предыдущей точки линейки.\n\nВозвращает текущее состояние линейки в закодированном виде.",
          "name": "getState"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "state",
              "type": "String",
              "description": "Закодированное состояние линейки."
            }
          ],
          "desciption": "Восстанавливает состояние линейки из закодированной строки. Смотрите behavior.Ruler.getState.",
          "name": "setState"
        }
      ],
      "props": [
        {
          "type": "geometry.LineString",
          "description": "Геометрия поведения \"Линейка\".",
          "name": "geometry"
        }
      ]
    }
  },
  {
    "name": "Clusterer",
    "url": "Clusterer",
    "def": {
      "name": "Clusterer",
      "description": "Расширяет\n            IChildOnMap, ICustomizable, IEventEmitter, IParentOnMap.\n\nКластеризатор геообъектов.\nКластеризует объекты в видимой области карты. Если объект не попадает в видимую область карты,\nон не будет добавлен на карту.\nОбратите внимание, что кластеризатор не поддерживает реакцию на изменение координат объектов\n(программно, или в результате драга). Если у объекта в кластеризаторе необходимо изменить координаты,\nследует удалить объект из кластеризатора, поменять его геометрию, а затем добавить обратно.\n\nСм.: ClusterPlacemark \n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции.\nОпции для дочерних объектов-кластеров задаются с префиксом \"cluster\". См. ClusterPlacemark."
        }
      ],
      "inherits": [
        "IChildOnMap",
        "ICustomizable",
        "IEventEmitter",
        "IParentOnMap"
      ],
      "methods": [
        {
          "return": "Clusterer",
          "params": [
            {
              "isRequired": true,
              "param": "objects",
              "type": "IGeoObject|IGeoObject[]",
              "description": "Массив геообъектов или единичный геообъект."
            }
          ],
          "desciption": "Добавляет геообъект или массив геообъектов в кластеризатор.\n\nВозвращает ссылку на себя.",
          "name": "add"
        },
        {
          "return": "IGeoObject",
          "params": [
            {
              "isRequired": true,
              "param": "center",
              "type": "Number[]",
              "description": "Центр кластера в геокоординатах."
            },
            {
              "isRequired": true,
              "param": "geoObjects",
              "type": "IGeoObject[]",
              "description": "Массив плейсмарков в кластере."
            }
          ],
          "desciption": "Функция для создания кластера кластеризатором.\nВызывается кластеризатором непосредственно в процессе кластеризации.\nПринимает на вход центр кластера и массив геообъектов, попадающих в данный кластер.\nВозвращает кластер, который потом будет добавлен на карту.\nЕсли требуется, чтобы кластеризатор создавал пользовательские объекты-кластеры,\nследует переопределить этот метод у кластеризатора.\n\nВозвращает объект-кластер. По умолчанию создает экземпляры класса ClusterPlacemark.",
          "name": "createCluster"
        },
        {
          "return": "Number[][]|null",
          "desciption": "Возвращает географические координаты прямоугольной области, охватывающей все элементы кластеризатора.",
          "name": "getBounds"
        },
        {
          "return": "IGeoObject[]",
          "desciption": "Метод для получения текущего массива объектов-кластеров.\nОбратите внимание, что объекты-кластеры меняются при изменении масштаба карты или\nпри сдвиге центра карты. Если необходимо выполнять операции над всеми кластерами,\nкорректнее переопределить метод createCluster и добавлять необходимые операции в его вызов.\n\nВозвращает массив кластеров, добавленных на карту в данный момент.",
          "name": "getClusters"
        },
        {
          "return": "IGeoObject[]",
          "desciption": "Возвращает массив геообъектов, добавленных в кластеризатор.",
          "name": "getGeoObjects"
        },
        {
          "return": "Object",
          "params": [
            {
              "isRequired": true,
              "param": "geoObject",
              "type": "IGeoObject",
              "description": "Геообъект, для которого нужно получить состояние."
            }
          ],
          "desciption": "Функция для получения информации о текущем состоянии объекта,\nдобавленного в кластеризатор.\n\nВозвращает объект с полями:\n\n  isShown - признак, указывающий, находится ли объект в видимой области карты;\n  cluster - ссылка на кластер, в который добавлен объект;\n  isClustered - признак, указывающий, попал ли объект в состав кластера.\n",
          "name": "getObjectState"
        },
        {
          "return": "Clusterer",
          "params": [
            {
              "isRequired": true,
              "param": "objects",
              "type": "IGeoObject|IGeoObject[]",
              "description": "Массив геообъектов."
            }
          ],
          "desciption": "Удаляет геообъекты из кластеризатора.\n\nВозвращает ссылку на себя.",
          "name": "remove"
        },
        {
          "return": "Clusterer",
          "desciption": "Удаляет все геообъекты из кластеризатора.\n\nВозвращает ссылку на себя.",
          "name": "removeAll"
        }
      ],
      "props": [
        {
          "type": "clusterer.Balloon",
          "description": "Балун кластеризатора.",
          "name": "balloon"
        },
        {
          "type": "clusterer.hint",
          "description": "Хинт кластеризатора.",
          "name": "hint"
        }
      ]
    }
  },
  {
    "name": "ClusterPlacemark",
    "url": "ClusterPlacemark",
    "def": {
      "name": "ClusterPlacemark",
      "description": "Расширяет\n            IGeoObject, collection.Item.\n\nКластер геообъектов.\nИспользуется по умолчанию в Clusterer.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "geometry",
          "type": "Number[]|Object|IPointGeometry",
          "description": "Координаты метки или хэш с описанием\nгеометрии или ссылка на объект точечной геометрии."
        },
        {
          "isRequired": true,
          "param": "properties",
          "type": "IDataManager",
          "description": "Данные кластера."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции кластера.\nПомимо частных опций, балун кластера поддерживает те же опции, что и Balloon.\nОпции для балуна кластера указываются с префикcом 'balloon'."
        }
      ],
      "inherits": [
        "IGeoObject",
        "collection.Item"
      ],
      "methods": [
        {
          "return": "Number[][]|null",
          "desciption": "Возвращает географические координаты прямоугольной области, охватывающей все элементы кластера.",
          "name": "getBounds"
        },
        {
          "return": "IGeoObject[]",
          "desciption": "Метод является упрощенным вызовом cluster.properties.get('geoObjects');\n\nВозвращает массив геообъектов, образующих кластер.",
          "name": "getGeoObjects"
        }
      ],
      "props": [
        {
          "type": "data.Manager",
          "description": "Состояние кластера. Определяется следующими полями:\n\n    activeObject - Cсылка на активный объект кластера.\n    Активным объектом является тот, который в данный момент выбран в\n    балуне кластера.\n",
          "name": "state"
        }
      ]
    }
  },
  {
    "name": "collection.Item",
    "url": "collection.Item",
    "def": {
      "name": "collection.Item",
      "description": "Расширяет\n            IChildOnMap, ICustomizable, IEventEmitter, IParentOnMap.\n\nБазовый класс элемента коллекции объектов карты.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции обьекта."
        }
      ],
      "inherits": [
        "IChildOnMap",
        "ICustomizable",
        "IEventEmitter",
        "IParentOnMap"
      ],
      "methods": [
        {
          "return": "Map",
          "desciption": "Возвращает карту, которой принадлежит элемент коллекции.",
          "name": "getMap"
        },
        {
          "return": "IParentOnMap",
          "desciption": "Возвращает родительский объект.",
          "name": "getParent"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "map",
              "type": "Map",
              "description": "Карта, на которую добавлен объект."
            }
          ],
          "desciption": "Функция, которая вызывается при добавлении элемента на карту.\nДля выполнения дополнительных действий при добавлении объекта\nна карту переопределите эту функцию.",
          "name": "onAddToMap"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "oldMap",
              "type": "Map",
              "description": "Карта, с которой удален объект."
            }
          ],
          "desciption": "Функция, которая вызывается при удалении элемента с карты.\nДля выполнения дополнительных действий при\nудалении объекта с карты переопределите эту функцию.",
          "name": "onRemoveFromMap"
        },
        {
          "return": "collection.Item",
          "params": [
            {
              "isRequired": true,
              "param": "parent",
              "type": "IParentOnMap",
              "description": "Родительский объект."
            }
          ],
          "desciption": "Устанавливает родителя для заданного элемента коллекции.\n\nВозвращает ссылку на себя.",
          "name": "setParent"
        }
      ]
    }
  },
  {
    "name": "Collection",
    "url": "Collection",
    "def": {
      "name": "Collection",
      "description": "Расширяет\n            ICollection, collection.Item.\n\nБазовая реализация коллекции объектов на карте.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции коллекции."
        }
      ],
      "inherits": [
        "ICollection",
        "collection.Item"
      ],
      "methods": [
        {
          "return": "Collection",
          "params": [
            {
              "isRequired": true,
              "param": "child",
              "type": "collection.Item",
              "description": "Элемент, который необходимо добавить."
            }
          ],
          "desciption": "Добавляет элемент в коллекцию.\n\nВозвращает ссылку на себя.",
          "name": "add"
        },
        {
          "return": "Collection",
          "params": [
            {
              "isRequired": true,
              "param": "callback",
              "type": "Function",
              "description": "Функция-обработчик. На вход получает элемент коллекции.\nПри возвращении функцией значения false перебор останавливается."
            },
            {
              "isRequired": true,
              "param": "context",
              "type": "Object",
              "description": "Контекст вызываемой функции."
            }
          ],
          "desciption": "Вызывает функцию-обработчик для всех элементов коллекции.\n\nВозвращает ссылку на себя.",
          "name": "each"
        },
        {
          "return": "Object[]",
          "params": [
            {
              "isRequired": true,
              "param": "filterFunction",
              "type": "Function",
              "description": "Функция, которая является фильтром для объектов коллекции.\nПервым параметром принимает элемент из коллекции. Должна возвращать булевое значение."
            }
          ],
          "desciption": "Вызывает функцию-фильтр для всех элементов коллекции.\nПри возвращении фильтром ненулевого значения элемент коллекции попадает в конечный массив.\n\nВозвращает массив из элементов, которые попали в выборку.",
          "name": "filter"
        },
        {
          "return": "Object",
          "params": [
            {
              "isRequired": true,
              "param": "index",
              "type": "Number",
              "description": "Порядковый номер элемента в коллекции."
            }
          ],
          "desciption": "Возвращает элемент коллекции или null, если номер находится вне диапозона номеров коллекции.",
          "name": "get"
        },
        {
          "return": "Object[]",
          "desciption": "Возвращает массив со всеми элементами коллекции.",
          "name": "getAll"
        },
        {
          "return": "IIterator",
          "desciption": "Возвращает итератор для перебора элементов коллекции.",
          "name": "getIterator"
        },
        {
          "return": "Number",
          "desciption": "Возвращает количество элементов коллекции.",
          "name": "getLength"
        },
        {
          "return": "Number",
          "params": [
            {
              "isRequired": true,
              "param": "childToFind",
              "type": "Object",
              "description": "Искомый объект."
            }
          ],
          "desciption": "Возвращает порядковый номер объекта в коллекции либо -1, если объект не найден.",
          "name": "indexOf"
        },
        {
          "return": "Collection",
          "params": [
            {
              "isRequired": true,
              "param": "child",
              "type": "collection.Item",
              "description": "Элемент, который необходимо удалить."
            }
          ],
          "desciption": "Удаляет элемент из коллекции.\n\nВозвращает ссылку на себя.",
          "name": "remove"
        },
        {
          "return": "Collection",
          "desciption": "Удаляет все элементы из коллекции.\n\nВозвращает ссылку на себя.",
          "name": "removeAll"
        }
      ]
    }
  },
  {
    "name": "clusterer.Hint",
    "url": "clusterer.Hint",
    "def": {
      "name": "clusterer.Hint",
      "description": "Расширяет\n            IHintManager.\n\nМенеджер хинта кластеризатора. Позволяет управлять хинтом кластара, открывать и скрывать его.\nИспользует внутри себя менеджер хинта карты map.Hint.\nКластеризаторы содержат экземпляр этого класса, доступный как myClusterer.hint.\nНе создавайте экземпляры этого класса без необходимости.\n\nСм.: Hint \n\nКонструктор | Поля  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "clusterer",
          "type": "Clusterer",
          "description": "Кластеризатор."
        }
      ],
      "inherits": [
        "IHintManager"
      ]
    }
  },
  {
    "name": "control.FullscreenControl",
    "url": "control.FullscreenControl",
    "def": {
      "name": "control.FullscreenControl",
      "description": "Расширяет\n            control.Button.\n\nЭлемент управления \"Полноэкранный режим\".\nЗадать свойство z-index контейнеру карты, находящейся в \"полноэкранном режиме\",\nможно с помощью опции Map.options.fullscreenZIndex.\nКлюч элемента управления в хранилище control.storage —&nbsp;\"fullscreenControl\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "parameters",
          "type": "Object",
          "description": "Параметры элемента управления."
        }
      ],
      "inherits": [
        "control.Button"
      ],
      "methods": [
        {
          "desciption": "Позволяет переводить карту в полноэкранный режим.",
          "name": "enterFullscreen"
        },
        {
          "desciption": "Позволяет вывести карту из полноэкранного режима.",
          "name": "exitFullscreen"
        }
      ],
      "props": [
        {
          "type": "data.Manager",
          "description": "Состояние элемента управления.\nИмена полей, доступных через метод data.Manager.get:\n\n    fullscreen — признак, находится ля карта в полноэкранном режиме.\n",
          "name": "state"
        }
      ]
    }
  },
  {
    "name": "control.Button",
    "url": "control.Button",
    "def": {
      "name": "control.Button",
      "description": "Расширяет\n            ICustomizable, ISelectableControl.\n\nЭлемент управления \"Кнопка\".\nСтандартный макет кнопки изменяет свой внешний вид в зависимости от размеров карты.\nЕсли карта имеет большую ширину, то кнопка принимает вид \"картинка + текст\".\nЕсли карта среднего размера, кнопка принимает вид \"текст\".\nЕсли карта небольшого размера, то в макете кнопки отображается только иконка.\nЕсли для кнопки не задана иконка, то во всех состояниях будет отображаться текст и наоборот.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "parameters",
          "type": "Object|String",
          "description": "Параметры кнопки или строка - содержимое кнопки в виде HTML."
        }
      ],
      "inherits": [
        "ICustomizable",
        "ISelectableControl"
      ],
      "methods": [
        {
          "return": "Map",
          "desciption": "Возвращает ссылку на карту.",
          "name": "getMap"
        }
      ],
      "props": [
        {
          "type": "data.Manager",
          "description": "Данные кнопки.\nИмена полей, доступных через метод data.Manager.get:\n\n    image - иконка кнопки, если есть;\n    content - cодержимое кнопки в виде HTML;\n    title - текст всплывающей подсказки, которая появляется при наведении на кнопку курсора мыши.\n",
          "name": "data"
        },
        {
          "type": "data.Manager",
          "description": "Состояние кнопки.\nИмена полей, доступных через метод data.Manager.get:\n\n    selected - признак, нажата ли кнопка;\n    enabled - признак, активна ли кнопка;\n    size - размер, который в данный момент выставлен кнопке;\n",
          "name": "state"
        }
      ]
    }
  },
  {
    "name": "control.GeolocationControl",
    "url": "control.GeolocationControl",
    "def": {
      "name": "control.GeolocationControl",
      "description": "Расширяет\n            control.Button.\n\nЭлемент управления \"геолокация\". Позволяет отразить положение пользователя\nна карте.\nКлюч элемента управления в хранилище control.storage —&nbsp;\"geolocationControl\".\n\nСм.: geolocation \n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "parameters",
          "type": "Object",
          "description": "Параметры элемента управления."
        }
      ],
      "inherits": [
        "control.Button"
      ]
    }
  },
  {
    "name": "control.ListBox",
    "url": "control.ListBox",
    "def": {
      "name": "control.ListBox",
      "description": "Расширяет\n            ICollection, IControl, ICustomizable.\n\nКласс для создания элемента управления в виде раскрывающегося списка.\nСтандартный макет выпадающего списка изменяет свой внешний вид в зависимости от размеров карты.\nЕсли карта имеет большую ширину, то в заголовке выпадающего списка отображается текст.\nЕсли карта небольшого размера, то в заголовке списка отображается только иконка.\nЕсли для кнопки не задана иконка, то во всех состояниях будет отображаться текст и наоборот.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "parameters",
          "type": "Object",
          "description": "Параметры выпадающего списка."
        }
      ],
      "inherits": [
        "ICollection",
        "IControl",
        "ICustomizable"
      ],
      "methods": [
        {
          "return": "control.ListBox",
          "desciption": "Сворачивает список.\n\nВозвращает ссылку на себя.",
          "name": "collapse"
        },
        {
          "return": "control.ListBox",
          "desciption": "Раскрывает список.\n\nВозвращает ссылку на себя.",
          "name": "expand"
        },
        {
          "return": "Map",
          "desciption": "Возвращает ссылку на карту.",
          "name": "getMap"
        },
        {
          "return": "Boolean",
          "desciption": "Возвращает признак того, находится ли контрол в развернутом состоянии.",
          "name": "isExpanded"
        }
      ],
      "props": [
        {
          "type": "data.Manager",
          "description": "Данные выпадающего списка.\nИмена полей, доступных через метод data.Manager.get:\n\n    content - заголовок выпадающего списка;\n    title - текст всплывающей подсказки, которая появляется при наведении на список курсора мыши.\n",
          "name": "data"
        },
        {
          "type": "data.Manager",
          "description": "Состояние выпадающего списка.\nИмена полей, доступных через метод data.Manager.get:\n\n    expanded - признак, раскрыт ли список;\n    size - размер, который в данный момент выставлен списку;\n",
          "name": "state"
        }
      ]
    }
  },
  {
    "name": "control.ListBoxItem",
    "url": "control.ListBoxItem",
    "def": {
      "name": "control.ListBoxItem",
      "description": "Расширяет\n            ICustomizable, ISelectableControl.\n\nЭлемент раскрывающегося списка.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "parameters",
          "type": "Object|String",
          "description": "Параметры элемента либо строка - HTML-содержимое элемента."
        }
      ],
      "inherits": [
        "ICustomizable",
        "ISelectableControl"
      ],
      "methods": [
        {
          "return": "Map",
          "desciption": "Возвращает ссылку на карту.",
          "name": "getMap"
        }
      ],
      "props": [
        {
          "type": "data.Manager",
          "description": "Данные элемента списка.\nИмена полей, доступных через метод data.Manager.get:\n\n    content - cодержимое элемента списка в виде HTML;\n    title - текст всплывающей подсказки.\n",
          "name": "data"
        },
        {
          "type": "data.Manager",
          "description": "Состояние элемента списка.\nИмена полей, доступных через метод data.Manager.get:\n\n    selected - признак, выбран ли элемент списка;\n    enabled - признак, активен ли элемент списка.\n",
          "name": "state"
        }
      ]
    }
  },
  {
    "name": "clusterer.Balloon",
    "url": "clusterer.Balloon",
    "def": {
      "name": "clusterer.Balloon",
      "description": "Расширяет\n            IBalloonManager.\n\nМенеджер балуна кластеризатора. Позволяет управлять балуном кластера, открывать и скрывать его.\nИспользует внутри себя менеджер балуна карты map.Balloon.\nКластеризаторы содержат экземпляр этого класса, доступный как myClusterer.balloon.\nНе создавайте экземпляры этого класса без необходимости.\n\nСм.: Balloon \n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "clusterer",
          "type": "Clusterer",
          "description": "Кластеризатор."
        }
      ],
      "inherits": [
        "IBalloonManager"
      ]
    }
  },
  {
    "name": "control.Manager",
    "url": "control.Manager",
    "def": {
      "name": "control.Manager",
      "description": "Менеджер элементов управления.\n\nКонструктор | Поля  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "map",
          "type": "Map",
          "description": "Экземпляр карты."
        },
        {
          "isRequired": false,
          "param": "controls",
          "type": "String[]|IControl[]",
          "description": "Элементы управления, которые требуется разместить на карте изначально."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции менеджера."
        }
      ],
      "methods": [
        {
          "return": "control.Manager",
          "params": [
            {
              "isRequired": true,
              "param": "control",
              "type": "IControl|String",
              "description": "Элементы управления, заданные\nэкземплярами классов, реализующих интерфейс IControl либо ключами.\n"
            },
            {
              "isRequired": false,
              "param": "options",
              "type": "Object",
              "description": "Опции элемента управления."
            }
          ],
          "desciption": "Добавляет элемент управления в менеджер.\n\nВозвращает ссылку на себя.",
          "name": "add"
        },
        {
          "return": "control.Manager",
          "params": [
            {
              "isRequired": true,
              "param": "callback",
              "type": "Function",
              "description": "Функция-обработчик. На вход получает элемент коллекции.\nПри возвращении функцией значения false перебор останавливается."
            },
            {
              "isRequired": true,
              "param": "context",
              "type": "Object",
              "description": "Контекст вызываемой функции."
            }
          ],
          "desciption": "Вызывает функцию-обработчик для всех элементов управления.\n\nВозвращает ссылку на себя.",
          "name": "each"
        },
        {
          "return": "IControl|null",
          "params": [
            {
              "isRequired": true,
              "param": "index",
              "type": "Number|String",
              "description": "Индекс искомого элемента или его ключ."
            }
          ],
          "desciption": "Возвращает элемент управления или null, если элемент не найден.",
          "name": "get"
        },
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": true,
              "param": "control",
              "type": "IControl",
              "description": "Элемент управления."
            }
          ],
          "desciption": "Возвращает объект-обещание, который подтверждается HTML-элементом, в который\nдолжен разместиться дочерний элемент.",
          "name": "getChildElement"
        },
        {
          "return": "HTMLElement",
          "desciption": "Возвращает контейнер, в который добавляются элементы управления.",
          "name": "getContainer"
        },
        {
          "return": "Map",
          "desciption": "Возвращает ссылку на карту.",
          "name": "getMap"
        },
        {
          "return": "Integer",
          "params": [
            {
              "isRequired": true,
              "param": "childToFind",
              "type": "String|IControl",
              "description": "Элемент управления или его ключ."
            }
          ],
          "desciption": "Возвращает -1, если элемент управления не найден, либо индекс элемента в менеджере.",
          "name": "indexOf"
        },
        {
          "return": "control.Manager",
          "params": [
            {
              "isRequired": true,
              "param": "control",
              "type": "IControl|String",
              "description": "Удаляемый элемент управления, либо его ключ."
            }
          ],
          "desciption": "Удаление элемента управления из менеджера.\n\nВозвращает ссылку на себя.",
          "name": "remove"
        }
      ],
      "props": [
        {
          "type": "event.Manager",
          "description": "Менеджер событий.",
          "name": "events"
        },
        {
          "type": "option.Manager",
          "description": "Опции менеджера.",
          "name": "options"
        },
        {
          "type": "data.Manager",
          "description": "Состояние менеджера.\nИмена полей, доступных через метод data.Manager.get:\n\n    size - состояние в котором находятся элементы управления.\n",
          "name": "state"
        }
      ]
    }
  },
  {
    "name": "control.RulerControl",
    "url": "control.RulerControl",
    "def": {
      "name": "control.RulerControl",
      "description": "Расширяет\n            control.Button.\n\nЭлемент управления \"Линейка\".\nКлюч элемента управления в хранилище control.storage —&nbsp;\"rulerControl\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "parameters",
          "type": "Object",
          "description": "Параметры элемента управления."
        }
      ],
      "inherits": [
        "control.Button"
      ]
    }
  },
  {
    "name": "control.RouteEditor",
    "url": "control.RouteEditor",
    "def": {
      "name": "control.RouteEditor",
      "description": "Расширяет\n            control.Button.\n\nЭлемент управления \"Редактор маршрутов\".\nКлюч элемента управления в хранилище control.storage —&nbsp;\"routeEditor\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "parameters",
          "type": "Object",
          "description": "Параметры элемента управления."
        }
      ],
      "inherits": [
        "control.Button"
      ],
      "methods": [
        {
          "return": "router.Route",
          "desciption": "Возвращает маршрут.",
          "name": "getRoute"
        }
      ]
    }
  },
  {
    "name": "control.TrafficControl",
    "url": "control.TrafficControl",
    "def": {
      "name": "control.TrafficControl",
      "description": "Расширяет\n            IControl, ICustomizable.\n\nПанель управления пробками на карте.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "parameters",
          "type": "Object",
          "description": "Параметры элемента управления."
        }
      ],
      "inherits": [
        "IControl",
        "ICustomizable"
      ],
      "methods": [
        {
          "desciption": "Свернуть панель пробок.",
          "name": "collapse"
        },
        {
          "desciption": "Развернуть панель пробок.",
          "name": "expand"
        },
        {
          "return": "Map",
          "desciption": "Возвращает ссылку на карту.",
          "name": "getMap"
        },
        {
          "return": "ITrafficProvider",
          "params": [
            {
              "isRequired": false,
              "param": "key",
              "type": "String",
              "description": "Ключ провайдера информации о пробках.\nСписок доступных ключей:\n\n    'traffic#actual' - провайдер пробок \"сейчас\";\n    'traffic#archive' - провайдер пробок \"обычно\".\n\nЕсли параметр не передан, возвращается текущий провайдер."
            }
          ],
          "desciption": "Возвращает экземпляр провайдера пробок.",
          "name": "getProvider"
        },
        {
          "desciption": "Скрыть провайдер пробок с карты.",
          "name": "hideTraffic"
        },
        {
          "return": "Boolean",
          "desciption": "Возвращает признак, развернута ли панель.",
          "name": "isExpanded"
        },
        {
          "return": "Boolean",
          "desciption": "Возвращает признак, показан ли провайдер пробок на карте.",
          "name": "isTrafficShown"
        },
        {
          "desciption": "Показать провайдер пробок на карте.",
          "name": "showTraffic"
        }
      ],
      "props": [
        {
          "type": "data.Manager",
          "description": "Данные панели.",
          "name": "data"
        },
        {
          "type": "data.Manager",
          "description": "Состояние панели.\nИмена полей, доступных через метод data.Manager.get:\n\n    trafficShown - признак, показан ли на карте провайдер пробок;\n    providerKey - ключ провайдера, который показывает панель.\n    Может принимать значения 'traffic#actual' или 'traffic#archive';\n    expanded - признак, развернута ли панель.\n",
          "name": "state"
        }
      ]
    }
  },
  {
    "name": "control.ZoomControl",
    "url": "control.ZoomControl",
    "def": {
      "name": "control.ZoomControl",
      "description": "Расширяет\n            IControl, ICustomizable.\n\nЭлемент управления масштабом карты.\nКлюч элемента управления в хранилище control.storage —&nbsp;\"zoomControl\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "parameters",
          "type": "Object",
          "description": "Параметры элемента управления."
        }
      ],
      "inherits": [
        "IControl",
        "ICustomizable"
      ],
      "methods": [
        {
          "return": "Map",
          "desciption": "Возвращает ссылку на карту.",
          "name": "getMap"
        }
      ]
    }
  },
  {
    "name": "coordSystem.cartesian",
    "url": "coordSystem.cartesian",
    "def": {
      "name": "coordSystem.cartesian",
      "description": "Статический объект.\n\n\n            Экземпляр класса  ICoordSystem\n        \n\nКласс, описывающий геометрию декартовой плоскости.\nИспользуется как координатная система по умолчанию при построении\nгеодезических линий в нестандартных проекциях.\n\nМетоды ",
      "hasCtor": false,
      "params": [
        {
          "isRequired": false,
          "param": "scale",
          "type": "Number|Number[]",
          "description": "Масштаб одного деления на оси. Может быть числом или парой чисел для каждой из осей."
        }
      ]
    }
  },
  {
    "name": "coordSystem.geo",
    "url": "coordSystem.geo",
    "def": {
      "name": "coordSystem.geo",
      "description": "Статический объект.\n\n\n            Экземпляр класса  ICoordSystem\n        \n\nОбъект, описывающий геометрию земной поверхности.\nПозволяет строить кратчайшие маршруты (геодезические линии) между\nточками земной поверхности и находить расстояния.\n\n\n\nМетоды ",
      "hasCtor": false
    }
  },
  {
    "name": "data.Manager",
    "url": "data.Manager",
    "def": {
      "name": "data.Manager",
      "description": "Расширяет\n            IDataManager, IFreezable.\n\nМенеджер произвольных данных.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "data",
          "type": "Object",
          "description": "Данные."
        }
      ],
      "inherits": [
        "IDataManager",
        "IFreezable"
      ],
      "methods": [
        {
          "return": "Object",
          "params": [
            {
              "isRequired": true,
              "param": "path",
              "type": "String",
              "description": "Строка с именем поля данных. Имя может адресовать вложенные поля, т.е. содержать '.'."
            },
            {
              "isRequired": false,
              "param": "defaultValue",
              "type": "Object",
              "description": "Значение по умолчанию."
            }
          ],
          "desciption": "Возвращает значение поля данных с заданным именем.",
          "name": "get"
        },
        {
          "return": "Object",
          "desciption": "Возвращает объект, содержащий все поля данных.",
          "name": "getAll"
        },
        {
          "return": "data.Manager",
          "params": [
            {
              "isRequired": true,
              "param": "path",
              "type": "Object|String",
              "description": "Строка, содержащая имя поля данных, либо объект вида {\"имя поля\": \"значение\"}."
            },
            {
              "isRequired": false,
              "param": "value",
              "type": "Object",
              "description": "Значение, если в качестве первого аргумента передается строка, содержащая имя поля."
            }
          ],
          "desciption": "Устанавливает значения для указанных полей. Поддерживаются две сигнатуры:\n\n    один аргумент, представляющий собой объект вида {\"имя\": \"значение\"};\n    два аргумента, первый из которых - имя поля, второй - значение.\n\nИмя может адресовать вложенные поля, т.е. содержать '.'.\n\nВозвращает ссылку на себя.",
          "name": "set"
        },
        {
          "return": "data.Manager",
          "params": [
            {
              "isRequired": true,
              "param": "data",
              "type": ""
            }
          ],
          "desciption": "Полностью перезаписывает все поля данных. Равносильно последовательному вызову методов\nunsetAll и set, но обеспечивает большую производительность.\n\nВозвращает ссылку на себя.",
          "name": "setAll"
        },
        {
          "return": "data.Manager",
          "params": [
            {
              "isRequired": true,
              "param": "path",
              "type": "String|String[]",
              "description": "Имя поля, либо массив имён."
            }
          ],
          "desciption": "Очищает заданные поля данных.\n\nВозвращает ссылку на себя.",
          "name": "unset"
        },
        {
          "return": "data.Manager",
          "desciption": "Очищает все поля данных.\n\nВозвращает ссылку на себя.",
          "name": "unsetAll"
        }
      ]
    }
  },
  {
    "name": "DomEvent",
    "url": "DomEvent",
    "def": {
      "name": "DomEvent",
      "description": "Расширяет\n            IDomEvent.\n\nDOM-событие в системе API Яндекс.Карт.\nПредоставляет прокси-методы для доступа к полям и методам исходного DOM-события.\nВозвращаемые значения нормализованы с учётом особенностей различных браузеров.\nТакже переопределено свойство position, возвращается массив вида [pageX, pageY].\n\nКонструктор | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "originalEvent",
          "type": "DomEvent",
          "description": "DOM-событие."
        },
        {
          "isRequired": false,
          "param": "type",
          "type": "Object",
          "description": "Тип события. Если не указан, берётся из originalEvent.type."
        }
      ],
      "inherits": [
        "IDomEvent"
      ]
    }
  },
  {
    "name": "domEvent.manager",
    "url": "domEvent.manager",
    "def": {
      "name": "domEvent.manager",
      "description": "Статический объект.\n\nПредоставляет единый интерфейс для работы с событиями DOM-элементов во всех браузерах и на всех устройствах.\nДля устройств, которые не поддерживают мышь, события будут транслироваться.\n\n    Событие начала касания (touchstart/pointerdown) с одной точкой прикосновения\n    транслируется в последовательность событий mouseenter, mousemove и mousedown;\n    Событие перемещения касания (touchmove/pointermove) с одной точкой прикосновения транслируется в событие mousemove;\n    События завершения касания (touchend/pointerup) или отмены (touchcancel/pointercancel)\n    транслируются в последовательность событий mouseup, mousemove и mouseleave,\n    если ранее произошло событие начала касания с одной точкой прикосновения;\n    Быстрое поступление событий начала и завершения с одной точкой прикосновения без перемещения транслируется в событие click;\n    Быстрое поступление двух событий click транслируется в событие dblclick;\n    Если между событиями начала и завершения с одной точкой прикосновения без перемещения была продолжительная задержка,\n    то это транслируется в событие contextmenu.\n\n\nТакже поддерживаются специальные события для обработки нескольких одновременных касаний.\n\n    multitouchstart отправляется при поступлении события начала касания с двумя и более точками прикосновений;\n    multitouchmove отправляется при поступлении события перемещения касания с двумя и более точками прикосновений;\n    multitouchend отправляется при поступлении события завершения касания, если ранее было отправлено событие multitouchstart;\n    При добавлении/удалении точки прикосновения будет отправлено событие multitouchend\n    и событие multitouchstart, если оставшееся количество точек больше или равно двум.\n\n\nМенеджер работы с событиями DOM-элементов.\n\nМетоды \n\nПримеры: \n\n1.\n\n2.\n\n3.\n\n4.",
      "hasCtor": false,
      "methods": [
        {
          "return": "domEvent.manager",
          "params": [
            {
              "isRequired": true,
              "param": "htmlElement",
              "type": "HTMLElement",
              "description": "DOM-элемент, события которого необходимо прослушивать."
            },
            {
              "isRequired": true,
              "param": "types",
              "type": "String|String[]",
              "description": "Тип или типы событий."
            },
            {
              "isRequired": true,
              "param": "callback",
              "type": "Function",
              "description": "Функция-обработчик события."
            },
            {
              "isRequired": false,
              "param": "context",
              "type": "Object",
              "description": "Контекст исполнения функции-обработчика."
            },
            {
              "isRequired": false,
              "param": "capture",
              "type": "Boolean",
              "description": "Признак того, что событие необходимо отслеживать на фазе захвата."
            }
          ],
          "desciption": "Добавляет слушателя DOM-событий объекта.\n\nВозвращает ссылку на себя.",
          "name": "add"
        },
        {
          "return": "event.Group",
          "params": [
            {
              "isRequired": true,
              "param": "htmlElement",
              "type": "HTMLElement",
              "description": "DOM-элемент."
            },
            {
              "isRequired": false,
              "param": "capture",
              "type": "Boolean",
              "description": "Признак того, что событие необходимо отслеживать на фазе захвата."
            }
          ],
          "desciption": "Возвращает группу слушателей событий для заданного DOM-элемента.",
          "name": "group"
        },
        {
          "return": "domEvent.manager",
          "params": [
            {
              "isRequired": true,
              "param": "htmlElement",
              "type": "HTMLElement",
              "description": "DOM-элемент, события которого прослушиваются."
            },
            {
              "isRequired": true,
              "param": "types",
              "type": "String|String[]",
              "description": "Тип или типы событий."
            },
            {
              "isRequired": true,
              "param": "callback",
              "type": "Function|String",
              "description": "Функция-обработчик события либо уникальный\nid пары callback-context."
            },
            {
              "isRequired": false,
              "param": "context",
              "type": "Object",
              "description": "Контекст исполнения функции-обработчика."
            },
            {
              "isRequired": false,
              "param": "capture",
              "type": "Boolean",
              "description": "Признак того, что событие необходимо отслеживать на фазе захвата."
            }
          ],
          "desciption": "Удаляет слушателя DOM-событий объекта.\n\nВозвращает ссылку на себя.",
          "name": "remove"
        }
      ]
    }
  },
  {
    "name": "domEvent.MultiPointer",
    "url": "domEvent.MultiPointer",
    "def": {
      "name": "domEvent.MultiPointer",
      "description": "Расширяет\n            IMultiTouchEvent.\n\nОбъект, описывающий multitouch-событие, которое было вызвано\nнесколькими событиями PointerEvent. Предоставляет прокси-методы для\nдоступа к полям и методам DOM-события.\n\nКонструктор | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "originalEvent",
          "type": "Object",
          "description": "pointer-событие."
        },
        {
          "isRequired": false,
          "param": "type",
          "type": "String",
          "description": "Тип события. Если не указан, считается равным 'multi' + originalEvent.type."
        }
      ],
      "methods": [
        {
          "return": "Object",
          "params": [
            {
              "isRequired": true,
              "param": "name",
              "type": "String",
              "description": "Имя свойства."
            }
          ],
          "desciption": "Возвращает значение свойства оригинального события. Значения свойств кэшируются.\n\nВозвращает значение.",
          "name": "get"
        }
      ]
    }
  },
  {
    "name": "domEvent.MultiTouch",
    "url": "domEvent.MultiTouch",
    "def": {
      "name": "domEvent.MultiTouch",
      "description": "Расширяет\n            IMultiTouchEvent.\n\nОбъект-событие. Предоставляет прокси-методы для\nдоступа к полям и методам DOM-события. Возвращаемые\nзначения нормализованы с учётом особенностей различных браузеров.\n\nКонструктор | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "originalEvent",
          "type": "Object",
          "description": "multitouch-событие."
        },
        {
          "isRequired": false,
          "param": "type",
          "type": "String",
          "description": "Тип события. Если не указан, считается равным 'multi' + originalEvent.type."
        }
      ],
      "methods": [
        {
          "return": "Object",
          "params": [
            {
              "isRequired": true,
              "param": "name",
              "type": "String",
              "description": "Имя свойства."
            }
          ],
          "desciption": "Возвращает значение свойства оригинального события. Значения свойств кэшируются.\n\nВозвращает значение.",
          "name": "get"
        }
      ]
    }
  },
  {
    "name": "domEvent.Pointer",
    "url": "domEvent.Pointer",
    "def": {
      "name": "domEvent.Pointer",
      "description": "Расширяет\n            IMultiTouchEvent.\n\nОбъект-событие. Предоставляет прокси-методы для\nдоступа к полям и методам DOM-события (одиночное касание экрана).\n\nКонструктор | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "originalEvent",
          "type": "Object",
          "description": "DOM-событие."
        },
        {
          "isRequired": false,
          "param": "type",
          "type": "String",
          "description": "Тип события. Если не указан, берётся из originalEvent.type."
        }
      ],
      "methods": [
        {
          "return": "Object",
          "params": [
            {
              "isRequired": true,
              "param": "name",
              "type": "String",
              "description": "Имя свойства."
            }
          ],
          "desciption": "Возвращает значение свойства оригинального события. Значения свойств кэшируются.\n\nВозвращает значение.",
          "name": "get"
        }
      ]
    }
  },
  {
    "name": "domEvent.Touch",
    "url": "domEvent.Touch",
    "def": {
      "name": "domEvent.Touch",
      "description": "Расширяет\n            IMultiTouchEvent.\n\nОбъект-событие. Предоставляет прокси-методы для\nдоступа к полям и методам DOM-события. Возвращаемые\nзначения нормализованы с учётом особенностей различных браузеров.\n\nКонструктор | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "originalEvent",
          "type": "Object",
          "description": "DOM-событие."
        },
        {
          "isRequired": false,
          "param": "type",
          "type": "String",
          "description": "Тип события. Если не указан, берётся из originalEvent.type."
        }
      ],
      "methods": [
        {
          "return": "Object",
          "params": [
            {
              "isRequired": true,
              "param": "name",
              "type": "String",
              "description": "Имя свойства."
            }
          ],
          "desciption": "Возвращает значение свойства оригинального события. Значения свойств кэшируются.\n\nВозвращает значение.",
          "name": "get"
        }
      ]
    }
  },
  {
    "name": "error.AccessError",
    "url": "error.AccessError",
    "def": {
      "name": "error.AccessError",
      "description": "Расширяет\n            error.ExternalError.\n\nКонструктор",
      "hasCtor": true,
      "inherits": [
        "error.ExternalError"
      ]
    }
  },
  {
    "name": "error.ClientError",
    "url": "error.ClientError",
    "def": {
      "name": "error.ClientError",
      "description": "Расширяет Error.\n\nКонструктор",
      "hasCtor": true,
      "inherits": [
        "Error"
      ]
    }
  },
  {
    "name": "error.create",
    "url": "error.create",
    "def": {
      "name": "error.create",
      "hasCtor": false
    }
  },
  {
    "name": "error.DataProcessingError",
    "url": "error.DataProcessingError",
    "def": {
      "name": "error.DataProcessingError",
      "description": "Расширяет\n            error.ExternalError.\n\nКонструктор",
      "hasCtor": true,
      "inherits": [
        "error.ExternalError"
      ]
    }
  },
  {
    "name": "error.DeprecationWarning",
    "url": "error.DeprecationWarning",
    "def": {
      "name": "error.DeprecationWarning",
      "description": "Расширяет\n            error.Warning.\n\nКонструктор",
      "hasCtor": true,
      "inherits": [
        "error.Warning"
      ]
    }
  },
  {
    "name": "error.EmptyResultReject",
    "url": "error.EmptyResultReject",
    "def": {
      "name": "error.EmptyResultReject",
      "description": "Расширяет\n            error.Reject.\n\nКонструктор",
      "hasCtor": true,
      "inherits": [
        "error.Reject"
      ]
    }
  },
  {
    "name": "error.ExternalError",
    "url": "error.ExternalError",
    "def": {
      "name": "error.ExternalError",
      "description": "Расширяет Error.\n\nКонструктор",
      "hasCtor": true,
      "inherits": [
        "Error"
      ]
    }
  },
  {
    "name": "error.FeatureRemovedError",
    "url": "error.FeatureRemovedError",
    "def": {
      "name": "error.FeatureRemovedError",
      "description": "Расширяет\n            error.ClientError.\n\nКонструктор",
      "hasCtor": true,
      "inherits": [
        "error.ClientError"
      ]
    }
  },
  {
    "name": "error.InputError",
    "url": "error.InputError",
    "def": {
      "name": "error.InputError",
      "description": "Расширяет\n            error.ClientError.\n\nКонструктор",
      "hasCtor": true,
      "inherits": [
        "error.ClientError"
      ]
    }
  },
  {
    "name": "control.storage",
    "url": "control.storage",
    "def": {
      "name": "control.storage",
      "description": "Статический объект.\n\n\n            Экземпляр класса  util.Storage\n        \n\nХранилище элементов управления карты. Содержит\nсоответствие ключей элементов управления и их конструкторов.\n\n\n\n\nПо умолчанию в хранилище добавлены следующие элементы управления:\n\nМетоды ",
      "hasCtor": false
    }
  },
  {
    "name": "error.OperationCanceledReject",
    "url": "error.OperationCanceledReject",
    "def": {
      "name": "error.OperationCanceledReject",
      "description": "Расширяет\n            error.Reject.\n\nКонструктор",
      "hasCtor": true,
      "inherits": [
        "error.Reject"
      ]
    }
  },
  {
    "name": "control.TypeSelector",
    "url": "control.TypeSelector",
    "def": {
      "name": "control.TypeSelector",
      "description": "Расширяет\n            control.ListBox.\n\nЭлемент управления \"Типы карты\". В данный элемент управления можно добавлять\nэлементы списка, которые описывают типы карты, а также дополнительные элементы.\nКлюч элемента управления в хранилище control.storage —&nbsp;\"typeSelector\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "parameters",
          "type": "String[]|MapType[]|Object",
          "description": "Объект с описаниями параметров элемента управления.\nЕсли передан массив, то он трактуется как массив типов карты."
        }
      ],
      "inherits": [
        "control.ListBox"
      ],
      "methods": [
        {
          "return": "control.TypeSelector",
          "params": [
            {
              "isRequired": true,
              "param": "mapType",
              "type": "String|MapType",
              "description": "Тип карты."
            },
            {
              "isRequired": false,
              "param": "positionIndex",
              "type": "Integer",
              "description": "Позиция в списке (если не указана,\nновый тип карты добавляется в конец списка).\nСписок значений positionIndex по умолчанию для стандартных типов карты:\n\n    'yandex#map' - 5;\n    'yandex#satellite' - 10;\n    'yandex#hybrid' - 15;\n    'yandex#publicMap' - 20;\n    'yandex#publicMapHybrid' - 25.\n"
            }
          ],
          "desciption": "Добавляет тип карты в список.\n\nВозвращает ссылку на себя.",
          "name": "addMapType"
        },
        {
          "return": "Map",
          "desciption": "Возвращает ссылку на карту.",
          "name": "getMap"
        },
        {
          "return": "control.TypeSelector",
          "desciption": "Удаляет все типы карты из элемента управления.\n\nВозвращает ссылку на себя.",
          "name": "removeAllMapTypes"
        },
        {
          "return": "control.TypeSelector",
          "params": [
            {
              "isRequired": true,
              "param": "mapType",
              "type": "String|MapType",
              "description": "Тип карты."
            }
          ],
          "desciption": "Удаляет тип карты.\n\nВозвращает ссылку на себя.",
          "name": "removeMapType"
        }
      ],
      "props": [
        {
          "type": "data.Manager",
          "description": "Данные элемента управления.",
          "name": "data"
        }
      ]
    }
  },
  {
    "name": "error.OperationUnawailableReject",
    "url": "error.OperationUnawailableReject",
    "def": {
      "name": "error.OperationUnawailableReject",
      "description": "Расширяет\n            error.Reject.\n\nКонструктор",
      "hasCtor": true,
      "inherits": [
        "error.Reject"
      ]
    }
  },
  {
    "name": "error.OperationUnallowedReject",
    "url": "error.OperationUnallowedReject",
    "def": {
      "name": "error.OperationUnallowedReject",
      "description": "Расширяет\n            error.Reject.\n\nКонструктор",
      "hasCtor": true,
      "inherits": [
        "error.Reject"
      ]
    }
  },
  {
    "name": "error.OveruseWarning",
    "url": "error.OveruseWarning",
    "def": {
      "name": "error.OveruseWarning",
      "description": "Расширяет\n            error.Warning.\n\nКонструктор",
      "hasCtor": true,
      "inherits": [
        "error.Warning"
      ]
    }
  },
  {
    "name": "error.ProcessError",
    "url": "error.ProcessError",
    "def": {
      "name": "error.ProcessError",
      "description": "Расширяет\n            error.ClientError.\n\nКонструктор",
      "hasCtor": true,
      "inherits": [
        "error.ClientError"
      ]
    }
  },
  {
    "name": "error.RequestError",
    "url": "error.RequestError",
    "def": {
      "name": "error.RequestError",
      "description": "Расширяет\n            error.ExternalError.\n\nКонструктор",
      "hasCtor": true,
      "inherits": [
        "error.ExternalError"
      ]
    }
  },
  {
    "name": "error.Reject",
    "url": "error.Reject",
    "def": {
      "name": "error.Reject",
      "description": "Расширяет Error.\n\nКонструктор",
      "hasCtor": true,
      "inherits": [
        "Error"
      ]
    }
  },
  {
    "name": "error.StorageItemAccessError",
    "url": "error.StorageItemAccessError",
    "def": {
      "name": "error.StorageItemAccessError",
      "description": "Расширяет\n            error.ClientError.\n\nКонструктор",
      "hasCtor": true,
      "inherits": [
        "error.ClientError"
      ]
    }
  },
  {
    "name": "error.StateError",
    "url": "error.StateError",
    "def": {
      "name": "error.StateError",
      "description": "Расширяет\n            error.ClientError.\n\nКонструктор",
      "hasCtor": true,
      "inherits": [
        "error.ClientError"
      ]
    }
  },
  {
    "name": "error.Warning",
    "url": "error.Warning",
    "def": {
      "name": "error.Warning",
      "description": "Расширяет Error.\n\nКонструктор",
      "hasCtor": true,
      "inherits": [
        "Error"
      ]
    }
  },
  {
    "name": "event.Group",
    "url": "event.Group",
    "def": {
      "name": "event.Group",
      "description": "Расширяет\n            IEventGroup.\n\nГруппа слушателей событий.\n\nКонструктор | Поля  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "events",
          "type": "IEventManager",
          "description": "Менеджер событий, для которого создается группа."
        }
      ],
      "inherits": [
        "IEventGroup"
      ],
      "props": [
        {
          "type": "IEventManager",
          "description": "Менеджер событий, для которого создана группа.",
          "name": "events"
        }
      ]
    }
  },
  {
    "name": "error.NotSupportedError",
    "url": "error.NotSupportedError",
    "def": {
      "name": "error.NotSupportedError",
      "description": "Расширяет\n            error.ExternalError.\n\nКонструктор",
      "hasCtor": true,
      "inherits": [
        "error.ExternalError"
      ]
    }
  },
  {
    "name": "event.Manager",
    "url": "event.Manager",
    "def": {
      "name": "event.Manager",
      "description": "Расширяет\n            IEventManager.\n\nМенеджер событий. При помощи менеджера событий можно подписываться на события и\nотписываться от них, а также инициировать сами события.\nМенеджер реализует возможность построения иерархии распространения событий с помощью метода\nevent.Manager.setParent.\n\n\nРаспространение события происходит в три фазы:\n\n1. Событие получают непосредственные подписчики;\n2. Событие получают вышестоящие в иерархии объекты посредством перебрасывания\nсобытия на родительском менеджере событий;\n3. Событие получают обработчики действия по умолчанию посредством служебного события\ntype + 'defaultaction'; действие по умолчанию выполняется, только если поле target события\nсовпадает с контекстом менеджера событий.\n\n\n\n\n\n\nТакже менеджер позволяет добавлять обработчики событий с указанием приоритета. При\nбросании событий обработчики будут вызваны в порядке убывания приоритета.\n\n\n\n\nПодписки с одинаковыми параметрами callback, context, но с разными приоритетами считаются\nразными. При удалении подписки необходимо указывать тот же приоритет, что и при\nдобавлении.\n\nКонструктор | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "params",
          "type": "Object",
          "description": "Параметры менеджера событий."
        }
      ],
      "inherits": [
        "IEventManager"
      ],
      "methods": [
        {
          "return": "Event",
          "params": [
            {
              "isRequired": true,
              "param": "type",
              "type": "String",
              "description": "Тип события."
            },
            {
              "isRequired": true,
              "param": "event",
              "type": "Object",
              "description": "Объект, описывающий событие."
            },
            {
              "isRequired": true,
              "param": "target",
              "type": "Object",
              "description": "Объект, на котором произошло событие."
            }
          ],
          "desciption": "Функция, которая создает объект-событие.\nВызывается в методе fire, когда переданный объект не является\nэкземпляром класса Event или его наследником.\n\nВозвращает объект-событие.",
          "name": "createEventObject"
        },
        {
          "return": "event.Manager",
          "params": [
            {
              "isRequired": true,
              "param": "type",
              "type": "String",
              "description": "Тип события."
            },
            {
              "isRequired": false,
              "param": "event",
              "type": "Object|Event",
              "description": "Событие. Если передан хэш с данными, то для него будет\nвызван метод createEventObject, и дальнейшие действия будут производиться с новым\nсозданным событием."
            }
          ],
          "desciption": "Бросает событие.\n\nВозвращает ссылку на себя.",
          "name": "fire"
        },
        {
          "return": "IEventManager",
          "params": [
            {
              "isRequired": true,
              "param": "types",
              "type": "String|String[]",
              "description": "Тип события или массив типов."
            },
            {
              "isRequired": true,
              "param": "callback",
              "type": "Function",
              "description": "Функция-обработчик события. В качестве параметра в функцию передается\nобъект события IEvent."
            },
            {
              "isRequired": false,
              "param": "context",
              "type": "Object",
              "description": "Контекст исполнения обработчика."
            },
            {
              "isRequired": false,
              "param": "priority",
              "type": "Integer",
              "description": "Приоритет подписки."
            }
          ],
          "desciption": "Добавляет слушателя, который вызовет функцию-обработчик только 1 раз.\n\nВозвращает ссылку на себя.",
          "name": "once"
        },
        {
          "return": "event.Manager",
          "params": [
            {
              "isRequired": true,
              "param": "parent",
              "type": "IEventManager|null",
              "description": "Родительский менеджер событий."
            }
          ],
          "desciption": "Устанавливает родительский менеджер событий.\n\nВозвращает ссылку на себя.",
          "name": "setParent"
        }
      ]
    }
  },
  {
    "name": "event.Mapper",
    "url": "event.Mapper",
    "def": {
      "name": "event.Mapper",
      "description": "Расширяет\n            IEventTrigger.\n\nМаппер событий. Позволяет управлять распространением событий по иерархии менеджеров событий.\n\nКонструктор | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "targetEventManager",
          "type": "IEventManager",
          "description": "Менеджер событий, на который маппер распространяет инициируемые на\nнем события."
        },
        {
          "isRequired": true,
          "param": "mappingTable",
          "type": "Object",
          "description": "Таблица правил маппинга. Представляет собой хэш, ключами которого являются типы\nсобытий, а значениями - соответствующие функции маппинга, либо Boolean значения.\nФункция маппинга для конкретного типа событий получает на вход экземпляр события, инициированного на маппере,\nа возвращать должна экземпляр события для распространения далее по иерархии, либо null, если распространение\nнеобходимо запретить.\nBoolean значения трактуются следующим образом:\n\n    true - события данного типа распространяются по иерархии в неизменном виде;\n    false - события данного типа по иерархии не распространяются.\n\nДополнительно в таблице доступен ключ \"*\" для правила обработки по умолчанию."
        }
      ],
      "inherits": [
        "IEventTrigger"
      ]
    }
  },
  {
    "name": "geocode",
    "url": "geocode",
    "def": {
      "name": "geocode",
      "hasCtor": false
    }
  },
  {
    "name": "formatter",
    "url": "formatter",
    "def": {
      "name": "formatter",
      "description": "Статический объект.\n\nСтатический класс, содержащий методы форматирования единиц\nизмерения с учётом текущего языка.\n\nМетоды ",
      "hasCtor": false,
      "methods": [
        {
          "return": "String",
          "params": [
            {
              "isRequired": true,
              "param": "value",
              "type": "Number",
              "description": "Длина в метрах."
            },
            {
              "isRequired": false,
              "param": "significantDigits",
              "type": "Integer",
              "description": "Число значащих цифр в ответе."
            }
          ],
          "desciption": "Возвращает отформатированное согласно локальным правилам\nи переведённое в нужную систему единиц измерения строковое представление\nрасстояния.",
          "name": "distance"
        },
        {
          "return": "String",
          "params": [
            {
              "isRequired": true,
              "param": "value",
              "type": "Number",
              "description": "Интервал времени в секундах."
            },
            {
              "isRequired": false,
              "param": "significantDigits",
              "type": "Integer",
              "description": "Число значащих цифр в ответе."
            }
          ],
          "desciption": "Возвращает строковое представление интервала времени.",
          "name": "duration"
        }
      ]
    }
  },
  {
    "name": "control.SearchControl",
    "url": "control.SearchControl",
    "def": {
      "name": "control.SearchControl",
      "description": "Расширяет\n            IControl, ICustomizable.\n\nЭлемент управления \"Поиск по карте\". Позволяет обрабатывать поисковый запрос\nпользователя и отображать результат в панели и на карте.\n\n\nКаждый результат поиска представляется в панели элемента управления в виде\nдвухстрочного блока. Для формирования блока используются поля name и description\nобъекта-результата геокодирования.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "parameters",
          "type": "Object",
          "description": "Параметры элемента управления."
        }
      ],
      "inherits": [
        "IControl",
        "ICustomizable"
      ],
      "methods": [
        {
          "return": "Map",
          "desciption": "Возвращает ссылку на карту.",
          "name": "getMap"
        },
        {
          "return": "String",
          "desciption": "Возвращает поисковый запрос.",
          "name": "getRequestString"
        },
        {
          "return": "Object",
          "desciption": "возвращает метаданные геопоиска.",
          "name": "getResponseMetaData"
        },
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": true,
              "param": "index",
              "type": "Integer",
              "description": "Индекс результата (начиная с 0)."
            }
          ],
          "desciption": "Получение результатов поиска.\n\nВозвращает объект типа vow.Promise.",
          "name": "getResult"
        },
        {
          "return": "Object[]",
          "desciption": "Возвращает массив, содержащий все текущие результаты.",
          "name": "getResultsArray"
        },
        {
          "return": "Integer",
          "desciption": "Возвращает количество найденых результатов.",
          "name": "getResultsCount"
        },
        {
          "return": "Integer",
          "desciption": "Возвращает индекс выбранного элемента.",
          "name": "getSelectedIndex"
        },
        {
          "desciption": "Скрывает результат, показанный на карте.",
          "name": "hideResult"
        },
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": true,
              "param": "request",
              "type": "String",
              "description": "Запрос."
            }
          ],
          "desciption": "Осуществляет поиск.\n\nВозвращает объект типа vow.Promise.",
          "name": "search"
        },
        {
          "return": "control.SearchControl",
          "params": [
            {
              "isRequired": true,
              "param": "index",
              "type": "Integer",
              "description": "Индекс результата, начинается с 0."
            }
          ],
          "desciption": "Отображает результат с заданным индексом.\n\nВозвращает ссылку на себя.",
          "name": "showResult"
        }
      ],
      "props": [
        {
          "type": "data.Manager",
          "description": "Состояние элемента управления.\nИмена полей, доступных через метод data.Manager.get:\n\n    size — текущий размер элемента управления;\n    results — массив, содержащий результаты поиска;\n    currentIndex — индекс текущего выбранного элемента;\n    found — общее количество найденных результатов;\n    request — текущий активный запрос;\n    correction — исправленный запрос;\n    noSuggestPanel - флаг, скрывать ли панель поисковых подсказок.\n",
          "name": "state"
        }
      ]
    }
  },
  {
    "name": "geometry.base.Circle",
    "url": "geometry.base.Circle",
    "def": {
      "name": "geometry.base.Circle",
      "description": "Расширяет\n            IBaseCircleGeometry.\n\nБазовая геометрия \"Круг\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "coordinates",
          "type": "Number[]|null",
          "description": "Координаты центра круга."
        },
        {
          "isRequired": false,
          "param": "radius",
          "type": "Number",
          "description": "Радиус круга."
        }
      ],
      "inherits": [
        "IBaseCircleGeometry"
      ],
      "props": [
        {
          "type": "event.Manager",
          "description": "Менеджер событий геометрии.",
          "name": "events"
        }
      ]
    }
  },
  {
    "name": "geolocation",
    "url": "geolocation",
    "def": {
      "name": "geolocation",
      "description": "Статический объект.\n\nПредоставляет информацию о местоположении пользователя.\n\nМетоды ",
      "hasCtor": false,
      "methods": [
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": false,
              "param": "options",
              "type": ""
            }
          ],
          "desciption": "Пытается определить местоположение пользователя. Возвращает объект-promise,\nкоторый будет либо подтверждён объектом с полем geoObjects, либо\nотклонён с сообщением об ошибке. Поле geoObjects является экземпляром GeoObjectCollection.\nВ коллекцию будет добавлен объект, обозначающий текущее местоположение пользователя.\n\nВозвращает объект-promise.",
          "name": "get"
        }
      ]
    }
  },
  {
    "name": "geometry.base.LinearRing.fromEncodedCoordinates",
    "url": "geometry.base.LinearRing.fromEncodedCoordinates",
    "def": {
      "name": "geometry.base.LinearRing.fromEncodedCoordinates",
      "hasCtor": false
    }
  },
  {
    "name": "geometry.base.LinearRing.toEncodedCoordinates",
    "url": "geometry.base.LinearRing.toEncodedCoordinates",
    "def": {
      "name": "geometry.base.LinearRing.toEncodedCoordinates",
      "hasCtor": false
    }
  },
  {
    "name": "geometry.base.LineString.fromEncodedCoordinates",
    "url": "geometry.base.LineString.fromEncodedCoordinates",
    "def": {
      "name": "geometry.base.LineString.fromEncodedCoordinates",
      "hasCtor": false
    }
  },
  {
    "name": "geometry.base.LineString",
    "url": "geometry.base.LineString",
    "def": {
      "name": "geometry.base.LineString",
      "description": "Расширяет\n            IBaseLineStringGeometry.\n\nБазовая геометрия \"Ломаная линия\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "coordinates",
          "type": "Number[][]",
          "description": "Координаты геометрии."
        }
      ],
      "inherits": [
        "IBaseLineStringGeometry"
      ],
      "props": [
        {
          "type": "event.Manager",
          "description": "Менеджер событий геометрии.",
          "name": "events"
        }
      ]
    }
  },
  {
    "name": "geometry.base.Point",
    "url": "geometry.base.Point",
    "def": {
      "name": "geometry.base.Point",
      "description": "Расширяет\n            IBasePointGeometry.\n\nБазовая геометрия \"Точка\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "coordinates",
          "type": "Number[]|null",
          "description": "Координаты точки."
        }
      ],
      "inherits": [
        "IBasePointGeometry"
      ],
      "props": [
        {
          "type": "event.Manager",
          "description": "Менеджер событий геометрии.",
          "name": "events"
        }
      ]
    }
  },
  {
    "name": "geometry.base.LineString.toEncodedCoordinates",
    "url": "geometry.base.LineString.toEncodedCoordinates",
    "def": {
      "name": "geometry.base.LineString.toEncodedCoordinates",
      "hasCtor": false
    }
  },
  {
    "name": "geometry.base.Polygon",
    "url": "geometry.base.Polygon",
    "def": {
      "name": "geometry.base.Polygon",
      "description": "Расширяет\n            IBasePolygonGeometry.\n\nБазовая геометрия \"Многоугольник\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "coordinates",
          "type": "Number[][][]",
          "description": "Координаты геометрии."
        },
        {
          "isRequired": false,
          "param": "fillRule",
          "type": "String",
          "description": "Строковый идентификатор, определяющий алгоритм заливки многоугольника.\nМожет принимать одно из двух значений:\n\n    evenOdd - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки\n    до бесконечности в любом направлении и подсчета количества сегментов контура в пределах заданной фигуры, которые\n    пересекает этот луч. Если это число нечетное, точка находится внутри; если четное, точка находится снаружи.\n    nonZero - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки\n    до бесконечности в любом направлении и проверки точек, в которых сегмент фигуры пересекает этот луч. Начиная с\n    нуля, добавляется единица каждый раз, когда сегмент пересекает луч слева направо, и вычитается единица каждый\n    раз, когда сегмент пересекает луч справа налево. Если после подсчета пересечений результат равен нулю, точка\n    находится снаружи контура. В противном случае она находится внутри.\n"
        }
      ],
      "inherits": [
        "IBasePolygonGeometry"
      ],
      "props": [
        {
          "type": "event.Manager",
          "description": "Менеджер событий геометрии.",
          "name": "events"
        }
      ]
    }
  },
  {
    "name": "geometry.base.Polygon.fromEncodedCoordinates",
    "url": "geometry.base.Polygon.fromEncodedCoordinates",
    "def": {
      "name": "geometry.base.Polygon.fromEncodedCoordinates",
      "hasCtor": false
    }
  },
  {
    "name": "geometry.base.Rectangle",
    "url": "geometry.base.Rectangle",
    "def": {
      "name": "geometry.base.Rectangle",
      "description": "Расширяет\n            IBaseRectangleGeometry.\n\nБазовая геометрия \"Прямоугольник\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "coordinates",
          "type": "Number[][]|null",
          "description": "Массив, содержащий координаты двух противоположных углов прямоугольника."
        }
      ],
      "inherits": [
        "IBaseRectangleGeometry"
      ],
      "props": [
        {
          "type": "event.Manager",
          "description": "Менеджер событий геометрии.",
          "name": "events"
        }
      ]
    }
  },
  {
    "name": "Event",
    "url": "Event",
    "def": {
      "name": "Event",
      "description": "Расширяет\n            IEvent.\n\nСобытие. Предоставляет методы для доступа к полям и методам объекта originalEvent с возможностью\nих переопределения.\n\nКонструктор | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "originalEvent",
          "type": "Object",
          "description": "Исходные данные."
        },
        {
          "isRequired": false,
          "param": "sourceEvent",
          "type": "IEvent",
          "description": "Исходное событие."
        }
      ],
      "inherits": [
        "IEvent"
      ],
      "methods": [
        {
          "return": "Object",
          "params": [
            {
              "isRequired": true,
              "param": "name",
              "type": "String",
              "description": "Имя метода."
            }
          ],
          "desciption": "Вызывает указанный метод. Операция эквивалентна поиску поля через\nget и вызову с передачей в качестве контекста originalEvent.\nВсе аргументы после первого передаются в качестве параметров вызываемому\nметоду.\n\nВозвращает значение.",
          "name": "callMethod"
        },
        {
          "return": "Object",
          "params": [
            {
              "isRequired": true,
              "param": "name",
              "type": "String",
              "description": "Имя свойства."
            }
          ],
          "desciption": "Возвращает значение поля из originalEvent.\noriginalEvent всегда имеет следующие поля:\n\n    type - строковый тип события;\n    target - ссылка на объект, породивший событие.\n\n\nВозвращает значение.",
          "name": "get"
        },
        {
          "return": "Boolean",
          "desciption": "Проверяет, отменена ли реакция по умолчанию на событие  в рамках системы событий API Яндекс.Карт.\n\nВозвращает true, если реакция на событие по умолчанию отменена, false - в противном случае.",
          "name": "isDefaultPrevented"
        },
        {
          "return": "Boolean",
          "desciption": "Определяет, прекращено ли распространение события в системе событий API Яндекс.Карт.\n\nВозвращает true - распространение прекращено, false - нет",
          "name": "isImmediatePropagationStopped"
        },
        {
          "return": "Boolean",
          "desciption": "Проверяет, остановлено ли распространение события по иерархии\nобъектов и коллекций в системе событий API Яндекс.Карт.\n\nВозвращает true - распространение по иерархии отменено,\nfalse - нет.",
          "name": "isPropagationStopped"
        },
        {
          "desciption": "Отменяет реакцию по умолчанию на событие в рамках системы событий API Яндекс.Карт.\nВызов этого метода никак не влияет на распространение исходного DOM-события\n(если оно есть) по DOM-дереву.",
          "name": "preventDefault"
        },
        {
          "desciption": "Прекращает распространение события в системе событий API Яндекс.Карт.\nВызов этого метода никак не влияет на распространение исходного DOM-события\n(если оно есть) по DOM-дереву.",
          "name": "stopImmediatePropagation"
        },
        {
          "desciption": "Прекращает распространение события по иерархии объектов и коллекций\nв системе событий API Яндекс.Карт.\nВызов этого метода никак не влияет на распространение исходного DOM-события\n(если оно есть) по DOM-дереву.",
          "name": "stopPropagation"
        }
      ]
    }
  },
  {
    "name": "geometry.base.Polygon.toEncodedCoordinates",
    "url": "geometry.base.Polygon.toEncodedCoordinates",
    "def": {
      "name": "geometry.base.Polygon.toEncodedCoordinates",
      "hasCtor": false
    }
  },
  {
    "name": "geometry.Circle",
    "url": "geometry.Circle",
    "def": {
      "name": "geometry.Circle",
      "description": "Расширяет\n            ICircleGeometry.\n\nГеометрия \"Круг\".\n\nСм.: Circle \n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "coordinates",
          "type": "Number[]|null",
          "description": "Координаты центра круга."
        },
        {
          "isRequired": false,
          "param": "radius",
          "type": "Number",
          "description": "Радиус круга в метрах."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции геометрии."
        }
      ],
      "inherits": [
        "ICircleGeometry"
      ]
    }
  },
  {
    "name": "geometry.json.lineString",
    "url": "geometry.json.lineString",
    "def": {
      "name": "geometry.json.lineString",
      "description": "Расширяет\n            IGeometryJson.\n\nОбъект, описывающий JSON-представление геометрии \"Ломаная линия\".\n\nКонструктор | Поля ",
      "hasCtor": true,
      "inherits": [
        "IGeometryJson"
      ],
      "props": [
        {
          "type": "Number[][]",
          "description": "Координаты ломаной линии.",
          "name": "coordinates"
        },
        {
          "type": "String",
          "description": "Идентификатор типа геометрии \"Ломаная линия\".\nВсегда должен принимать значение \"LineString\".",
          "name": "type"
        }
      ]
    }
  },
  {
    "name": "geometry.base.LinearRing",
    "url": "geometry.base.LinearRing",
    "def": {
      "name": "geometry.base.LinearRing",
      "description": "Расширяет\n            IBaseLinearRingGeometry.\n\nБазовая геометрия \"Замкнутый контур\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "coordinates",
          "type": "Number[][]",
          "description": "Координаты геометрии."
        },
        {
          "isRequired": false,
          "param": "fillRule",
          "type": "String",
          "description": "Строковый идентификатор, определяющий алгоритм заливки многоугольника.\nМожет принимать одно из двух значений:\n\n    evenOdd - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки\n    до бесконечности в любом направлении и подсчета количества сегментов контура в пределах заданной фигуры, которые\n    пересекает этот луч. Если это число нечетное, точка находится внутри; если четное, точка находится снаружи.\n    nonZero - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки\n    до бесконечности в любом направлении и проверки точек, в которых сегмент фигуры пересекает этот луч. Начиная с\n    нуля, добавляется единица каждый раз, когда сегмент пересекает луч слева направо, и вычитается единица каждый\n    раз, когда сегмент пересекает луч справа налево. Если после подсчета пересечений результат равен нулю, точка\n    находится снаружи контура. В противном случае она находится внутри.\n"
        }
      ],
      "inherits": [
        "IBaseLinearRingGeometry"
      ],
      "props": [
        {
          "type": "event.Manager",
          "description": "Менеджер событий геометрии.",
          "name": "events"
        }
      ]
    }
  },
  {
    "name": "geometry.json.Point",
    "url": "geometry.json.Point",
    "def": {
      "name": "geometry.json.Point",
      "description": "Расширяет\n            IGeometryJson.\n\nОбъект, описывающий JSON-представление геометрии \"Точка\".\n\nКонструктор | Поля ",
      "hasCtor": true,
      "inherits": [
        "IGeometryJson"
      ]
    }
  },
  {
    "name": "geometry.json.polygon",
    "url": "geometry.json.polygon",
    "def": {
      "name": "geometry.json.polygon",
      "description": "Расширяет\n            IGeometryJson.\n\nОбъект, описывающий JSON-представление геометрии \"Многоугольник\".\n\nКонструктор | Поля ",
      "hasCtor": true,
      "inherits": [
        "IGeometryJson"
      ],
      "props": [
        {
          "type": "Number[][][]",
          "description": "Координаты многоугольника.",
          "name": "coordinates"
        },
        {
          "type": "String",
          "description": "Идентификатор алгоритма заливки многоугольника.\nМожет принимать одно из двух значений:\n\n    evenOdd - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки\n    до бесконечности в любом направлении и подсчета количества сегментов контура в пределах заданной фигуры, которые\n    пересекает этот луч. Если это число нечетное, точка находится внутри; если четное, точка находится снаружи.\n    nonZero - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки\n    до бесконечности в любом направлении и проверки точек, в которых сегмент фигуры пересекает этот луч. Начиная с\n    нуля, добавляется единица каждый раз, когда сегмент пересекает луч слева направо, и вычитается единица каждый\n    раз, когда сегмент пересекает луч справа налево. Если после подсчета пересечений результат равен нулю, точка\n    находится снаружи контура. В противном случае она находится внутри.\n",
          "name": "fillRule"
        }
      ]
    }
  },
  {
    "name": "geometry.LineString.fromEncodedCoordinates",
    "url": "geometry.LineString.fromEncodedCoordinates",
    "def": {
      "name": "geometry.LineString.fromEncodedCoordinates",
      "hasCtor": false
    }
  },
  {
    "name": "geometry.LineString",
    "url": "geometry.LineString",
    "def": {
      "name": "geometry.LineString",
      "description": "Расширяет\n            ILineStringGeometry.\n\nГеометрия \"Ломаная линия\".\n\nСм.: Polyline \n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "coordinates",
          "type": "Number[][]",
          "description": "Координаты геометрии."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции геометрии."
        }
      ],
      "inherits": [
        "ILineStringGeometry"
      ],
      "methods": [
        {
          "return": "Number",
          "params": [
            {
              "isRequired": false,
              "param": "from",
              "type": "Number",
              "description": "Начиная с какой точки считать длину."
            },
            {
              "isRequired": false,
              "param": "to",
              "type": "Number",
              "description": "До какой точки считать длину. Если не указано, берётся последняя точка."
            }
          ],
          "desciption": "Возвращает длину указанного отрезка, либо всей линии, если ограничители не заданы.",
          "name": "getDistance"
        }
      ]
    }
  },
  {
    "name": "geometry.LineString.toEncodedCoordinates",
    "url": "geometry.LineString.toEncodedCoordinates",
    "def": {
      "name": "geometry.LineString.toEncodedCoordinates",
      "hasCtor": false
    }
  },
  {
    "name": "geometry.pixel.Circle",
    "url": "geometry.pixel.Circle",
    "def": {
      "name": "geometry.pixel.Circle",
      "description": "Расширяет\n            IPixelCircleGeometry.\n\nПиксельная геометрия \"Круг\".\n\nКонструктор | Поля  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "coordinates",
          "type": "Number[]|null",
          "description": "Координаты центра круга."
        },
        {
          "isRequired": true,
          "param": "radius",
          "type": "Number|null",
          "description": "Радиус круга."
        },
        {
          "isRequired": false,
          "param": "metaData",
          "type": "Object",
          "description": "Метаданные."
        }
      ],
      "inherits": [
        "IPixelCircleGeometry"
      ]
    }
  },
  {
    "name": "geometry.pixel.LineString",
    "url": "geometry.pixel.LineString",
    "def": {
      "name": "geometry.pixel.LineString",
      "description": "Расширяет\n            IPixelLineStringGeometry.\n\nПиксельная геометрия \"Ломаная линия\".\n\nКонструктор | Поля  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "coordinates",
          "type": "Number[][]",
          "description": "Координаты линии."
        },
        {
          "isRequired": false,
          "param": "metaData",
          "type": "Object",
          "description": "Метаданные."
        }
      ],
      "inherits": [
        "IPixelLineStringGeometry"
      ]
    }
  },
  {
    "name": "geometry.pixel.MultiPolygon",
    "url": "geometry.pixel.MultiPolygon",
    "def": {
      "name": "geometry.pixel.MultiPolygon",
      "description": "Расширяет\n            IPixelMultiPolygonGeometry.\n\nПиксельная геометрия \"Многоугольник из нескольких фигур\".\n\nКонструктор | Поля  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "coordinates",
          "type": "Number[][][][]",
          "description": "Координаты многоугольников."
        },
        {
          "isRequired": true,
          "param": "fillRule",
          "type": "String",
          "description": "Строковый идентификатор, определяющий алгоритм заливки многоугольников.\nМожет принимать одно из двух значений:\n\n    evenOdd - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки\n    до бесконечности в любом направлении и подсчета количества сегментов контура в пределах заданной фигуры, которые\n    пересекает этот луч. Если это число нечетное, точка находится внутри; если четное, точка находится снаружи.\n    nonZero - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки\n    до бесконечности в любом направлении и проверки точек, в которых сегмент фигуры пересекает этот луч. Начиная с\n    нуля, добавляется единица каждый раз, когда сегмент пересекает луч слева направо, и вычитается единица каждый\n    раз, когда сегмент пересекает луч справа налево. Если после подсчета пересечений результат равен нулю, точка\n    находится снаружи контура. В противном случае она находится внутри.\n"
        },
        {
          "isRequired": false,
          "param": "metaData",
          "type": "Object",
          "description": "Метаданные."
        }
      ],
      "inherits": [
        "IPixelMultiPolygonGeometry"
      ]
    }
  },
  {
    "name": "geometry.json.circle",
    "url": "geometry.json.circle",
    "def": {
      "name": "geometry.json.circle",
      "description": "Расширяет\n            IGeometryJson.\n\nОбъект, описывающий JSON-представление геометрии \"Круг\".\n\nКонструктор | Поля ",
      "hasCtor": true,
      "inherits": [
        "IGeometryJson"
      ],
      "props": [
        {
          "type": "Number[]|null",
          "description": "Координаты центра круга.",
          "name": "coordinates"
        },
        {
          "type": "Number",
          "description": "Радиус круга.",
          "name": "radius"
        },
        {
          "type": "String",
          "description": "Идентификатор типа геометрии \"Круг\".\nВсегда должен принимать значение \"Circle\".",
          "name": "type"
        }
      ]
    }
  },
  {
    "name": "geometry.pixel.Point",
    "url": "geometry.pixel.Point",
    "def": {
      "name": "geometry.pixel.Point",
      "description": "Расширяет\n            IPixelPointGeometry.\n\nПиксельная геометрия \"Точка\".\n\nКонструктор | Поля  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "position",
          "type": "Number[]|null",
          "description": "Координаты точки."
        },
        {
          "isRequired": false,
          "param": "metaData",
          "type": "Object",
          "description": "Метаданные."
        }
      ],
      "inherits": [
        "IPixelPointGeometry"
      ]
    }
  },
  {
    "name": "geometry.pixel.Polygon",
    "url": "geometry.pixel.Polygon",
    "def": {
      "name": "geometry.pixel.Polygon",
      "description": "Расширяет\n            IPixelPolygonGeometry.\n\nПиксельная геометрия \"Многоугольник\".\n\nКонструктор | Поля  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "coordinates",
          "type": "Number[][][]",
          "description": "Координаты многоугольника."
        },
        {
          "isRequired": true,
          "param": "fillRule",
          "type": "String",
          "description": "Строковый идентификатор, определяющий алгоритм заливки многоугольника.\nМожет принимать одно из двух значений:\n\n    evenOdd - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки\n    до бесконечности в любом направлении и подсчета количества сегментов контура в пределах заданной фигуры, которые\n    пересекает этот луч. Если это число нечетное, точка находится внутри; если четное, точка находится снаружи.\n    nonZero - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки\n    до бесконечности в любом направлении и проверки точек, в которых сегмент фигуры пересекает этот луч. Начиная с\n    нуля, добавляется единица каждый раз, когда сегмент пересекает луч слева направо, и вычитается единица каждый\n    раз, когда сегмент пересекает луч справа налево. Если после подсчета пересечений результат равен нулю, точка\n    находится снаружи контура. В противном случае она находится внутри.\n"
        },
        {
          "isRequired": false,
          "param": "metaData",
          "type": "Object",
          "description": "Метаданные."
        }
      ],
      "inherits": [
        "IPixelPolygonGeometry"
      ]
    }
  },
  {
    "name": "geometry.Point",
    "url": "geometry.Point",
    "def": {
      "name": "geometry.Point",
      "description": "Расширяет\n            IPointGeometry.\n\nГеометрия \"Точка\".\n\nСм.: Placemark \n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "position",
          "type": "Number[]",
          "description": "Координаты точки."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции геометрии."
        }
      ],
      "inherits": [
        "IPointGeometry"
      ]
    }
  },
  {
    "name": "geometry.Polygon",
    "url": "geometry.Polygon",
    "def": {
      "name": "geometry.Polygon",
      "description": "Расширяет\n            IPolygonGeometry.\n\nГеометрия \"Многоугольник\".\n\nСм.: Polygon \n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "coordinates",
          "type": "Number[][][]",
          "description": "Координаты геометрии. Трехмерный массив, элементами которого являются\nдвумерные массивы координат контуров многоугольника. Первый элемент описывает внешний контур, остальные - внутренние."
        },
        {
          "isRequired": false,
          "param": "fillRule",
          "type": "String",
          "description": "Строковый идентификатор, определяющий алгоритм заливки многоугольника.\nМожет принимать одно из двух значений:\n\n    evenOdd - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки\n    до бесконечности в любом направлении и подсчета количества сегментов контура в пределах заданной фигуры, которые\n    пересекает этот луч. Если это число нечетное, точка находится внутри; если четное, точка находится снаружи.\n    nonZero - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки\n    до бесконечности в любом направлении и проверки точек, в которых сегмент фигуры пересекает этот луч. Начиная с\n    нуля, добавляется единица каждый раз, когда сегмент пересекает луч слева направо, и вычитается единица каждый\n    раз, когда сегмент пересекает луч справа налево. Если после подсчета пересечений результат равен нулю, точка\n    находится снаружи контура. В противном случае она находится внутри.\n"
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции геометрии."
        }
      ],
      "inherits": [
        "IPolygonGeometry"
      ]
    }
  },
  {
    "name": "geometry.json.rectangle",
    "url": "geometry.json.rectangle",
    "def": {
      "name": "geometry.json.rectangle",
      "description": "Расширяет\n            IGeometryJson.\n\nОбъект, описывающий JSON-представление геометрии \"Прямоугольник\".\n\nКонструктор | Поля ",
      "hasCtor": true,
      "inherits": [
        "IGeometryJson"
      ],
      "props": [
        {
          "type": "Number[][]|null",
          "description": "Координаты двух противоположных углов прямоугольника.",
          "name": "coordinates"
        },
        {
          "type": "String",
          "description": "Идентификатор типа геометрии \"Прямоугольник\".\nВсегда должен принимать значение \"Rectangle\".",
          "name": "type"
        }
      ]
    }
  },
  {
    "name": "geometry.Polygon.fromEncodedCoordinates",
    "url": "geometry.Polygon.fromEncodedCoordinates",
    "def": {
      "name": "geometry.Polygon.fromEncodedCoordinates",
      "hasCtor": false
    }
  },
  {
    "name": "geometry.Polygon.toEncodedCoordinates",
    "url": "geometry.Polygon.toEncodedCoordinates",
    "def": {
      "name": "geometry.Polygon.toEncodedCoordinates",
      "hasCtor": false
    }
  },
  {
    "name": "geometry.pixel.Rectangle",
    "url": "geometry.pixel.Rectangle",
    "def": {
      "name": "geometry.pixel.Rectangle",
      "description": "Расширяет\n            IPixelRectangleGeometry.\n\nПиксельная геометрия \"Прямоугольник\".\n\nКонструктор | Поля  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "coordinates",
          "type": "Number[][]|null",
          "description": "Координаты двух противоположных углов прямоугольника."
        },
        {
          "isRequired": false,
          "param": "metaData",
          "type": "Object",
          "description": "Метаданные."
        }
      ],
      "inherits": [
        "IPixelRectangleGeometry"
      ]
    }
  },
  {
    "name": "geometryEditor.model.ChildLinearRing",
    "url": "geometryEditor.model.ChildLinearRing",
    "def": {
      "name": "geometryEditor.model.ChildLinearRing",
      "description": "Примечание.&nbsp;Конструктор класса geometryEditor.model.ChildLinearRing скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nРасширяет\n            geometryEditor.model.ChildLineString.\n\nМодель дочернего замкнутого контура. Конструктор недоступен в package.full (стандартный набор модулей).\nДанный модуль загружается по требованию.\n\nПоля  | Методы \n\n\n\n    \n       \n            \n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n        \n        \n\n    ",
      "hasCtor": false,
      "inherits": [
        "geometryEditor.model.ChildLineString"
      ]
    }
  },
  {
    "name": "geometryEditor.LineString",
    "url": "geometryEditor.LineString",
    "def": {
      "name": "geometryEditor.LineString",
      "description": "Расширяет\n            IGeometryEditor.\n\nРедактор геометрии \"Ломаная линия\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "geometry",
          "type": "ILineStringGeometry",
          "description": "Геометрия \"Ломаная линия\"."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции редактора геометрии. Через опции редактора геометрии можно задавать как опции самого\nредактора, так и опции его составных частей:\n\n    опции направляющих линий с префиксом guideLines.\n"
        }
      ],
      "inherits": [
        "IGeometryEditor"
      ],
      "methods": [
        {
          "return": "vow.Promise",
          "desciption": "Возвращает объект-обещание, который подтверждается объектом модели в момент\nее фактического создания, либо отклоняется с одним из следующих кодов ошибки:\n\n    Canceled - режим редактирования отключен до момента фактического создания\n    модели;\n    Editor wasn't started - режим редактирования не включен.\n",
          "name": "getModel"
        },
        {
          "return": "geometryEditor.model.RootLineString|null",
          "desciption": "Возвращает модель данных редактора или null,\nесли на момент вызова она отсутствует.",
          "name": "getModelSync"
        },
        {
          "return": "vow.Promise",
          "desciption": "Возвращает объект-обещание, который подтверждается объектом отображения в\nмомент его фактического создания, либо отклоняется с одним из следующих кодов ошибки:\n\n    Canceled - режим редактирования отключен до момента фактического создания\n    отображения;\n    Editor wasn't started - режим редактирования не включен.\n",
          "name": "getView"
        },
        {
          "return": "geometryEditor.view.Path|null",
          "desciption": "Возвращает отображение редактора или null, если на момент\nвызова оно отсутствует.",
          "name": "getViewSync"
        },
        {
          "return": "vow.Promise",
          "desciption": "Включает режим добавления новых вершин в ломаную линию. Включение происходит асинхронно.\n\nВозвращает объект-обещание, который подтверждается в момент фактического\nстарта режима добавления новых вершин, либо отклоняется с одним из следующих кодов\nошибки:\n\n    Canceled - режим добавления новых вершин отключен до момента его фактического\n    старта.\n",
          "name": "startDrawing"
        },
        {
          "return": "vow.Promise",
          "desciption": "Включает режим редактирования. Включение происходит асинхронно.\n\nВозвращает объект-обещание, который подтверждается в момент фактического\nстарта режима редактирования, либо отклоняется с одним из следующих кодов ошибки:\n\n    Canceled - режим редактирования отключен до момента его фактического старта.\n",
          "name": "startEditing"
        },
        {
          "return": "vow.Promise",
          "desciption": "Включает режим масштабирования для ломаной линии. Включение происходит асинхронно.\n\nВозвращает объект-обещание, который подтверждается в момент фактического\nстарта режима масштабирования.",
          "name": "startFraming"
        },
        {
          "desciption": "Отключает режим добавления новых вершин в ломаную линию.",
          "name": "stopDrawing"
        },
        {
          "desciption": "Отключает режим редактирования.",
          "name": "stopEditing"
        },
        {
          "desciption": "Отключает режим масштабирования.",
          "name": "stopFraming"
        }
      ],
      "props": [
        {
          "type": "IDataManager",
          "description": "Менеджер состояния редактора геометрии.\n\n\nПоля данных, доступные посредством методов get и set:",
          "name": "state"
        }
      ]
    }
  },
  {
    "name": "geometryEditor.model.ChildLineString",
    "url": "geometryEditor.model.ChildLineString",
    "def": {
      "name": "geometryEditor.model.ChildLineString",
      "description": "Примечание.&nbsp;Конструктор класса geometryEditor.model.ChildLineString скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nРасширяет\n            IGeometryEditorChildModel.\n\nМодель дочерней ломаной линии. Конструктор недоступен в package.full (стандартный набор модулей).\nДанный модуль загружается по требованию.\n\nПоля  | Методы \n\n\n\n    \n       \n            \n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n        \n        \n\n    ",
      "hasCtor": false,
      "inherits": [
        "IGeometryEditorChildModel"
      ],
      "methods": [
        {
          "return": "Integer",
          "desciption": "Возвращает суммарное количество вершин редактируемой геометрии.",
          "name": "getAllVerticesNumber"
        },
        {
          "return": "geometryEditor.model.Edge[]",
          "desciption": "Возвращает массив моделей промежуточных меток.",
          "name": "getEdgeModels"
        },
        {
          "return": "Integer",
          "desciption": "Возвращает индекс дочерней ломаной в родительской модели.",
          "name": "getIndex"
        },
        {
          "return": "geometryEditor.model.ChildVertex[]",
          "desciption": "Возвращает массив моделей дочерних вершин.",
          "name": "getVertexModels"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "index",
              "type": "Integer",
              "description": "Индекс дочерней вершины."
            }
          ],
          "desciption": "Задает индекс дочерней ломаной в родительской модели.",
          "name": "setIndex"
        },
        {
          "return": "Number[][]",
          "params": [
            {
              "isRequired": true,
              "param": "start",
              "type": "Integer",
              "description": "Индекс, начиная с которого производится удаление и добавление вершин."
            },
            {
              "isRequired": true,
              "param": "deleteCount",
              "type": "Integer",
              "description": "Количество удаляемых вершин."
            }
          ],
          "desciption": "Удаляет определенное число вершин ломаной начиная с заданного индекса.\nПри этом на место удаляемых вершин могут быть добавлены новые.\nКоординаты новых вершин в глобальных пикселях можно передавать дополнительными аргументами после\nпараметра deleteCount.\n\nВозвращает массив координат удаленных вершин.",
          "name": "spliceVertices"
        }
      ]
    }
  },
  {
    "name": "geometryEditor.model.ChildVertex",
    "url": "geometryEditor.model.ChildVertex",
    "def": {
      "name": "geometryEditor.model.ChildVertex",
      "description": "Примечание.&nbsp;Конструктор класса geometryEditor.model.ChildVertex скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nРасширяет\n            IGeometryEditorChildModel.\n\nМодель дочерней вершины. Конструктор недоступен в package.full (стандартный набор модулей).\nДанный модуль загружается по требованию.\n\nПоля  | Методы \n\n\n\n    \n       \n            \n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n        \n        \n\n    ",
      "hasCtor": false,
      "inherits": [
        "IGeometryEditorChildModel"
      ],
      "methods": [
        {
          "return": "Integer",
          "desciption": "Возвращает суммарное количество вершин редактируемой геометрии.",
          "name": "getAllVerticesNumber"
        },
        {
          "return": "Integer",
          "desciption": "Возвращает индекс дочерней вершины в родительской модели.",
          "name": "getIndex"
        },
        {
          "return": "geometryEditor.model.ChildVertex|null",
          "desciption": "Возвращает ссылку на модель следующей вершины.",
          "name": "getNextVertex"
        },
        {
          "return": "geometryEditor.model.ChildVertex|null",
          "desciption": "Возвращает ссылку на модель предыдущей вершины.",
          "name": "getPrevVertex"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "pixels",
              "type": "Number[]",
              "description": "Глобальные пиксельные координаты вершины."
            }
          ],
          "desciption": "Задает глобальные пиксельные координаты вершины.",
          "name": "setGlobalPixels"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "index",
              "type": "Integer",
              "description": "Индекс дочерней вершины."
            }
          ],
          "desciption": "Задает индекс дочерней вершины в родительской модели.",
          "name": "setIndex"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "nextVertex",
              "type": "geometryEditor.model.ChildVertex|null",
              "description": "Модель следующей вершины."
            }
          ],
          "desciption": "Устанавливает ссылку на модель следующей вершины.",
          "name": "setNextVertex"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "prevVertex",
              "type": "geometryEditor.model.ChildVertex|null",
              "description": "Модель предыдущей вершины."
            }
          ],
          "desciption": "Устанавливает ссылку на модель предыдущей вершины.",
          "name": "setPrevVertex"
        }
      ]
    }
  },
  {
    "name": "geometryEditor.model.Edge",
    "url": "geometryEditor.model.Edge",
    "def": {
      "name": "geometryEditor.model.Edge",
      "description": "Примечание.&nbsp;Конструктор класса geometryEditor.model.Edge скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nРасширяет\n            IGeometryEditorRootModel.\n\nМодель промежуточной метки. Конструктор недоступен в package.full (стандартный набор модулей).\nДанный модуль загружается по требованию.\n\nПоля  | Методы \n\n\n\n    \n       \n            \n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n        \n        \n\n    ",
      "hasCtor": false,
      "inherits": [
        "IGeometryEditorRootModel"
      ],
      "methods": [
        {
          "return": "geometryEditor.model.ChildVertex|null",
          "desciption": "Возвращает ссылку на модель следующей вершины.",
          "name": "getNextVertex"
        },
        {
          "return": "geometryEditor.model.ChildVertex|null",
          "desciption": "Возвращает ссылку на модель предыдущей вершины.",
          "name": "getPrevVertex"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "nextVertex",
              "type": "geometryEditor.model.ChildVertex|null",
              "description": "Модель следующей вершины."
            }
          ],
          "desciption": "Устанавливает ссылку на модель следующей вершины.",
          "name": "setNextVertex"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "prevVertex",
              "type": "geometryEditor.model.ChildVertex|null",
              "description": "Модель предыдущей вершины."
            }
          ],
          "desciption": "Устанавливает ссылку на модель предыдущей вершины.",
          "name": "setPrevVertex"
        }
      ]
    }
  },
  {
    "name": "geometryEditor.model.EdgeGeometry",
    "url": "geometryEditor.model.EdgeGeometry",
    "def": {
      "name": "geometryEditor.model.EdgeGeometry",
      "description": "Примечание.&nbsp;Конструктор класса geometryEditor.model.EdgeGeometry скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nРасширяет\n            IGeometry.\n\nГеометрия промежуточной метки. Конструктор недоступен в package.full (стандартный набор модулей).\nДанный модуль загружается по требованию.\n\nПоля  | События  | Методы \n\n\n\n    \n       \n            \n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n        \n        \n\n    ",
      "hasCtor": false,
      "inherits": [
        "IGeometry"
      ]
    }
  },
  {
    "name": "geometryEditor.model.RootLineString",
    "url": "geometryEditor.model.RootLineString",
    "def": {
      "name": "geometryEditor.model.RootLineString",
      "description": "Примечание.&nbsp;Конструктор класса geometryEditor.model.RootLineString скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nРасширяет\n            IGeometryEditorRootModel.\n\nМодель корневой ломаной линии. Конструктор недоступен в package.full (стандартный набор модулей).\nДанный модуль загружается по требованию.\n\nПоля  | Методы \n\n\n\n    \n       \n            \n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n        \n        \n\n    ",
      "hasCtor": false,
      "inherits": [
        "IGeometryEditorRootModel"
      ],
      "methods": [
        {
          "return": "Integer",
          "desciption": "Возвращает суммарное количество вершин редактируемой геометрии.",
          "name": "getAllVerticesNumber"
        },
        {
          "return": "geometryEditor.model.ChildVertex[]",
          "desciption": "Возвращает массив моделей дочерних вершин.",
          "name": "getVertexModels"
        },
        {
          "return": "Number[][]",
          "params": [
            {
              "isRequired": true,
              "param": "start",
              "type": "Integer",
              "description": "Индекс, начиная с которого производится удаление и добавление вершин."
            },
            {
              "isRequired": true,
              "param": "deleteCount",
              "type": "Integer",
              "description": "Количество удаляемых вершин."
            }
          ],
          "desciption": "Удаляет определенное число вершин ломаной начиная с заданного индекса.\nПри этом на место удаляемых вершин могут быть добавлены новые.\nКоординаты новых вершин в глобальных пикселях можно передавать дополнительными аргументами после\nпараметра deleteCount.\n\nВозвращает массив координат удаленных вершин.",
          "name": "spliceVertices"
        }
      ]
    }
  },
  {
    "name": "geometryEditor.model.RootPolygon",
    "url": "geometryEditor.model.RootPolygon",
    "def": {
      "name": "geometryEditor.model.RootPolygon",
      "description": "Примечание.&nbsp;Конструктор класса geometryEditor.model.RootPolygon скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nРасширяет\n            IGeometryEditorRootModel.\n\nМодель корневого полигона. Конструктор недоступен в package.full (стандартный набор модулей).\nДанный модуль загружается по требованию.\n\nПоля  | Методы \n\n\n\n    \n       \n            \n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n        \n        \n\n    ",
      "hasCtor": false,
      "inherits": [
        "IGeometryEditorRootModel"
      ],
      "methods": [
        {
          "return": "Integer",
          "desciption": "Возвращает суммарное количество вершин редактируемой геометрии.",
          "name": "getAllVerticesNumber"
        },
        {
          "return": "geometryEditor.model.ChildLinearRing[]",
          "desciption": "Возвращает массив моделей дочерних контуров.",
          "name": "getPathModels"
        },
        {
          "return": "Number[][]",
          "params": [
            {
              "isRequired": true,
              "param": "start",
              "type": "Integer",
              "description": "Индекс, начиная с которого производится удаление и добавление контуров."
            },
            {
              "isRequired": true,
              "param": "deleteCount",
              "type": "Integer",
              "description": "Количество удаляемых контуров."
            }
          ],
          "desciption": "Удаляет определенное число контуров многоугольника начиная с заданного индекса.\nПри этом на место удаляемых контуров могут быть добавлены новые.\nКоординаты новых контуров в глобальных пикселях можно передавать дополнительными аргументами после\nпараметра deleteCount.\n\nВозвращает массив координат удаленных контуров.",
          "name": "splicePaths"
        }
      ]
    }
  },
  {
    "name": "geometryEditor.Point",
    "url": "geometryEditor.Point",
    "def": {
      "name": "geometryEditor.Point",
      "description": "Расширяет\n            IGeometryEditor.\n\nРедактор геометрии \"Точка\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "geometry",
          "type": "IPointGeometry",
          "description": "Геометрия \"Точка\"."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции редактора геометрии. Через опции редактора геометрии можно задавать как опции самого\nредактора, так и опции его составных частей:\n\n    опции направляющих линий с префиксом guideLines.\n"
        }
      ],
      "inherits": [
        "IGeometryEditor"
      ],
      "methods": [
        {
          "return": "vow.Promise",
          "desciption": "Включает режим рисования точки.\n\nВозвращает объект-обещание.",
          "name": "startDrawing"
        },
        {
          "return": "vow.Promise",
          "desciption": "Отключает режим рисования точки.\n\nВозвращает объект-обещание.",
          "name": "stopDrawing"
        }
      ],
      "props": [
        {
          "type": "IDataManager",
          "description": "Менеджер состояния редактора геометрии.\n\n\nПоля данных, доступные посредством методов get и set:",
          "name": "state"
        }
      ]
    }
  },
  {
    "name": "geometryEditor.view.Edge",
    "url": "geometryEditor.view.Edge",
    "def": {
      "name": "geometryEditor.view.Edge",
      "description": "Примечание.&nbsp;Конструктор класса geometryEditor.view.Edge скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nОтображение промежуточной метки. Конструктор недоступен в package.full (стандартный набор модулей).\nДанный модуль загружается по требованию.\n\nМетоды \n\n\n\n    \n       \n            \n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n        \n        \n\n    ",
      "hasCtor": false,
      "methods": [
        {
          "return": "GeoObject",
          "desciption": "Возвращает ссылку на геообъект промежуточной метки.\nВ данных метки, под именем \"model\", доступна ссылка на модель данных промежуточной метки.\n\nВозвращает геообъект промежуточной метки.",
          "name": "getPlacemark"
        }
      ]
    }
  },
  {
    "name": "geometryEditor.view.Path",
    "url": "geometryEditor.view.Path",
    "def": {
      "name": "geometryEditor.view.Path",
      "description": "Примечание.&nbsp;Конструктор класса geometryEditor.view.Path скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nОтображение контура. Конструктор недоступен в package.full (стандартный набор модулей).\nДанный модуль загружается по требованию.\n\nМетоды \n\n\n\n    \n       \n            \n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n        \n        \n\n    ",
      "hasCtor": false,
      "methods": [
        {
          "return": "GeoObjectCollection",
          "desciption": "Возвращает коллекцию промежуточных меток, входящих в контур.",
          "name": "getEdgePlacemarks"
        },
        {
          "return": "geometryEditor.view.Edge[]",
          "desciption": "Возвращает массив отображений промежуточных меток.",
          "name": "getEdgeViews"
        },
        {
          "return": "GeoObjectCollection",
          "desciption": "Возвращает коллекцию меток вершин, входящих в контур.",
          "name": "getVertexPlacemarks"
        },
        {
          "return": "geometryEditor.view.Vertex[]",
          "desciption": "Возвращает массив отображений дочерних вершин.",
          "name": "getVertexViews"
        }
      ]
    }
  },
  {
    "name": "geometryEditor.view.Vertex",
    "url": "geometryEditor.view.Vertex",
    "def": {
      "name": "geometryEditor.view.Vertex",
      "description": "Примечание.&nbsp;Конструктор класса geometryEditor.view.Vertex скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nОтображение вершины. Конструктор недоступен в package.full (стандартный набор модулей).\nДанный модуль загружается по требованию.\n\nМетоды \n\n\n\n    \n       \n            \n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n        \n        \n\n    ",
      "hasCtor": false,
      "methods": [
        {
          "return": "GeoObject",
          "desciption": "Возвращает ссылку на геообъект метки, обозначающей вершину.\nВ данных метки, под именем \"model\", доступна ссылка на модель данных вершины.\n\nВозвращает геообъект метки, обозначающей вершину.",
          "name": "getPlacemark"
        }
      ]
    }
  },
  {
    "name": "geoObject.addon.balloon",
    "url": "geoObject.addon.balloon",
    "def": {
      "name": "geoObject.addon.balloon",
      "description": "Примечание.&nbsp;Конструктор класса geoObject.addon.balloon скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nСтатический объект.\n\nМодуль, который предоставляет возможность использовать балун у геообъекта.\nДобавляет геообъекту (GeoObject) интерфейс IBalloonOwner.\nПри подключении package.full (стандартный набор модулей) доступен по умолчанию.\nЕсли GeoObject подключается отдельно, то необходимо явно указать этот модуль в загрузчике.\nЕсли geoObject.addon.balloon подключается отдельно после создания GeoObject,\nто интерфейс IBalloonOwner не будет добавлен. Тогда для инициализации менеджера балуна\nнужно будет использовать метод geoObject.addon.balloon#get.\n\nМетоды \n\nВнимание!&nbsp;Не рекомендуется создавать экземпляры данного класса самостоятельно.",
      "hasCtor": false,
      "methods": [
        {
          "return": "IPopupManager",
          "params": [
            {
              "isRequired": true,
              "param": "geoObject",
              "type": "IGeoObject",
              "description": "Геообъект"
            }
          ],
          "desciption": "Возвращает менеджер балуна геообъекта.",
          "name": "get"
        }
      ]
    }
  },
  {
    "name": "geometryEditor.Polygon",
    "url": "geometryEditor.Polygon",
    "def": {
      "name": "geometryEditor.Polygon",
      "description": "Расширяет\n            IGeometryEditor.\n\nРедактор геометрии \"Многоугольник\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "geometry",
          "type": "IPolygonGeometry",
          "description": "Геометрия \"Многоугольник\"."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции редактора геометрии. Через опции редактора геометрии можно задавать как опции самого\nредактора, так и опции его составных частей:\n\n    опции направляющих линий с префиксом guideLines.\n"
        }
      ],
      "inherits": [
        "IGeometryEditor"
      ],
      "methods": [
        {
          "return": "vow.Promise",
          "desciption": "Возвращает объект-обещание, который подтверждается объектом модели в момент\nее фактического создания, либо отклоняется с одним из следующих кодов ошибки:\n\n    Canceled - режим редактирования отключен до момента фактического создания\n    модели;\n    Editor wasn't started - режим редактирования не включен.\n",
          "name": "getModel"
        },
        {
          "return": "geometryEditor.model.RootPolygon|null",
          "desciption": "Возвращает модель редактора или null, если на\nмомент вызова она отсутствует.",
          "name": "getModelSync"
        },
        {
          "return": "vow.Promise",
          "desciption": "Возвращает объект-обещание, который подтверждается объектом отображения в\nмомент его фактического создания, либо отклоняется с одним из следующих кодов ошибки:\n\n    Canceled - режим редактирования отключен до момента фактического создания\n    отображения;\n    Editor wasn't started - режим редактирования не включен.\n",
          "name": "getView"
        },
        {
          "return": "geometryEditor.view.MultiPath|null",
          "desciption": "Возвращает отображение редактора или null, если на\nмомент вызова оно отсутствует.",
          "name": "getViewSync"
        },
        {
          "return": "vow.Promise",
          "desciption": "Включает режим добавления новых вершин в многоугольник. Включение происходит асинхронно.\n\nВозвращает объект-обещание, который подтверждается в момент фактического\nстарта режима добавления новых вершин, либо отклоняется с одним из следующих кодов\nошибки:\n\n    Canceled - режим добавления новых вершин отключен до момента его фактического\n    старта.\n",
          "name": "startDrawing"
        },
        {
          "return": "vow.Promise",
          "desciption": "Включает режим добавления новых вершин в многоугольник. Включение происходит асинхронно.\n\nВозвращает объект-обещание, который подтверждается в момент фактического\nстарта режима редактирования, либо отклоняется с одним из следующих кодов ошибки:\n\n    Canceled - режим редактирования отключен до момента его фактического старта.\n",
          "name": "startEditing"
        },
        {
          "return": "vow.Promise",
          "desciption": "Включает режим масштабирования для многоугольника. Включение происходит асинхронно.\n\nВозвращает объект-обещание, который подтверждается в момент фактического\nстарта режима масштабирования.",
          "name": "startFraming"
        },
        {
          "desciption": "Отключает режим добавления новых вершин в многоугольник.",
          "name": "stopDrawing"
        },
        {
          "desciption": "Отключает режим добавления новых вершин в многоугольник.",
          "name": "stopEditing"
        },
        {
          "desciption": "Отключает режим масштабирования.",
          "name": "stopFraming"
        }
      ],
      "props": [
        {
          "type": "IDataManager",
          "description": "Менеджер состояния редактора геометрии.\n\n\nПоля данных, доступные посредством методов get и set:",
          "name": "state"
        }
      ]
    }
  },
  {
    "name": "geometryEditor.view.MultiPath",
    "url": "geometryEditor.view.MultiPath",
    "def": {
      "name": "geometryEditor.view.MultiPath",
      "description": "Примечание.&nbsp;Конструктор класса geometryEditor.view.MultiPath скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nОтображение множества контуров. Конструктор недоступен в package.full (стандартный набор модулей).\nДанный модуль загружается по требованию.\n\nМетоды \n\n\n\n    \n       \n            \n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n        \n        \n\n    ",
      "hasCtor": false,
      "methods": [
        {
          "return": "GeoObjectCollection",
          "desciption": "Возвращает коллекцию промежуточных меток дочерних отображений контуров.",
          "name": "getEdgePlacemarks"
        },
        {
          "return": "geometryEditor.view.Path[]",
          "desciption": "Возвращает массив отображений дочерних контуров.",
          "name": "getPathViews"
        },
        {
          "return": "GeoObjectCollection",
          "desciption": "Возвращает коллекцию меток вершин дочерних отображений контуров.",
          "name": "getVertexPlacemarks"
        }
      ]
    }
  },
  {
    "name": "geometry.Rectangle",
    "url": "geometry.Rectangle",
    "def": {
      "name": "geometry.Rectangle",
      "description": "Расширяет\n            IRectangleGeometry.\n\nГеометрия \"Прямоугольник\".\n\nСм.: Rectangle \n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "coordinates",
          "type": "Number[][]|null",
          "description": "Массив, содержащий координаты двух противоположных углов прямоугольника."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции геометрии."
        }
      ],
      "inherits": [
        "IRectangleGeometry"
      ]
    }
  },
  {
    "name": "geoObject.addon.hint",
    "url": "geoObject.addon.hint",
    "def": {
      "name": "geoObject.addon.hint",
      "description": "Примечание.&nbsp;Конструктор класса geoObject.addon.hint скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nСтатический объект.\n\nМодуль, который предоставляет возможность использовать хинт у геообъекта.\nДобавляет геообъекту (GeoObject) интерфейс IHintOwner.\nПри подключении package.full (стандартный набор модулей) доступен по умолчанию.\nЕсли GeoObject подключается отдельно, то необходимо явно указать этот модуль в загрузчике.\nЕсли geoObject.addon.hint подключается отдельно после создания GeoObject,\nто интерфейс IHintOwner не будет добавлен. Тогда для инициализации менеджера балуна\nнужно будет использовать метод geoObject.addon.hint#get.\n\nМетоды \n\nВнимание!&nbsp;Не рекомендуется создавать экземпляры данного класса самостоятельно.",
      "hasCtor": false,
      "methods": [
        {
          "return": "IPopupManager",
          "params": [
            {
              "isRequired": true,
              "param": "geoObject",
              "type": "IGeoObject",
              "description": "Геообъект"
            }
          ],
          "desciption": "Возвращает менеджер хинта геообъекта.",
          "name": "get"
        }
      ]
    }
  },
  {
    "name": "geoObject.Balloon",
    "url": "geoObject.Balloon",
    "def": {
      "name": "geoObject.Balloon",
      "description": "Расширяет\n            IBalloonManager.\n\nМенеджер балуна геообъекта. Позволяет управлять балуном геообъекта, открывать и скрывать его.\nПередает балуну данные в формате IGeoObjectPopupData.\nИспользует внутри себя менеджер балуна карты map.Balloon.\nГеообъекты содержат экземпляр этого класса, доступный как myGeoObject.balloon.\nНе создавайте экземпляры этого класса без необходимости.\n\nСм.: Balloon GeoObject.balloon \n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "geoObject",
          "type": "Object",
          "description": "Геообъект."
        }
      ],
      "inherits": [
        "IBalloonManager"
      ],
      "methods": [
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": false,
              "param": "position",
              "type": "Number[]",
              "description": "Координаты открытия. По умолчанию: точка на геообъекте, ближайшая к текущему центру карты.\nПроекцию координат можно указать в опциях, иначе используется проекция геообъекта."
            },
            {
              "isRequired": false,
              "param": "data",
              "type": "Object",
              "description": "Данные, добавляемые в поле userData объекта данных, передаваемых балуну."
            },
            {
              "isRequired": false,
              "param": "options",
              "type": "Object",
              "description": "Опции."
            }
          ],
          "desciption": "Открывает балун геообъекта.\n\nВозвращает объект-promise.",
          "name": "open"
        },
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": false,
              "param": "data",
              "type": "Object",
              "description": "Данные, добавляемые в поле userData объекта данных, передаваемых балуну."
            }
          ],
          "desciption": "Устанавливает новые пользовательские данные.\n\nВозвращает объект-promise.",
          "name": "setData"
        }
      ]
    }
  },
  {
    "name": "geoObject.Sequence",
    "url": "geoObject.Sequence",
    "def": {
      "name": "geoObject.Sequence",
      "description": "Расширяет\n            IGeoObject, IGeoObjectSequence.\n\nНеизменяемая коллекция геообъектов. Позволяет группировать геообъекты для добавления на карту,\nзадания опций и т.д. Коллекция также является геообъектом.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "feature",
          "type": "Object",
          "description": "Описание коллекции. Функционально соответствует описанию\nгеообъекта. Смотрите GeoObject."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции коллекции. Здесь можно задавать все опции описанные в классе\nGeoObject. Значения опций будут применяться как к самой коллекции, так и к ее\nдочерним объектам, если для них данные опции не определены."
        }
      ],
      "inherits": [
        "IGeoObject",
        "IGeoObjectSequence"
      ]
    }
  },
  {
    "name": "GeoObject",
    "url": "GeoObject",
    "def": {
      "name": "GeoObject",
      "description": "Расширяет\n            IGeoObject.\n\nГеообъект. В зависимости от типа геометрии может отображаться как метка, линия, полигон и т.д.\nВы также можете использовать вспомогательные классы для упрощенного создания геообъектов с определенным типом геометрии.\n\nСм.: Placemark Polyline Polygon Circle Rectangle \n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "feature",
          "type": "Object",
          "description": "Описание геообъекта."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции геообъекта. Используя этот параметр можно задавать как опции самого геообъекта,\nтак и опции его составных частей:\n\n    Опции балуна геообъекта с префиксом balloon.\n    Опции всплывающей подсказки геообъекта с префиксом hint.\n    Опции редактора геометрии геообъекта с префиксом editor. Тип редактора и перечень доступных\n    опций зависит от типа геометрии геообъекта. Смотрите описание классов geometryEditor.LineString,\n    geometryEditor.Polygon, geometryEditor.Point.\n    Опции геометрии могут задаваться без префикса. Смотрите описание классов IGeometry геометрий\n    geometry.Point, geometry.Polygon и др.\n"
        }
      ],
      "inherits": [
        "IGeoObject"
      ],
      "props": [
        {
          "type": "geoObject.Balloon",
          "description": "Балун геообъекта.",
          "name": "balloon"
        },
        {
          "type": "IGeometryEditor",
          "description": "Редактор геометрии геообъекта.",
          "name": "editor"
        },
        {
          "type": "event.Manager",
          "description": "Менеджер событий.",
          "name": "events"
        },
        {
          "type": "IGeometry|null",
          "description": "Геометрия геообъекта.",
          "name": "geometry"
        },
        {
          "type": "geoObject.Hint",
          "description": "Хинт геообъекта.",
          "name": "hint"
        },
        {
          "type": "option.Manager",
          "description": "Менеджер опций геообъекта.",
          "name": "options"
        },
        {
          "type": "data.Manager",
          "description": "Менеджер данных геообъекта.",
          "name": "properties"
        },
        {
          "type": "data.Manager",
          "description": "Состояние геообъекта. Определяется следующими полями:\n\n    active: Boolean - признак того, что на геообъекте открыт балун;\n    hover: Boolean - признак того, что в данный момент на геообъект наведен указатель мыши;\n    drag: Boolean - признак того, что геообъект перетаскивается.\n",
          "name": "state"
        }
      ]
    }
  },
  {
    "name": "geoObject.addon.editor",
    "url": "geoObject.addon.editor",
    "def": {
      "name": "geoObject.addon.editor",
      "description": "Примечание.&nbsp;Конструктор класса geoObject.addon.editor скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nСтатический объект.\n\nМодуль, который предоставляет возможность использовать редактор у геообъекта.\nДобавляет поле GeoObject#editor в GeoObject.\nПри подключении package.full (стандартного набора модулей) доступен по умолчанию.\nЕсли GeoObject подключается отдельно, то необходимо явно указать этот модуль в загрузчике.\nЕсли geoObject.addon.editor подключается отдельно после создания GeoObject,\nто поле GeoObject#editor не будет добавлено. Тогда для редактора\nнужно будет использовать метод geoObject.addon.editor#get.\n\nМетоды \n\nВнимание!&nbsp;Не рекомендуется создавать экземпляры данного класса самостоятельно.",
      "hasCtor": false,
      "methods": [
        {
          "return": "IGeometryEditor",
          "params": [
            {
              "isRequired": true,
              "param": "geoObject",
              "type": "IGeoObject",
              "description": "Геообъект"
            }
          ],
          "desciption": "Возвращает редактор геообъекта.",
          "name": "get"
        }
      ]
    }
  },
  {
    "name": "geoQuery",
    "url": "geoQuery",
    "def": {
      "name": "geoQuery",
      "hasCtor": false
    }
  },
  {
    "name": "GeoObjectCollection",
    "url": "GeoObjectCollection",
    "def": {
      "name": "GeoObjectCollection",
      "description": "Расширяет\n            IGeoObject, IGeoObjectCollection.\n\nКоллекция геообъектов. Позволяет группировать геообъекты для добавления на карту,\nзадания опций и т.д. Коллекция также является геообъектом.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "feature",
          "type": "Object",
          "description": "Описание коллекции. Функционально соответствует описанию\nгеообъекта. Смотрите GeoObject."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции коллекции. Здесь можно задавать все опции описанные в классе\nGeoObject. Значения опций будут применяться как к самой коллекции, так и к ее\nдочерним объектам, если для них данные опции не определены."
        }
      ],
      "inherits": [
        "IGeoObject",
        "IGeoObjectCollection"
      ],
      "methods": [
        {
          "return": "GeoObjectCollection",
          "params": [
            {
              "isRequired": true,
              "param": "child",
              "type": "IGeoObject",
              "description": "Дочерний геообъект."
            }
          ],
          "desciption": "Добавляет геообъект в коллекцию.\n\nВозвращает ссылку на коллекцию.",
          "name": "add"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "callback",
              "type": "Function",
              "description": "Функция-обработчик."
            },
            {
              "isRequired": false,
              "param": "context",
              "type": "Object",
              "description": "Контекст выполнения функции."
            }
          ],
          "desciption": "Перебирает все элементы коллекции, вызывая для каждого функцию-обработчик.",
          "name": "each"
        },
        {
          "return": "Number[][]|null",
          "desciption": "Возвращает географические координаты области, охватывающей коллекцию и все ее дочерние геообъекты.",
          "name": "getBounds"
        },
        {
          "return": "IIterator",
          "desciption": "Возвращает итератор по коллекции.",
          "name": "getIterator"
        },
        {
          "return": "Integer",
          "desciption": "Возвращает количество геообъектов в коллекции.",
          "name": "getLength"
        },
        {
          "return": "Number[][]|null",
          "desciption": "Возвращает глобальные пиксельные координаты области, охватывающей коллекцию и все ее дочерние\nгеообъекты.",
          "name": "getPixelBounds"
        },
        {
          "return": "GeoObjectCollection",
          "params": [
            {
              "isRequired": true,
              "param": "child",
              "type": "IGeoObject",
              "description": "Дочерний геообъект."
            }
          ],
          "desciption": "Удаляет геообъект из коллекции.\n\nВозвращает ссылку на коллекцию.",
          "name": "remove"
        },
        {
          "return": "GeoObjectCollection",
          "desciption": "Удаляет из коллекции все геообъекты.\n\nВозвращает ссылку на коллекцию.",
          "name": "removeAll"
        },
        {
          "return": "GeoObjectCollection",
          "params": [
            {
              "isRequired": true,
              "param": "index",
              "type": "Integer",
              "description": "Индекс."
            },
            {
              "isRequired": true,
              "param": "child",
              "type": "IGeoObject",
              "description": "Дочерний геообъект."
            }
          ],
          "desciption": "Записывает в коллекцию новый дочерний геообъект.\n\nВозвращает ссылку на себя.",
          "name": "set"
        },
        {
          "return": "GeoObjectCollection",
          "params": [
            {
              "isRequired": true,
              "param": "index",
              "type": "Integer",
              "description": "Индекс геообъекта, с которого начинается удаление."
            },
            {
              "isRequired": true,
              "param": "number",
              "type": "Integer",
              "description": "Количество удаляемых геообъектов."
            }
          ],
          "desciption": "Удаляет геообъекты из коллекции. Если необходимо, вставляет на их место другие.\nОбъекты, которые будут вставлены вместо удаляемых, передаются как дополнительные\nпараметры (после параметра number).\n\nВозвращает коллекция удаленных геообъектов.",
          "name": "splice"
        },
        {
          "return": "IGeoObject[]",
          "desciption": "Возвращает массив, содержащий все геообъекты коллекции на момент вызова.",
          "name": "toArray"
        }
      ]
    }
  },
  {
    "name": "getZoomRange",
    "url": "getZoomRange",
    "def": {
      "name": "getZoomRange",
      "hasCtor": false
    }
  },
  {
    "name": "geoXml.load",
    "url": "geoXml.load",
    "def": {
      "name": "geoXml.load",
      "hasCtor": false
    }
  },
  {
    "name": "graphics.style.stroke",
    "url": "graphics.style.stroke",
    "def": {
      "name": "graphics.style.stroke",
      "description": "Статический объект.\n\nПозволяет изменить стиль линии.\nЗадавать значение можно как используя ключи описанные ниже, так и в формате массива.\nСледует учесть, что в режиме отображениея VML(IE&lt;9) могут быть использованны только ключи.\nТакже в стиле линии можно указать смещение начала пунктира через поле offset.\n\nПоля ",
      "hasCtor": false,
      "props": [
        {
          "type": "dash",
          "description": "Тире",
          "name": "dash"
        },
        {
          "type": "dashdot",
          "description": "Длинное тире-короткое тире",
          "name": "dashdot"
        },
        {
          "type": "dot",
          "description": "Точки",
          "name": "dot"
        },
        {
          "type": "longdash",
          "description": "Длинные тире",
          "name": "longdash"
        },
        {
          "type": "longdashdot",
          "description": "Очень длинное тире - точка",
          "name": "longdashdot"
        },
        {
          "type": "longdashdotdot",
          "description": "Длинное тире-точка-точка",
          "name": "longdashdotdot"
        },
        {
          "type": "shortdash",
          "description": "Короткие тире",
          "name": "shortdash"
        },
        {
          "type": "shortdashdot",
          "description": "Тире-точка",
          "name": "shortdashdot"
        },
        {
          "type": "shortdashdotdot",
          "description": "Тире-точка-точка",
          "name": "shortdashdotdot"
        },
        {
          "type": "shortdot",
          "description": "Точки через двойной интервал",
          "name": "shortdot"
        },
        {
          "type": "solid",
          "description": "Сплошная линия",
          "name": "solid"
        }
      ]
    }
  },
  {
    "name": "graphics.style.color",
    "url": "graphics.style.color",
    "def": {
      "name": "graphics.style.color",
      "hasCtor": false
    }
  },
  {
    "name": "GeoQueryResult",
    "url": "GeoQueryResult",
    "def": {
      "name": "GeoQueryResult",
      "description": "Расширяет\n            IPromiseProvider.\n\nРезультат геозапроса.\n\nКонструктор | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "source",
          "type": "Object",
          "description": "Источник геообъектов:\n\n    IGeoObject - объект, реализующий соответствующий интерфейс;\n    IGeoObject[] - массив объектов, реализующих соответствующий интерфейс;\n    ICollection - коллекция объектов, реализующих интерфейс IGeoObject;\n    ICollection[] - массив коллекций объектов, реализующих интерфейс IGeoObject;\n    IPromiseProvider - объект-промис, передающий в функцию-обработчик источник данных для geoQuery;\n    Также в функцию-обработчик может быть передан объект с полем geoObjects, содержащий источник данных\n    для geoQuery;\n    GeoQueryResult - объект класса GeoQueryResult;\n    String|Object - строка или объект с JSON-описанием объектов;\n    Object[] - массив с JSON-описаниями геометрий. Элемент массива представляет из себя\n    объект с полями type и coordinates. При описании круга также необходимо поле radius.\n    При описании многоугольника можно указывать необязательное поле fillRule.\n\nJSON-описание объектов строится по следующему принципу (см. пример ниже).\nОбъектом может быть сущность или коллекция сущностей.\nКоллекция сущностей представляет из себя объект с полями:\n\n    type - тип объекта. Значение поля должно быть равно \"FeatureCollection\";\n    features - массив дочерних сущностей коллекции. Дочерние объекты могут быть сущностями или\n    вложенными коллекциями сущностей.\n\nСущность представляет из себя объект с полями:\n\n    type - тип объекта. Значение поля должно быть равно \"Feature\";\n    geometry - геометрия объекта. Содержит поля type и coordinates. Соответствует параметру,\n    передаваемому в конструктор объекта ymaps.GeoObject;\n    options - опции геообъекта;\n    properties - данные геообъекта.\n"
        }
      ],
      "inherits": [
        "IPromiseProvider"
      ],
      "methods": [
        {
          "return": "GeoQueryResult",
          "params": [
            {
              "isRequired": true,
              "param": "source",
              "type": "Object",
              "description": "Источник геообъектов:\n\n    IGeoObject - объект, реализующий соответствующий интерфейс;\n    IGeoObject[] - массив объектов, реализующих соответствующий интерфейс;\n    ICollection - коллекция объектов, реализующих интерфейс IGeoObject;\n    ICollection[] - массив коллекций объектов, реализующих интерфейс IGeoObject;\n    vow.Promise - объект-промис, передающий в функцию-обработчик источник данных для geoQuery;\n    Также в функцию-обработчик может быть передан объект с полем geoObjects, содержащий источник данных\n    для geoQuery;\n    GeoQueryResult - объект класса GeoQueryResult;\n    String|Object - строка или объект с JSON-описанием объектов;\n    Object[] - массив с JSON-описаниями геометрий. Элемент массива представляет из себя\n    объект с полями type и coordinates. При описании круга также необходимо поле radius.\n    При описании многоугольника можно указывать необязательное поле fillRule.\n\nJSON-описание объектов строится по следующему принципу (см. пример ниже).\nОбъектом может быть сущность или коллекция сущностей.\nКоллекция сущностей представляет из себя объект с полями:\n\n    type - тип объекта. Значение поля должно быть равно \"FeatureCollection\";\n    features - массив дочерних сущностей коллекции. Дочерние объекты могут быть сущностями или\n    вложенными коллекциями сущностей.\n\nСущность представляет из себя объект с полями:\n\n    type - тип объекта. Значение поля должно быть равно \"Feature\";\n    geometry - геометрия объекта. Содержит поля type и coordinates. Соответствует параметру,\n    передаваемому в конструктор объекта ymaps.GeoObject;\n    options - опции геообъекта;\n    properties - данные геообъекта.\n"
            }
          ],
          "desciption": "Добавляет объекты из источника к объектам результата.\nНе изменяет исходный объект, а создает новый, содержащий объединенный набор геообъектов.\n\nВозвращает новый объект с объединенным набором геообъектов.",
          "name": "add"
        },
        {
          "return": "GeoQueryResult",
          "params": [
            {
              "isRequired": true,
              "param": "events",
              "type": "String|String[]",
              "description": "Тип или массив типов событий, на которые совершается подписка."
            },
            {
              "isRequired": true,
              "param": "callback",
              "type": "Function",
              "description": "Функция-обработчик."
            },
            {
              "isRequired": true,
              "param": "context",
              "type": "Object",
              "description": "Контекст выполнения функции-обработчика."
            }
          ],
          "desciption": "Навешивает обработчики событий на элементы выборки.\n\nВозвращает ссылку на себя.",
          "name": "addEvents"
        },
        {
          "return": "GeoQueryResult",
          "params": [
            {
              "isRequired": true,
              "param": "collection",
              "type": "ICollection",
              "description": "Коллекция, в которую добавляются объекты."
            }
          ],
          "desciption": "Метод для добавления объектов в коллекцию геообъектов.\n\nВозвращает ссылку на себя.",
          "name": "addTo"
        },
        {
          "return": "GeoQueryResult",
          "params": [
            {
              "isRequired": true,
              "param": "map",
              "type": "Map",
              "description": "Карта, на которую добавляются объекты."
            }
          ],
          "desciption": "Метод для добавления объектов на карту.\n\nВозвращает ссылку на себя.",
          "name": "addToMap"
        },
        {
          "return": "GeoQueryResult",
          "params": [
            {
              "isRequired": true,
              "param": "map",
              "type": "Map",
              "description": "Карта."
            },
            {
              "isRequired": false,
              "param": "options",
              "type": "Object",
              "description": "Опции."
            }
          ],
          "desciption": "Метод, позволяющий установить видимую область карты так,\nчтобы видны были все объекты из выборки.\n\nВозвращает ссылку на себя.",
          "name": "applyBoundsToMap"
        },
        {
          "return": "Clusterer",
          "params": [
            {
              "isRequired": false,
              "param": "options",
              "type": "Object",
              "description": "Опции, передаваемые в конструктор объекта Clusterer."
            }
          ],
          "desciption": "Метод создает кластеризатор и добавляет в него объекты из выборки.\nВ случае, если данные выборки еще не готовы, они будут добавлены в кластеризатор\nсразу после обработки, а возвращенный кластеризатор изначально будет пуст.\nВ кластеризатор будут добавлены только объекты с геометрией \"Point\".\n\nВозвращает кластеризатор.",
          "name": "clusterize"
        },
        {
          "return": "GeoQueryResult",
          "params": [
            {
              "isRequired": true,
              "param": "callback",
              "type": "Function",
              "description": "Функция-обработчик. Вызывается для каждого элемента\nвыборки и получает его на вход."
            },
            {
              "isRequired": true,
              "param": "context",
              "type": "Object",
              "description": "Контекст исполения функции-обработчика."
            }
          ],
          "desciption": "Возвращает ссылку на себя.",
          "name": "each"
        },
        {
          "return": "IGeoObject",
          "params": [
            {
              "isRequired": true,
              "param": "index",
              "type": "Number",
              "description": "Индекс элементов."
            }
          ],
          "desciption": "Метод возвращает элемент выборки по индексу.\n\nВозвращает объект.",
          "name": "get"
        },
        {
          "return": "Number[][]|null",
          "desciption": "Возвращает географические координаты области, охватывающей объекты результата.\n\nПримеры: \n\n1.\n\n2.",
          "name": "getBounds"
        },
        {
          "return": "Number[]",
          "params": [
            {
              "isRequired": true,
              "param": "map",
              "type": "Map",
              "description": "Карта, для которой нужно произвести расчеты."
            }
          ],
          "desciption": "Метод, возвращающий центр области, охватывающей объекты результата,\nв географических координатах.\n\nВозвращает координаты центра области в географических координатах.",
          "name": "getCenter"
        },
        {
          "return": "IGeoObject|null",
          "params": [
            {
              "isRequired": true,
              "param": "map",
              "type": "Map",
              "description": "Карта."
            }
          ],
          "desciption": "Метод для получения объекта, наиболее близкого к центру видимой области карты.\n\nВозвращает ссылка на геообъект или null в случае пустой выборки.",
          "name": "getCentralObject"
        },
        {
          "return": "IGeoObject|null",
          "params": [
            {
              "isRequired": true,
              "param": "object",
              "type": "Object",
              "description": "Объект, относительно которого\nбудет производится поиск. Может принимать следующие значения:\n\n    IGeoObject - объект, реализующий интефейс IGeoObject;\n    IGeometry - объект, реализующий интерфейс IGeometry;\n    Map - карта. В этом случае опорным объектом будет прямоугольная граница карты;\n    Number[] - координаты точки;\n    Object - Json-описание геометрии. Содержит поля type и coordinates.\n    При описании круга также необходимо поле radius. При описании многоугольника\n    можно указывать необязательное поле fillRule.\n"
            },
            {
              "isRequired": false,
              "param": "radius",
              "type": "Number",
              "description": "Радиус окружности в метрах."
            }
          ],
          "desciption": "Метод, возвращающий объект выборки, ближайший к указанному.\nЕсли на вход подается объект, уже находящийся в выборке, то вернется другой\nобъект выборки, ближайший к указанному.\nОбратите внимание, что многие геообъекты требуют добавления на карту для корректных расчетов.\n\nВозвращает объект выборки, ближайший к указанному или null, если объект невозможно найти.",
          "name": "getClosestTo"
        },
        {
          "return": "Number",
          "params": [
            {
              "isRequired": true,
              "param": "key",
              "type": "String",
              "description": "Ключ для получения данных. Может принимать следующие значения:\n\n    top;\n    right;\n    bottom;\n    left.\n"
            }
          ],
          "desciption": "Метод, возвращающий максимальные и минимальные значения координат\nсреди координат объектов выборки.\n\nВозвращает соответствующее значение координаты.",
          "name": "getExtreme"
        },
        {
          "return": "IGeoObject",
          "params": [
            {
              "isRequired": true,
              "param": "key",
              "type": "String",
              "description": "Ключ для поиска объекта. Может принимать следующие значения:\n\n    top;\n    right;\n    bottom;\n    left.\n"
            }
          ],
          "desciption": "Метод, возвращающий объект с минимальной или максимальной координатой\nсреди координат объектов выборки.\n\nВозвращает объект с требуемой координатой.",
          "name": "getExtremeObject"
        },
        {
          "return": "Number[][]|null",
          "params": [
            {
              "isRequired": true,
              "param": "map",
              "type": "Map",
              "description": "Карта, для которой ведутся расчеты."
            }
          ],
          "desciption": "Метод, возвращающий глобальные пиксельные координаты области для текущего зума карты.\n\nВозвращает глобальные пиксельные координаты области, охватывающей объекты результата.",
          "name": "getGlobalPixelBounds"
        },
        {
          "return": "Number[]",
          "params": [
            {
              "isRequired": true,
              "param": "map",
              "type": "Map",
              "description": "Карта, для которой нужно произвести расчеты."
            }
          ],
          "desciption": "Метод, возвращающий центр области, охватывающей объекты результата,\nв глобальных пиксельных координатах для текущего зума карты.\n\nВозвращает координаты центра области в глобальных пиксельных координатах.",
          "name": "getGlobalPixelCenter"
        },
        {
          "return": "IIterator",
          "desciption": "Возвращает итератор по объектам результата.\n\nПримеры: \n\n1.\n\n2.",
          "name": "getIterator"
        },
        {
          "return": "Number",
          "desciption": "Возвращает количество элементов в результате.\n\nПримеры: \n\n1.\n\n2.",
          "name": "getLength"
        },
        {
          "return": "Number",
          "params": [
            {
              "isRequired": true,
              "param": "map",
              "type": "Map",
              "description": "Карта, для которой ведется расчет."
            },
            {
              "isRequired": false,
              "param": "options",
              "type": "Object",
              "description": "Опции."
            }
          ],
          "desciption": "Метод, вычисляющий максимальный коэффициент масштабирования, при котором в видимую\nобласть карты попадают все объекты.\n\nВозвращает максимальный коэффициент масштабирования карты.",
          "name": "getMaxZoom"
        },
        {
          "return": "GeoQueryResult|null",
          "desciption": "Возвращает ссылку на родительскую выборку, если текущая выборка была создана\nв результате изменения другого объекта GeoQueryResult.",
          "name": "getParent"
        },
        {
          "return": "Number",
          "params": [
            {
              "isRequired": true,
              "param": "item",
              "type": "IGeoObject",
              "description": "Искомый объект."
            }
          ],
          "desciption": "Возвращает индекс элемента в выборке. Если элемент не найден, возвращается -1.",
          "name": "indexOf"
        },
        {
          "return": "GeoQueryResult",
          "params": [
            {
              "isRequired": true,
              "param": "result",
              "type": "GeoQueryResult",
              "description": "Выборка, с которой пересекают исходную."
            }
          ],
          "desciption": "Метод создает новую выборку, содержащую общие элементы\nдля двух других выборок.\n\nВозвращает новую выборку, содержащую результат пересечения.",
          "name": "intersect"
        },
        {
          "return": "Boolean",
          "desciption": "Метод, возвращающий признак готовности выборки.\n\nВозвращает признак, готовы результаты выборки или еще обрабатываются.",
          "name": "isReady"
        },
        {
          "return": "GeoQueryResult",
          "params": [
            {
              "isRequired": true,
              "param": "callback",
              "type": "Function",
              "description": "Функция-обработчик. Принимает на вход элемент\nвыборки. Возвращает экземпляр IGeoObject."
            },
            {
              "isRequired": false,
              "param": "context",
              "type": "Object",
              "description": "Контекст выполнения функции-обработчика."
            }
          ],
          "desciption": "Метод, вызывающий метод callback для всех элементов выборки\nи формирующий новую выборку на основе полученных результатов.\n\nВозвращает новую выборку.",
          "name": "map"
        },
        {
          "return": "GeoQueryResult",
          "params": [
            {
              "isRequired": true,
              "param": "objects",
              "type": "Object",
              "description": "Объекты могут быть представлены в разном виде:\n\n    IGeoObject - объект, реализующий соответствующий интерфейс;\n    IGeoObject[] - массив объектов, реализующих соответствующий интерфейс;\n    ICollection - коллекция объектов, реализующих интерфейс IGeoObject;\n    ICollection[] - массив коллекций объектов, реализующих интерфейс IGeoObject;\n    GeoQueryResult - объект класса GeoQueryResult. Обратите внимание, что при асинхронных\n    операциях нужно дождаться готовности результата для его корректного удаления;\n    vow.Promise - объект класса vow.Deferred. Должен быть зарезовлен массивом геообъектов или\n    объектом с полем geoObjects.\n"
            }
          ],
          "desciption": "Удаляет объекты из результата.\nНе изменяет исходный объект, а создает новый, содержащий результирующий набор геообъектов.\n\nВозвращает новый объект с результирующим набором геообъектов.",
          "name": "remove"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "events",
              "type": "String|String[]",
              "description": "Тип или массив типов событий, на которые была сделана подписка."
            },
            {
              "isRequired": true,
              "param": "callback",
              "type": "Function",
              "description": "Функция-обработчик, которую указали при подписке."
            },
            {
              "isRequired": true,
              "param": "context",
              "type": "Object",
              "description": "Контекст, который был указан при подписке."
            }
          ],
          "desciption": "Удаляет подписку на событие с объекта. Обратите внимание, что для корректной отписки\nпередаваемые аргументы должны быть точно такие же, как при подписке через метод addEvents.",
          "name": "removeEvents"
        },
        {
          "return": "GeoQueryResult",
          "params": [
            {
              "isRequired": true,
              "param": "collection",
              "type": "ICollection",
              "description": "Коллекция, из которой нужно удалить объекты."
            }
          ],
          "desciption": "Метод для удаления объектов из коллекции.\n\nВозвращает ссылку на себя.",
          "name": "removeFrom"
        },
        {
          "return": "GeoQueryResult",
          "params": [
            {
              "isRequired": true,
              "param": "map",
              "type": "Map",
              "description": "Карта, с которой нужно удалить объекты."
            }
          ],
          "desciption": "Метод для удаления объектов с карты.\n\nВозвращает ссылку на себя.",
          "name": "removeFromMap"
        },
        {
          "return": "GeoQueryResult",
          "desciption": "Переставляет элементы выборки в обратном порядке и возвращает новую выборку.\n\nВозвращает новую выборку с элементами в обратном порядке.\n\nПримеры: \n\n1.\n\n2.",
          "name": "reverse"
        },
        {
          "return": "GeoQueryResult",
          "params": [
            {
              "isRequired": true,
              "param": "condition",
              "type": "String|Function",
              "description": "Строковый шаблон для поиска или функция-фильтр.\nСтроковый шаблон имеет структуру \"&lt;fieldname&gt; &lt;condition&gt; &lt;expression&gt;\".\nВозможные значения &lt;fieldname&gt;:\n\n    'lat' - широта. Поддерживается только для точечных объектов;\n    'lng', 'long' - долгота. Поддерживается только для точечных объектов;\n    'x' - глобальные пиксельные координаты по оси x. Поддерживается только для точечных объектов;\n    'y' - глобальные пиксельные координаты по оси y. Поддерживается только для точечных объектов;\n    'geometry.type' - тип геометрии, результат выполнения метода geometry.getType();\n    'geometry.coordinates.&lt;index&gt;' - координаты, результат выполнения метода geometry.getCoordinates().\n    Для получения доступа к координате следует указывать ее индексы через точку - 'geometry.coordinates.0.1';\n    'properties.&lt;path&gt;' - значение поля данных;\n    'options.&lt;key&gt;' - значение опции.\n\nВозможные значения &lt;condition&gt;:\n\n    '&gt;';\n    '&gt;=';\n    '==', '=';\n    '!=';\n    '&lt;=';\n    '&lt;';\n    'rlike', 'regexp' - соответствие значения &lt;fieldname&gt; некоторому регулярному выражению.\n\nВозможные значения &lt;expression&gt;:\n\n    Число;\n    Строка - обязательно указывается в кавычках;\n    true;\n    false;\n    null;\n    undefined.\n\nФункция-фильтр принимает на вход объект из выборки и возвращает true/false.\nTrue - объект попадет в результирующую выборку, false - не попадет."
            }
          ],
          "desciption": "Метод для поиска объектов выбоки, удовлетворяющих условиям.\n\nВозвращает новую выборку, содержащую результаты поиска.",
          "name": "search"
        },
        {
          "return": "GeoQueryResult",
          "params": [
            {
              "isRequired": true,
              "param": "object",
              "type": "Object",
              "description": "Объект, относительно которого\nбудет производится поиск. Может принимать следующие значения:\n\n    IGeoObject - объект, реализующий интефейс IGeoObject;\n    IGeometry - объект, реализующий интерфейс IGeometry;\n    Map - карта. В этом случае опорным объектом будет прямоугольная граница карты;\n    Number[] - координаты точки. Если передан один параметр, трактуется как точка.\n    Если передано два аргумента, трактуется как центр окружности;\n    Number[][] - координаты прямоугольной области;\n    Object - Json-описания геометрии.\n"
            }
          ],
          "desciption": "Метод, создающий новую выборку из объектов, содержащих указанный объект.\nОбратите внимание, что многие геообъекты требуют добавления на карту для корректных расчетов.\n\nВозвращает новую выборку, содержащую искомые объекты.",
          "name": "searchContaining"
        },
        {
          "return": "GeoQueryResult",
          "params": [
            {
              "isRequired": true,
              "param": "object",
              "type": "Object",
              "description": "Объект, относительно которого\nбудет производится поиск. Может принимать следующие значения:\n\n    IGeoObject - объект, реализующий интефейс IGeoObject;\n    IGeometry - объект, реализующий интерфейс IGeometry;\n    Map - карта. В этом случае опорным объектом будет прямоугольная граница карты.\n"
            }
          ],
          "desciption": "Метод, создающий новую выборку из объектов, целиком входящих в указанный объект.\nОбратите внимание, что многие геообъекты требуют добавления на карту для корректных расчетов.\n\nВозвращает новую выборку, содержащую искомые объекты.",
          "name": "searchInside"
        },
        {
          "return": "GeoQueryResult",
          "params": [
            {
              "isRequired": true,
              "param": "object",
              "type": "Object",
              "description": "Объект, относительно которого\nбудет производится поиск. Может принимать следующие значения:\n\n    IGeoObject - объект, реализующий интефейс IGeoObject;\n    IGeometry - объект, реализующий интерфейс IGeometry;\n    Map - карта. В этом случае опорным объектом будет прямоугольная граница карты.\n"
            },
            {
              "isRequired": false,
              "param": "options",
              "type": "Object",
              "description": "Опции."
            }
          ],
          "desciption": "Метод, создающий новую выборку из объектов, пересекающих указанный объект.\nОбратите внимание, что многие геообъекты требуют добавления на карту для корректных расчетов.\n\nВозвращает новую выборку, содержащую искомые объекты.",
          "name": "searchIntersect"
        },
        {
          "return": "GeoQueryResult",
          "params": [
            {
              "isRequired": true,
              "param": "key",
              "type": "String|Object",
              "description": "Название опции или хэш с опциями и их значениями."
            },
            {
              "isRequired": false,
              "param": "value",
              "type": "Object",
              "description": "Значение опции."
            }
          ],
          "desciption": "Метод, позволяющий задать значение опций всем элементам выборки.\n\nВозвращает ссылку на себя.",
          "name": "setOptions"
        },
        {
          "return": "GeoQueryResult",
          "params": [
            {
              "isRequired": true,
              "param": "path",
              "type": "String",
              "description": "Имя поля, которому присваивается значение. Может содержать \".\"."
            },
            {
              "isRequired": true,
              "param": "value",
              "type": "Object",
              "description": "Значение поля."
            }
          ],
          "desciption": "Метод, позволяющий задать значение поля properties всем элементам выборки.\n\nВозвращает ссылку на себя.",
          "name": "setProperties"
        },
        {
          "return": "GeoQueryResult",
          "params": [
            {
              "isRequired": true,
              "param": "begin",
              "type": "Number",
              "description": "Индекс начального элемента в срезе."
            },
            {
              "isRequired": false,
              "param": "end",
              "type": "Number",
              "description": "Индекс элемента в выборке, на котором срез завершится.\nПри этом последним в новом срезе будет элемент с индексом end-1."
            }
          ],
          "desciption": "Метод, возвращающий срез выборки.\n\nВозвращает новую выборку, содержающую элементы среза.",
          "name": "slice"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "comparator",
              "type": "String|Function",
              "description": "Строка с шаблоном сортировки или функция-компаратор.\nСтрока-шаблон может быть представлена в виде '&lt;fieldname&gt; [&lt;order&gt;=asc]'.\nВозможные значения &lt;fieldname&gt;:\n\n    'lat' - широта. Поддерживается только для точечных объектов;\n    'lng', 'long' - долгота. Поддерживается только для точечных объектов;\n    'x' - глобальные пиксельные координаты по оси x. Поддерживается только для точечных объектов;\n    'y' - глобальные пиксельные координаты по оси y. Поддерживается только для точечных объектов;\n    'geometry.type' - тип геометрии, результат выполнения метода geometry.getType();\n    'geometry.coordinates.&lt;index&gt;' - координаты, результат выполнения метода geometry.getCoordinates().\n    Для получения доступа к координате следует указывать ее индексы через точку - 'geometry.coordinates.0.1';\n    'properties.&lt;path&gt;' - значение поля данных;\n    'options.&lt;key&gt;' - значение опции.\n\nВозможные значения необязательного параметра &lt;order&gt;:\n\n    'asc' - сортировка по возрастанию;\n    'desc' - сортировка по убыванию.\n\nФункция-компаратор принимает на вход два элемента выборки.\nВозвращаемые значения:\nЕсли первый объект больше второго, функция возвращает значение &gt; 0;\nЕсли первый объект равен второму, функция возвращает 0;\nЕсли первый объект меньше второго, функция возвращает &lt; 0."
            }
          ],
          "desciption": "Метод для сортировки объектов выборки.\nНе изменяет исходную выборку, а создает новую, содержащую упорядоченные\nобъекты.",
          "name": "sort"
        },
        {
          "return": "GeoQueryResult",
          "params": [
            {
              "isRequired": true,
              "param": "object",
              "type": "Object",
              "description": "Объект, до которого будет считаться расстояние.\nМожет принимать следующие значения:\n\n    IGeoObject - объект, реализующий интефейс IGeoObject;\n    IGeometry - объект, реализующий интерфейс IGeometry;\n    Map - карта. В этом случае опорным объектом будет прямоугольная граница карты;\n    Number[] - координаты точки;\n    Number[][] - координаты прямоугольной области;\n    Object - Json-описание геометрии. Содержит поля type и coordinates.\n    При описании круга также необходимо поле radius. При описании многоугольника\n    можно указывать необязательное поле fillRule.\n"
            },
            {
              "isRequired": true,
              "param": "raduis",
              "type": ""
            }
          ],
          "desciption": "Метод, позволяющий получить выборку, содержащую объекты, отсортированные по\nрасстоянию до указанного объекта.\nОбратите внимание, что многие геообъекты требуют добавления на карту для корректных расчетов.\nНе изменяет исходную выборку.\n\nВозвращает новую упорядоченную выборку.",
          "name": "sortByDistance"
        },
        {
          "return": "GeoQueryResult",
          "params": [
            {
              "isRequired": false,
              "param": "onFulfill",
              "type": "Function",
              "description": "Функция-обработчик, которая вызывается, если обещание выполнено."
            },
            {
              "isRequired": false,
              "param": "onReject",
              "type": "Function",
              "description": "Функция-обработчик, которая вызывается,\nесли обещание не выполнено (произошла ошибка)."
            },
            {
              "isRequired": true,
              "param": "context",
              "type": "Object",
              "description": "Контекст функций-обработчиков."
            }
          ],
          "desciption": "Подписка на \"обещание\".\n\nВозвращает ссылку на себя.",
          "name": "then"
        },
        {
          "return": "GeoQueryResult",
          "params": [
            {
              "isRequired": true,
              "param": "keys",
              "type": "String|String",
              "description": "Название или массив названий опций,\nкоторые должны быть аннулированы."
            }
          ],
          "desciption": "Метод, позволяющий обнулять значение опций всем элементам выборки.\n\nВозвращает ссылку на себя.",
          "name": "unsetOptions"
        },
        {
          "return": "GeoQueryResult",
          "params": [
            {
              "isRequired": true,
              "param": "path",
              "type": "String",
              "description": "Имя поля, значение которого нужно обнулить. Может содержать \".\"."
            }
          ],
          "desciption": "Метод позволяющий обнулить значение поля properties у всех элементов выборки.\n\nВозвращает ссылку на себя.",
          "name": "unsetProperties"
        }
      ]
    }
  },
  {
    "name": "geoObject.Hint",
    "url": "geoObject.Hint",
    "def": {
      "name": "geoObject.Hint",
      "description": "Расширяет\n            IHintManager.\n\nМенеджер хинта геообъекта. Позволяет управлять хинтом геообъекта, открывать и скрывать его.\nПередает хинту данные в формате IGeoObjectPopupData.\nИспользует внутри себя менеджер хинтов карты map.Hint.\nГеообъекты содержат экземпляр этого класса, доступный как myGeoObject.hint.\nНе создавайте экземпляры этого класса без необходимости.\n\nСм.: Hint GeoObject.hint \n\nКонструктор | Поля  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "geoObject",
          "type": "Object",
          "description": "Геообъект."
        }
      ],
      "inherits": [
        "IHintManager"
      ],
      "methods": [
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": false,
              "param": "position",
              "type": "Number[]",
              "description": "Координаты открытия. По умолчанию: геометрический центр тяжести геообъекта.\nПроекцию координат можно указать в опциях, иначе используется проекция геообъекта."
            },
            {
              "isRequired": false,
              "param": "data",
              "type": "Object",
              "description": "Данные, добавляемые в поле userData объекта данных, передаваемых хинту."
            },
            {
              "isRequired": false,
              "param": "options",
              "type": "Object",
              "description": "Опции."
            }
          ],
          "desciption": "Открывает хинт геообъекта.\n\nВозвращает объект-promise.",
          "name": "open"
        },
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": false,
              "param": "data",
              "type": "Object",
              "description": "Данные, добавляемые в поле userData объекта данных, передаваемых хинту."
            }
          ],
          "desciption": "Устанавливает новые пользовательские данные.\n\nВозвращает объект-promise.",
          "name": "setData"
        }
      ]
    }
  },
  {
    "name": "Hotspot",
    "url": "Hotspot",
    "def": {
      "name": "Hotspot",
      "description": "Расширяет\n            IHotspot.\n\nАктивная область.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "shape",
          "type": "IShape",
          "description": "Фигура активной области."
        },
        {
          "isRequired": false,
          "param": "zIndex",
          "type": "Number",
          "description": "zIndex активной области."
        }
      ],
      "inherits": [
        "IHotspot"
      ]
    }
  },
  {
    "name": "hotspot.layer.Balloon",
    "url": "hotspot.layer.Balloon",
    "def": {
      "name": "hotspot.layer.Balloon",
      "description": "Расширяет\n            IBalloonManager.\n\nМенеджер балуна хотспотного слоя. Позволяет управлять балуном хотспотного слоя, открывать и скрывать его.\nИспользует внутри себя менеджер балуна карты map.Balloon.\nХотспотные слои содержат экземпляр этого класса, доступный как myHotspotLayer.balloon.\nНе создавайте экземпляры этого класса без необходимости.\n\nСм.: Balloon hotspot.Layer.balloon \n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "hotspotLayer",
          "type": "Object",
          "description": "Хотспотный слой."
        }
      ],
      "inherits": [
        "IBalloonManager"
      ],
      "methods": [
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": false,
              "param": "position",
              "type": "Number[]",
              "description": "Координаты открытия в глобальных пиксельных координатах."
            },
            {
              "isRequired": false,
              "param": "data",
              "type": "Object",
              "description": "Данные."
            },
            {
              "isRequired": false,
              "param": "options",
              "type": "Object",
              "description": "Опции."
            }
          ],
          "desciption": "Открывает балун в указанной позиции.\n\nВозвращает объект-promise.",
          "name": "open"
        }
      ]
    }
  },
  {
    "name": "Hint",
    "url": "Hint",
    "def": {
      "name": "Hint",
      "description": "Расширяет\n            IHint, Popup.\n\nХинт - всплывающая подсказка, которая может отображать любое HTML-содержимое.\nОбычно хинт существует на карте в единственном экземпляре, управление им происходит через специальные менеджеры\n(карты,\nгеообъектов,\nслоёв активных областей и т.д.).\nНе создавайте их самостоятельно, если в этом нет необходимости.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "map",
          "type": "Map",
          "description": "Ссылка на объект карты."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции."
        }
      ],
      "inherits": [
        "IHint",
        "Popup"
      ]
    }
  },
  {
    "name": "hotspot.layer.Object",
    "url": "hotspot.layer.Object",
    "def": {
      "name": "hotspot.layer.Object",
      "description": "Расширяет\n            IHotspotLayerObject.\n\nОбъект хотспотного слоя.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "shape",
          "type": "IShape",
          "description": "Фигура активной области."
        },
        {
          "isRequired": true,
          "param": "feature",
          "type": "Object",
          "description": "Описание объекта {@see GeoObject}."
        },
        {
          "isRequired": true,
          "param": "options",
          "type": "Object",
          "description": "Опции объекта."
        }
      ],
      "inherits": [
        "IHotspotLayerObject"
      ]
    }
  },
  {
    "name": "hotspot.ObjectSource",
    "url": "hotspot.ObjectSource",
    "def": {
      "name": "hotspot.ObjectSource",
      "description": "Расширяет\n            IHotspotObjectSource.\n\nСтандартная реализация интерфейса IHotspotObjectSource.\nРаботает со стандартным форматом ответа сервера.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "tileUrlTemplate",
          "type": "String|Function",
          "description": "Шаблон URL данных, соответствующих тайлу. Поддерживаются\nспециальные конструкции и возможность использования функции по аналогии с Layer."
        },
        {
          "isRequired": false,
          "param": "keyTemplate",
          "type": "String|Function",
          "description": "Шаблон идентификатора тайла. Используется для формирования padding в jsonp-запросе за данными.\nЗадается по аналогии с предыдущим параметром. Все символы, не являющиеся буквой, цифрой или символом '_', будут заменены на '_'.\nЕсли параметр не задан, то padding запроса будет сгенерирован автоматически.\nПримеры преобразований при tileNumber=[3, 1], zoom=9:\n\n    'myCallback=%x' =&gt; 'myCallback_3'\n    '%c' =&gt; 'x_3_y_1_z_9'\n    'callback2_%c' =&gt; 'callback2_x_3_y_1_z_9'\n    'callback%test' =&gt; 'callback_test'\n"
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции источника данных."
        }
      ],
      "inherits": [
        "IHotspotObjectSource"
      ],
      "methods": [
        {
          "return": "String",
          "params": [
            {
              "isRequired": true,
              "param": "tileNumber",
              "type": "Number[]",
              "description": "Номер тайла (тайловые координаты)."
            },
            {
              "isRequired": true,
              "param": "zoom",
              "type": "Integer",
              "description": "Уровень масштаба."
            }
          ],
          "desciption": "Возвращает имя callback-функции (padding) в jsonp-запросе, если оно статическое,\nлибо null, если можно использовать динамический jsonp-callback.\nШаблоны поддерживают те же подстановки, что и в шаблоне url тайла.\nВсе символы, не являющиеся буквой, цифрой или символом '_', будут заменены на '_'.\n\nВозвращает идентификатор тайла. Используется при формировании padding в jsonp-запросе за данными.",
          "name": "getKey"
        },
        {
          "return": "String",
          "desciption": "Возвращает шаблон идентификатора тайла.",
          "name": "getKeyTemplate"
        },
        {
          "return": "String",
          "params": [
            {
              "isRequired": true,
              "param": "tileNumber",
              "type": "Number[]",
              "description": "Номер тайла (тайловые координаты)."
            },
            {
              "isRequired": true,
              "param": "zoom",
              "type": "Integer",
              "description": "Уровень масштабирования."
            }
          ],
          "desciption": "Возвращает URL данных для конкретного тайла.",
          "name": "getTileUrl"
        },
        {
          "return": "String",
          "desciption": "Возвращает шаблон URL данных для тайла.",
          "name": "getTileUrlTemplate"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "layer",
              "type": "hotspot.Layer",
              "description": "Слой, которому принадлежат объекты."
            },
            {
              "isRequired": true,
              "param": "res",
              "type": "Object",
              "description": "Ответ сервера."
            },
            {
              "isRequired": true,
              "param": "callback",
              "type": "Function",
              "description": "Функция-обработчик."
            },
            {
              "isRequired": true,
              "param": "tileNumber",
              "type": "Number[]",
              "description": "Номер тайла, для которого пришел ответ."
            },
            {
              "isRequired": true,
              "param": "zoom",
              "type": "Number",
              "description": "Коэффициент масштабирования, для которого пришел ответ.\nмассива объектов."
            }
          ],
          "desciption": "Разбирает ответ сервера. Возвращает в callback массив объектов-активных областей,\nсформированных по json-описанию.",
          "name": "parseResponse"
        },
        {
          "return": "Boolean",
          "params": [
            {
              "isRequired": true,
              "param": "layer",
              "type": "hotspot.Layer",
              "description": "Слой активных областей."
            },
            {
              "isRequired": true,
              "param": "tileNumber",
              "type": "Number[]",
              "description": "Номер тайла."
            },
            {
              "isRequired": true,
              "param": "zoom",
              "type": "Integer",
              "description": "Коэффициент масштабирования."
            }
          ],
          "desciption": "Метод, который вызывается перед тем, как отправить запрос за данными для тайла.\nЕсли метод возвращает true, то запрос на сервер посылаться не будет,\nи в качестве ответа вернется пустой массив объектов.\n\nСтандартная реализация метода проверяет, лежит ли параметр zoom в пределах [options.minZoom, options.maxZoom].\nА также проверяет, попадает ли центр запрашиваемого тайла в указанные options.bounds.\nЕсли options.bounds=null, то проверка для этого параметра не осуществляется.\n\nВозвращает true - тайл вышел за пределы области данных (для\nданного тайла данных нет), false - не вышел (данные есть).",
          "name": "restrict"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "template",
              "type": "String",
              "description": "Шаблон идентификатора."
            }
          ],
          "desciption": "Задает новый шаблон идентификатора тайла.",
          "name": "setKeyTemplate"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "template",
              "type": "String",
              "description": "Шаблон URL"
            }
          ],
          "desciption": "Задает новый шаблон URL данных для тайла.",
          "name": "setTileUrlTemplate"
        }
      ]
    }
  },
  {
    "name": "hotspot.Layer",
    "url": "hotspot.Layer",
    "def": {
      "name": "hotspot.Layer",
      "description": "Расширяет\n            IChildOnMap, ICustomizable.\n\nСлой активных областей.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "objectSource",
          "type": "IHotspotObjectSource",
          "description": "Источник объектов слоя."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции слоя.\nОпции для балунов Balloon и хинтов Hint хотспотного слоя нужно указывать с префиксами 'balloon' и 'hint'."
        }
      ],
      "inherits": [
        "IChildOnMap",
        "ICustomizable"
      ],
      "methods": [
        {
          "return": "Map",
          "desciption": "Возвращает ссылку на карту.",
          "name": "getMap"
        },
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": true,
              "param": "coords",
              "type": "Number[]",
              "description": "Географические координаты точки."
            }
          ],
          "desciption": "Метод, позволяющий получить объект слоя в указанной географической точке на текущем масштабе.\nЕсли данные для тайла, в который попадает точка, не подгружены, вызов метода спровоцирует их загрузку.\nПосле этого поиск будет производиться по загруженным данным.\n\nВозвращает объект-обещание, который будет зарезолвлен объектом слоя, в который попадает точка. Если точка попадает\nв несколько объектов слоя, вернется объект с максимальным значением zIndex.",
          "name": "getObjectInPosition"
        },
        {
          "return": "IHotspotObjectSource",
          "desciption": "Возвращает источник объектов слоя активных областей.",
          "name": "getObjectSource"
        },
        {
          "desciption": "Обновляет слой активных областей.\nПосле выполнения этой команды\nзагруженные ранее объекты удаляются из контейнера\nи запрашиваются новые данные.",
          "name": "update"
        }
      ],
      "props": [
        {
          "type": "hotspot.layer.Balloon",
          "description": "Балун хотспотного слоя.",
          "name": "balloon"
        },
        {
          "type": "hotspot.layer.Hint",
          "description": "Хинт хотспотного слоя.",
          "name": "hint"
        }
      ]
    }
  },
  {
    "name": "interactivityModel.storage",
    "url": "interactivityModel.storage",
    "def": {
      "name": "interactivityModel.storage",
      "description": "Статический объект.\n\n\n            Экземпляр класса  util.Storage\n        \n\nХранилище моделей интерактивности.\nМодели интерактивности позволяют объектам по-разному обрабатывать DOM-события.\nСписок доступных ключей моделей интерактивности:\n\n    'default#opaque' - объект генерирует все DOM-события и не прокидывает их на карту.\n    Поведения карты не будут работать при наведении или клике на объекты с данной моделью\n    интерактивности.\n    'default#geoObject' - объект генерирует все DOM-события.\n    На карту прокидываются события 'wheel', 'mousedown', 'dblclick', 'contextmenu', 'multitouchstart', 'multitouchmove' и 'multitouchend'.\n    Если на карте включены поведения 'scrollZoom', 'dblClickZoom' или 'magnifier', они будут работать через\n    объекты с данной моделью интерактивности, в отличие от объектов с моделью\n    'default#opaque'.\n    'default#layer' - объект генерирует все DOM-события.\n    На карту прокидываются события 'wheel', 'mousedown', 'contextmenu', 'multitouchstart', 'multitouchmove' и 'multitouchend'.\n    Если на карте включены поведения 'scrollZoom', 'drag' или 'magnifier', они будут работать\n    через объекты с данной моделью интерактивности.\n    'default#transparent' - объект генерирует все DOM-события, а затем прокидывает их на\n    карту.\n    'default#silent' - объект не генерирует DOM-события, но прокидывает их на карту.\n\n\nМетоды ",
      "hasCtor": false
    }
  },
  {
    "name": "layer.storage",
    "url": "layer.storage",
    "def": {
      "name": "layer.storage",
      "description": "Статический объект.\n\n\n            Экземпляр класса  util.Storage\n        \n\nХранилище слоев.\n\nМетоды ",
      "hasCtor": false
    }
  },
  {
    "name": "layer.tile.CanvasTile",
    "url": "layer.tile.CanvasTile",
    "def": {
      "name": "layer.tile.CanvasTile",
      "description": "Расширяет\n            ICanvasTile.\n\nКартиночный canvas-тайл. Умеет отрисовывать указанное изображение\nчерез метод drawImage у 2d контекста canvas-элемента.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "url",
          "type": "String",
          "description": "URL изображения."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции."
        }
      ],
      "inherits": [
        "ICanvasTile"
      ]
    }
  },
  {
    "name": "layer.tile.DomTile",
    "url": "layer.tile.DomTile",
    "def": {
      "name": "layer.tile.DomTile",
      "description": "Расширяет\n            IDomTile.\n\nКартиночный DOM-тайл. Умеет отрисовывать указанное изображение\nчерез css свойство background у DOM-элемента.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "url",
          "type": "String",
          "description": "URL изображения."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции."
        }
      ],
      "inherits": [
        "IDomTile"
      ]
    }
  },
  {
    "name": "layer.tileContainer.CanvasContainer",
    "url": "layer.tileContainer.CanvasContainer",
    "def": {
      "name": "layer.tileContainer.CanvasContainer",
      "description": "Расширяет\n            IChildOnMap.\n\nКонтейнер тайлов на canvas\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "layer",
          "type": "ILayer",
          "description": "Слой."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции контейнера."
        }
      ],
      "inherits": [
        "IChildOnMap"
      ],
      "methods": [
        {
          "return": "Map",
          "desciption": "Возвращает ссылку на карту.",
          "name": "getMap"
        },
        {
          "return": "ICanvasTile",
          "params": [
            {
              "isRequired": true,
              "param": "tileNumber",
              "type": "Number[]",
              "description": "Номер тайла."
            },
            {
              "isRequired": true,
              "param": "tileZoom",
              "type": "Number",
              "description": "Масштаб тайла."
            },
            {
              "isRequired": true,
              "param": "priority",
              "type": "Number",
              "description": "Приоритет загрузки."
            }
          ],
          "desciption": "Фабричная функция создания тайлов.\n\nВозвращает экземпляр тайла.",
          "name": "getTile"
        }
      ]
    }
  },
  {
    "name": "layer.tileContainer.DomContainer",
    "url": "layer.tileContainer.DomContainer",
    "def": {
      "name": "layer.tileContainer.DomContainer",
      "description": "Расширяет\n            IChildOnMap.\n\nКонтейнер тайлов типа IDomTile\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "layer",
          "type": "ILayer",
          "description": "Слой."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции контейнера."
        }
      ],
      "inherits": [
        "IChildOnMap"
      ],
      "methods": [
        {
          "return": "Map",
          "desciption": "Возвращает ссылку на карту.",
          "name": "getMap"
        },
        {
          "return": "IDomTile",
          "params": [
            {
              "isRequired": true,
              "param": "tileNumber",
              "type": "Number[]",
              "description": "Номер тайла."
            },
            {
              "isRequired": true,
              "param": "tileZoom",
              "type": "Number",
              "description": "Масштаб тайла."
            },
            {
              "isRequired": true,
              "param": "priority",
              "type": "Number",
              "description": "Приоритет загрузки."
            }
          ],
          "desciption": "Фабричная функция создания тайлов.\n\nВозвращает экземпляр тайла.",
          "name": "getTile"
        }
      ]
    }
  },
  {
    "name": "Layer",
    "url": "Layer",
    "def": {
      "name": "Layer",
      "description": "Расширяет\n            ILayer, IParentOnMap, IPositioningContext.\n\nТайловый слой. Позволяет отображать на карте подложку, состоящую из тайлов.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "tileUrlTemplate",
          "type": "String|Function",
          "description": "Строковый шаблон URL тайла,\nлибо функция, которая генерирует URL тайла.\nДля строкового шаблона поддерживается подстановка:\n"
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции."
        }
      ],
      "inherits": [
        "ILayer",
        "IParentOnMap",
        "IPositioningContext"
      ],
      "methods": [
        {
          "return": "Number[]",
          "params": [
            {
              "isRequired": true,
              "param": "clientPixelPoint",
              "type": "Number",
              "description": "Точка в клиентских пиксельных\nкоординатах."
            },
            {
              "isRequired": true,
              "param": "tileZoom",
              "type": "Number",
              "description": "Уровень масштаба тайла."
            }
          ],
          "desciption": "Возвращает номер тайла, в который попадает указанная\nточка при заданном уровне масштаба тайлов.",
          "name": "clientPixelsToNumber"
        },
        {
          "return": "IPane",
          "desciption": "Возвращает контейнер, в котором находится слой.\n\nВозвращает контейнер.",
          "name": "getPane"
        },
        {
          "return": "Number[]",
          "params": [
            {
              "isRequired": true,
              "param": "zoom",
              "type": "Number",
              "description": "Значение коэффициента мастабирования."
            }
          ],
          "desciption": "Возвращает размеры тайлов в зависимости от масштаба.\n\nВозвращает размеры тайла по горизонтали и вертикали\nдля указанного коэффициента масштабирования.",
          "name": "getTileSize"
        },
        {
          "return": "String|null",
          "params": [
            {
              "isRequired": true,
              "param": "tileNumber",
              "type": ""
            },
            {
              "isRequired": true,
              "param": "tileZoom",
              "type": ""
            }
          ],
          "desciption": "Возвращает URL тайла по его номеру и уровню масштабирования или null если\nдля запрашиваемого участка нет данных.",
          "name": "getTileUrl"
        },
        {
          "return": "String|Function",
          "desciption": "Возвращает строковый шаблон URL тайла или функцию, которая его генерирует.",
          "name": "getTileUrlTemplate"
        },
        {
          "return": "Number[][]",
          "params": [
            {
              "isRequired": true,
              "param": "tileNumber",
              "type": "Integer[]",
              "description": "Номер тайла."
            },
            {
              "isRequired": true,
              "param": "tileZoom",
              "type": "Integer",
              "description": "Уровень масштаба тайла."
            }
          ],
          "desciption": "Преобразует номер и уровень масштаба тайла в\nзанимаемую тайлом область в клиентских координатах\nродительского контейнера.\n\nВозвращает область в клиентских пиксельных координатах.",
          "name": "numberToClientBounds"
        },
        {
          "return": "Integer[]|null",
          "params": [
            {
              "isRequired": true,
              "param": "number",
              "type": "Integer[]",
              "description": "Номер тайла."
            },
            {
              "isRequired": true,
              "param": "tileZoom",
              "type": "Integer",
              "description": "Уровень масштабирования тайла."
            }
          ],
          "desciption": "Накладывает ограничения на зону видимости тайлов (в том числе зацикленность\nкарты по осям x, y).\n\nВозвращает новый номер тайла с учётом ограничений либо\nnull, если тайл не входит в зону видимости.",
          "name": "restrict"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "tileUrlTemplate",
              "type": "String|Function",
              "description": "Строковый шаблон URL тайла, либо функция, которая его генерирует."
            }
          ],
          "name": "setTileUrlTemplate"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "updateBounds",
              "type": ""
            }
          ],
          "desciption": "Удаляет старые тайлы и запрашивает новые.",
          "name": "update"
        }
      ]
    }
  },
  {
    "name": "LayerCollection",
    "url": "LayerCollection",
    "def": {
      "name": "LayerCollection",
      "description": "Расширяет\n            ILayer, IMapObjectCollection.\n\nКоллекция слоев.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "ILayer",
        "IMapObjectCollection"
      ],
      "methods": [
        {
          "return": "LayerCollection",
          "params": [
            {
              "isRequired": true,
              "param": "child",
              "type": "ILayer|String",
              "description": "Слой (ключ хранилища layer.storage или экземпляр класса ILayer), который нужно добавить."
            }
          ],
          "desciption": "Добавляет в коллекцию дочерний объект.\n\nВозвращает ссылку на себя.",
          "name": "add"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "callback",
              "type": "Function",
              "description": "Функция-обработчик."
            },
            {
              "isRequired": false,
              "param": "context",
              "type": "Object",
              "description": "Контекст выполнения функции."
            }
          ],
          "desciption": "Перебирает все элементы коллекции, вызывая для каждого функцию-обработчик.",
          "name": "each"
        },
        {
          "return": "Number",
          "desciption": "Возвращает яркость слоя в виде числа от 0 до 1.",
          "name": "getBrightness"
        },
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": false,
              "param": "coords",
              "type": "Number[]",
              "description": "Точка на карте, для которой запрашивается\nинформация об авторских правах."
            },
            {
              "isRequired": false,
              "param": "zoom",
              "type": "Number",
              "description": "Уровень масштабирования, для которого запрашивается\nинформация об авторских правах."
            }
          ],
          "desciption": "Запрашивает информацию об авторских правах в указанной\nточке с указанным коэффициентом масштабирования.\nВозвращает объект-promise, который будет подтверждён\nи передаст в качестве результата массив строк или DOM-элементов\nс информацией об авторских правах.\nЕсли точка и коэффициент масштабирования не указаны, будут\nиспользованы центр и коэффициент масштабирования карты.\n\nВозвращает объект-promise.",
          "name": "getCopyrights"
        },
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": true,
              "param": "coords",
              "type": ""
            }
          ],
          "desciption": "Определяет доступный в указанной точке диапазон уровней масштабирования.\nЕсли данные есть, то возвращенный объект-promise будет подтвержден\nи передаст в качестве результата массив из двух чисел - минимальный и\nмаксимальный доступный в точке уровень масштабирования.\nЕсли данных нет, то promise отклоняется с указанием ошибки. Если\nу коллекции нет ни одного потомка, предоставляющего информацию\nо диапазоне уровней масштабирования, то promise будет отклонён с\nсообщением 'noProvider'.\n\nВозвращает объект-promise.",
          "name": "getZoomRange"
        },
        {
          "return": "LayerCollection",
          "params": [
            {
              "isRequired": true,
              "param": "child",
              "type": "ILayer|String",
              "description": "Слой (строка-ключ из layer.storage или экземпляр класса ILayer), который нужно удалить."
            }
          ],
          "desciption": "Удаляет из коллекции дочерний объект.\n\nВозвращает ссылку на себя.",
          "name": "remove"
        }
      ]
    }
  },
  {
    "name": "hotspot.layer.Hint",
    "url": "hotspot.layer.Hint",
    "def": {
      "name": "hotspot.layer.Hint",
      "description": "Расширяет\n            IHintManager.\n\nМенеджер хинта хотспотного слоя. Позволяет управлять хинтом хотспотного слоя, открывать и скрывать его.\nИспользует внутри себя менеджер хинтов карты map.Hint.\nХотспотные слои содержат экземпляр этого класса, доступный как myHotspotLayer.hint.\nНе создавайте экземпляры этого класса без необходимости.\n\nСм.: Hint hotspot.Layer.hint \n\nКонструктор | Поля  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "hotspotLayer",
          "type": "Object",
          "description": "Хотспотный слой."
        }
      ],
      "inherits": [
        "IHintManager"
      ],
      "methods": [
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": false,
              "param": "position",
              "type": "Number[]",
              "description": "Координаты открытия в глобальных пиксельных координатах."
            },
            {
              "isRequired": false,
              "param": "data",
              "type": "Object",
              "description": "Данные."
            },
            {
              "isRequired": false,
              "param": "options",
              "type": "Object",
              "description": "Опции."
            }
          ],
          "desciption": "Открывает всплывающую подсказку в указанной позиции.\n\nВозвращает объект-promise.",
          "name": "open"
        }
      ]
    }
  },
  {
    "name": "layout.Image",
    "url": "layout.Image",
    "def": {
      "name": "layout.Image",
      "description": "Расширяет\n            ILayout.\n\nКласс для создания макетов, содержащих картинку.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "data",
          "type": "ILayout",
          "description": "Данные макета."
        }
      ],
      "inherits": [
        "ILayout"
      ]
    }
  },
  {
    "name": "layout.ImageWithContent",
    "url": "layout.ImageWithContent",
    "def": {
      "name": "layout.ImageWithContent",
      "description": "Расширяет\n            layout.Image.\n\nКласс для создания макетов, состоящих из картинки и содержимого.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "data",
          "type": "ILayout",
          "description": "Данные макета."
        }
      ],
      "inherits": [
        "layout.Image"
      ]
    }
  },
  {
    "name": "layout.storage",
    "url": "layout.storage",
    "def": {
      "name": "layout.storage",
      "description": "Статический объект.\n\n\n            Экземпляр класса  util.AsyncStorage\n        \n\nХранилище классов лейаутов.\n\nМетоды ",
      "hasCtor": false
    }
  },
  {
    "name": "LoadingObjectManager",
    "url": "LoadingObjectManager",
    "def": {
      "name": "LoadingObjectManager",
      "description": "Расширяет\n            ICustomizable, IEventEmitter, IGeoObject, IParentOnMap.\n\nМенеджер объектов, осуществляющий их оптимальную подгрузку с сервера.\nПозволяет оптимально загружать, отображать, кластеризовать и управлять видимостью объектов.\nМенеджер отправляет запрос за данными по указанному url в JSONP-формате.\nОписание формата соответствует формату добавляемых в ObjectManager объектов ObjectManager.add.\nОбратите внимание, что у объектов, отрисованных на карте через данный менеджер, нельзя включать режимы редактирования и перетаскивания.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "urlTemplate",
          "type": "String",
          "description": "Шаблон URL данных. Поддерживаются\nспециальные конструкции по аналогии с Layer.\nТакже поддерживаются подстановки:\n\n    %b заменяется на массив географических координат,\n    описывающих прямоугольную область, для которой требуется загрузить данные.\n    %t заменяется на массив номеров тайлов, описывающих прямоугольную область,\n    для которой требуется загрузить данные.\n"
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции.\n\n    Можно задавать все опции, указанные в описании Clusterer,\n        за исключением опций hasBalloon и hasHint.\n    \n    Опции для кластеров задаются с префиксом cluster.\n        Список опций указан в описании класса ClusterPlacemark;\n    \n    \n        Опции для одиночных объектов задаются с префиксом geoObject.\n        Список опций указан в описании класса Placemark.\n    \n"
        }
      ],
      "inherits": [
        "ICustomizable",
        "IEventEmitter",
        "IGeoObject",
        "IParentOnMap"
      ],
      "methods": [
        {
          "return": "Number[][]|null",
          "desciption": "Вычисляет границы области в геокоординатах, охватывающей\nвсе загруженные объекты в составе менеджера.\n\nВозвращает массив координат области или null, если менеджер\nне добавлен на карту.",
          "name": "getBounds"
        },
        {
          "return": "Object",
          "params": [
            {
              "isRequired": true,
              "param": "id",
              "type": "Object",
              "description": "Идентификатор объекта, для которого нужно получить состояние."
            }
          ],
          "desciption": "Получение информации о текущем состоянии объекта, добавленного в менеджер.\n\nВозвращает объект с полями:\n\n  found - признак, указывающий, существует ли объект с переданным идентификатором. Тип: Boolean;\n  isShown - признак, указывающий, находится ли объект в видимой области карты. Тип: Boolean;\n  cluster - JSON-описание кластера, в который добавлен объект.\n  Помимо обязательных полей, содержит поле properties.geoObjects с массивом\n  объектов, попавших в кластер.\n  Поле возвращается только при включенной кластеризации;\n  isClustered - признак, указывающий, попал ли объект в состав кластера;\n  Поле возвращается только при включенной кластеризации. Тип: Boolean;\n  isFilteredOut - признак, указывающий, прошел ли объект фильтрацию.\n  Если фильтр не задан или объект прошел фильтрацию, значение поля будет false. Тип: Boolean.\n",
          "name": "getObjectState"
        },
        {
          "return": "Number[][]|null",
          "desciption": "Вычисляет границы области в глобальных пиксельных координатах, охватывающей\nвсе загруженные объекты в составе менеджера.\n\nВозвращает массив координат области или null, если менеджер\nне добавлен на карту.",
          "name": "getPixelBounds"
        },
        {
          "return": "String",
          "desciption": "Возвращает шаблон URL данных.",
          "name": "getUrlTemplate"
        },
        {
          "desciption": "Метод, удаляющий все загруженные ранее данные и отправляющий\nзапрос за новыми данными.",
          "name": "reloadData"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "urlTemplate",
              "type": "String",
              "description": "шаблон URL данных."
            }
          ],
          "name": "setUrlTemplate"
        }
      ],
      "props": [
        {
          "type": "objectManager.ClusterCollection",
          "description": "Коллекция кластеров, сгенерированных менеджером.",
          "name": "clusters"
        },
        {
          "type": "objectManager.ObjectCollection",
          "description": "Коллекция объектов, добавленных в слой.",
          "name": "objects"
        }
      ]
    }
  },
  {
    "name": "map.action.Continuous",
    "url": "map.action.Continuous",
    "def": {
      "name": "map.action.Continuous",
      "description": "Расширяет\n            IMapAction.\n\nДвижение карты, состоящее из одного или более шагов.\nПредназначено для реализации сложных движений карты.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IMapAction"
      ],
      "methods": [
        {
          "return": "Boolean",
          "desciption": "Проверяет, исполняется ли движение картой в данный момент.\n\nВозвращает true - движение в данный момент исполняется, false - нет.",
          "name": "isActive"
        },
        {
          "return": "map.action.Continuous",
          "params": [
            {
              "isRequired": true,
              "param": "tick",
              "type": "Object",
              "description": "Параметры движения."
            }
          ],
          "desciption": "Выполняет один шаг движения карты.\n\nВозвращает ссылку на себя.",
          "name": "tick"
        }
      ]
    }
  },
  {
    "name": "Map",
    "url": "Map",
    "def": {
      "name": "Map",
      "description": "Расширяет\n            IDomEventEmitter.\n\nКласс для создания и управления картой.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "element",
          "type": "Object|String",
          "description": "Ссылка на HTML-элемент, в котором размещается карта, или идентификатор этого HTML-элемента."
        },
        {
          "isRequired": true,
          "param": "state",
          "type": "Object",
          "description": "Параметры карты."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции карты. Через опции карты можно задавать настройки как самой карты,\nтак и добавленных на неё объектов:\n\n    опции поведений карты;\n    опции балуна карты с префиксом balloon;\n    опции хинта карты с префиксом hint;\n    опции гео-объектов с префиксом geoObject;\n    опции слоев с префиксом layer;\n    опции слоев хотспотов с префиксом hotspotLayer;\n\nОпции, которые трактует непосредственно сама карта, перечислены ниже."
        }
      ],
      "inherits": [
        "IDomEventEmitter"
      ],
      "methods": [
        {
          "desciption": "Уничтожает карту.",
          "name": "destroy"
        },
        {
          "return": "Number[][]",
          "params": [
            {
              "isRequired": false,
              "param": "options",
              "type": "Object",
              "description": "Опции."
            }
          ],
          "desciption": "Возвращает двумерный массив геокоординат левого нижнего и правого верхнего углов области\nпоказа карты.",
          "name": "getBounds"
        },
        {
          "return": "Number[]",
          "params": [
            {
              "isRequired": false,
              "param": "options",
              "type": "Object",
              "description": "Опции."
            }
          ],
          "desciption": "Возвращает географические координаты текущего центра карты.",
          "name": "getCenter"
        },
        {
          "return": "Number[]",
          "params": [
            {
              "isRequired": false,
              "param": "options",
              "type": "Object",
              "description": "Опции."
            }
          ],
          "desciption": "Возвращает глобальные пиксельные координаты текущего центра карты.",
          "name": "getGlobalPixelCenter"
        },
        {
          "return": "String|MapType",
          "desciption": "Возвращает текущий тип карты.",
          "name": "getType"
        },
        {
          "return": "Number",
          "desciption": "Возвращает текущий коэффициент масштабирования карты.",
          "name": "getZoom"
        },
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": true,
              "param": "center",
              "type": "Number[]|Object[]",
              "description": "Центр карты или массив точек для последовательного обхода."
            },
            {
              "isRequired": false,
              "param": "options",
              "type": "Object",
              "description": "Опции."
            }
          ],
          "desciption": "Устанавливает центр карты.\nЕсли передан массив точек, то карта будет перемещаться от одной точки к другой.\n\nВозвращает объект-промис.\nВ случае корректного выполнения действия будет возвращен resolve без значения.\nВ случае ошибки будет возвращен reject с описанием ошибки.",
          "name": "panTo"
        },
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": true,
              "param": "bounds",
              "type": "Number[][]",
              "description": "Границы области показа."
            },
            {
              "isRequired": false,
              "param": "options",
              "type": "Object",
              "description": "Опции."
            }
          ],
          "desciption": "Позиционирует карту для показа переданного района.\n\nВозвращает объект-промис.\nВ случае корректного выполнения действия будет возвращен resolve без значения.\nВ случае ошибки будет возвращен reject с описанием ошибки.",
          "name": "setBounds"
        },
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": true,
              "param": "center",
              "type": "Number[]",
              "description": "Геокоординаты центра карты."
            },
            {
              "isRequired": false,
              "param": "zoom",
              "type": "Number",
              "description": "Коэффициент масштабирования карты."
            },
            {
              "isRequired": false,
              "param": "options",
              "type": "Object",
              "description": "Опции."
            }
          ],
          "desciption": "Устанавливает центр и коэффициент масштабирования карты.\nЦентр задается в географических координатах.\n\nВозвращает объект-промис.\nВ случае корректного выполнения действия будет возвращен resolve без значения.\nВ случае ошибки будет возвращен reject с описанием ошибки.",
          "name": "setCenter"
        },
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": true,
              "param": "globalPixelCenter",
              "type": "Number[]",
              "description": "Пиксельные координаты нового центра карты."
            },
            {
              "isRequired": false,
              "param": "zoom",
              "type": "Number",
              "description": "Коэффициент масштабирования карты."
            },
            {
              "isRequired": false,
              "param": "options",
              "type": "Object",
              "description": "Опции."
            }
          ],
          "desciption": "Устанавливает центр и коэффициент масштабирования карты.\nЦентр задается в глобальных пиксельных координатах.\n\nВозвращает объект-промис.\nВ случае корректного выполнения действия будет возвращен resolve без значения.\nВ случае ошибки будет возвращен reject с описанием ошибки.",
          "name": "setGlobalPixelCenter"
        },
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": true,
              "param": "type",
              "type": "String|MapType",
              "description": "Тип карты. Может быть ключом или или экземпляром класса MapType.\nСписок доступных ключей:\n\n    'yandex#map' - тип карты \"схема\";\n    'yandex#satellite' - тип карты \"спутник\";\n    'yandex#hybrid' - тип карты \"гибрид\";\n    'yandex#publicMap' - тип карты \"народная карта\";\n    'yandex#publicMapHybrid' - тип карты \"народный гибрид\".\n\nКлючи 'yandex#publicMap' и 'yandex#publicMapHybrid' доступны только для России и Украины."
            },
            {
              "isRequired": false,
              "param": "options",
              "type": "Object",
              "description": "Опции карты."
            }
          ],
          "desciption": "Устанавливает тип карты.\n\nВозвращает объект-промис.\nВ случае корректного выполнения действия будет возвращен resolve без значения.\nВ случае ошибки будет возвращен reject с описанием ошибки.",
          "name": "setType"
        },
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": true,
              "param": "zoom",
              "type": "Number",
              "description": "Коэффициент масштабирования карты."
            },
            {
              "isRequired": false,
              "param": "options",
              "type": "Object",
              "description": "Опции."
            }
          ],
          "desciption": "Устанавливает коэффициент масштабирования карты.\n\nВозвращает объект-промис.\nВ случае корректного выполнения действия будет возвращен resolve без значения.\nВ случае ошибки будет возвращен reject с описанием ошибки.",
          "name": "setZoom"
        }
      ],
      "props": [
        {
          "type": "map.action.Manager",
          "description": "Менеджер действий карты.",
          "name": "action"
        },
        {
          "type": "map.Balloon",
          "description": "Балун карты.",
          "name": "balloon"
        },
        {
          "type": "map.behavior.Manager",
          "description": "Менеджер поведений карты. Позволяет включать и выключать поведения,\nа также предоставляет доступ к их методам и свойствам.",
          "name": "behaviors"
        },
        {
          "type": "map.Container",
          "description": "Контейнер карты.",
          "name": "container"
        },
        {
          "type": "control.Manager",
          "description": "Элементы управления картой.",
          "name": "controls"
        },
        {
          "type": "map.Converter",
          "description": "Преобразователь пиксельных точек карты\nиз глобальных в локальные и наоборот.",
          "name": "converter"
        },
        {
          "type": "map.Copyrights",
          "description": "Менеджер размещённой на карте информации об авторских правах.",
          "name": "copyrights"
        },
        {
          "type": "util.cursor.Manager",
          "description": "Менеджер курсоров карты.",
          "name": "cursors"
        },
        {
          "type": "event.Manager",
          "description": "Менеджер событий карты. Поддерживает подписку с приоритетами.\nБросает события типа MapEvent.\n\nПримеры: \n\n1.\n\n2.",
          "name": "events"
        },
        {
          "type": "map.GeoObjects",
          "description": "Менеджер геообъектов карты.",
          "name": "geoObjects"
        },
        {
          "type": "map.Hint",
          "description": "Хинт карты.",
          "name": "hint"
        },
        {
          "type": "map.layer.Manager",
          "description": "Менеджер слоёв карты.\n\nСм.: Layer ",
          "name": "layers"
        },
        {
          "type": "option.Manager",
          "description": "Опции карты.",
          "name": "options"
        },
        {
          "type": "map.pane.Manager",
          "description": "Менеджер контейнеров объектов карты.",
          "name": "panes"
        },
        {
          "type": "map.ZoomRange",
          "description": "Объект, предоставляющий доступ к информации о доступных\nв точке уровнях масштабирования.",
          "name": "zoomRange"
        }
      ]
    }
  },
  {
    "name": "map.action.Manager",
    "url": "map.action.Manager",
    "def": {
      "name": "map.action.Manager",
      "description": "Расширяет\n            IEventEmitter.\n\nМенеджер действий карты. Позволяет выполнять сложные движения\nна карте и гарантирует, что сложные движения не наложатся друг на друга.\nУ каждой карты уже есть собственный менеджер действий, доступный как\nMap.action. Не создавайте экземпляры этого класса без необходимости.\n\nСм.: Map.action \n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "map",
          "type": "Map",
          "description": "Карта."
        }
      ],
      "inherits": [
        "IEventEmitter"
      ],
      "methods": [
        {
          "desciption": "Прерывает очередной шаг действия.",
          "name": "breakTick"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "action",
              "type": "IMapAction",
              "description": "Действие."
            }
          ],
          "desciption": "Запускает выполнение действия на карте. Если в этот момент на карте\nвыполняется какое-то другое движение, то оно останавливается\n(вызывается метод end). Новое движение запускается посредством вызова\nметода begin.",
          "name": "execute"
        },
        {
          "return": "Object",
          "desciption": "Определяет состояние карты в момент ее плавного движения.\n\nВозвращает объект с полями:\nisTicking - выполняется ли сейчас шаг плавного движения;\ntickProgress - какая часть текущего шага выполнена;\nzoom - масштаб карты во время текущего шага;\nglobalPixelCenter - центр карты в глобальных пикселях в момент текущего шага.",
          "name": "getCurrentState"
        },
        {
          "return": "Map",
          "desciption": "Возвращает ссылку на карту.",
          "name": "getMap"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "userFunction",
              "type": "Function",
              "description": "Пользовательская функция коррекции шагов."
            }
          ],
          "desciption": "Позволяет устанавливать пользовательские коррекции\nдля сложных движений на карте. По окончанию коррекции необходимо вернуть\nскорректированные значения.",
          "name": "setCorrection"
        },
        {
          "desciption": "Останавливает выполнение действия на карте.",
          "name": "stop"
        }
      ]
    }
  },
  {
    "name": "map.action.Single",
    "url": "map.action.Single",
    "def": {
      "name": "map.action.Single",
      "description": "Расширяет\n            IMapAction.\n\nПростое движение карты.\nДвижение выполняется сразу после передачи его в map.action.Manager.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "tick",
          "type": "Object",
          "description": "Параметры движения."
        }
      ],
      "inherits": [
        "IMapAction"
      ],
      "methods": [
        {
          "return": "Boolean",
          "desciption": "Проверяет, исполняется ли движение картой в данный момент.\n\nВозвращает true - движение в данный момент исполняется, false - нет.",
          "name": "isActive"
        }
      ]
    }
  },
  {
    "name": "map.addon.balloon",
    "url": "map.addon.balloon",
    "def": {
      "name": "map.addon.balloon",
      "description": "Примечание.&nbsp;Конструктор класса map.addon.balloon скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nСтатический объект.\n\nМодуль, который предоставляет возможность использовать балун у карты.\nДобавляет карте (Map) интерфейс IBalloonOwner.\nПри подключении package.full (стандартный набор модулей) доступен по умолчанию.\nЕсли Map подключается отдельно, то необходимо явно указать этот модуль в загрузчике.\nЕсли map.addon.balloon подключается отдельно после создания Map,\nто интерфейс IBalloonOwner не будет добавлен. Тогда для инициализации менеджера балуна\nнужно будет использовать метод map.addon.balloon#get.\n\nМетоды \n\nВнимание!&nbsp;Не рекомендуется создавать экземпляры данного класса самостоятельно.",
      "hasCtor": false,
      "methods": [
        {
          "return": "IPopupManager",
          "desciption": "Возвращает менеджер балуна карты.",
          "name": "get"
        }
      ]
    }
  },
  {
    "name": "map.addon.hint",
    "url": "map.addon.hint",
    "def": {
      "name": "map.addon.hint",
      "description": "Примечание.&nbsp;Конструктор класса map.addon.hint скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nСтатический объект.\n\nМодуль, который предоставляет возможность использовать хинт у карты.\nДобавляет карте (Map) интерфейс IHintOwner.\nПри подключении package.full (стандартный набор модулей) доступен по умолчанию.\nЕсли Map подключается отдельно, то необходимо явно указать этот модуль в загрузчике.\nЕсли map.addon.hint подключается отдельно после создания Map,\nто интерфейс IHintOwner не будет добавлен. Тогда для инициализации менеджера балуна\nнужно будет использовать метод map.addon.hint#get.\n\nМетоды \n\nВнимание!&nbsp;Не рекомендуется создавать экземпляры данного класса самостоятельно.",
      "hasCtor": false,
      "methods": [
        {
          "return": "IPopupManager",
          "desciption": "Возвращает менеджер хинта карты.",
          "name": "get"
        }
      ]
    }
  },
  {
    "name": "map.Balloon",
    "url": "map.Balloon",
    "def": {
      "name": "map.Balloon",
      "description": "Расширяет\n            IBalloonManager, IBalloonSharingManager.\n\nМенеджер балуна карты. У каждой карты уже есть собственный менеджер балуна, доступный как myMap.balloon.\nВ один момент на карте может быть открыт только один балун, управляемый менеджером.\nНе создавайте экземпляры этого класса без необходимости.\n\nСм.: Balloon Map.balloon \n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "map",
          "type": "Map",
          "description": "Ссылка на объект карты."
        }
      ],
      "inherits": [
        "IBalloonManager"
      ]
    }
  },
  {
    "name": "map.behavior.Manager",
    "url": "map.behavior.Manager",
    "def": {
      "name": "map.behavior.Manager",
      "description": "Расширяет\n            ICustomizable, IEventEmitter, IParentOnMap.\n\nМенеджер поведений карты. Позволяет включать и отключать поведения.\nУ каждой карты уже есть собственный менеджер поведений, доступный как map.behaviors.\nНе инстанцируйте экземпляры этого класса без необходимости\n\nСм.: Map.behaviors \n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "map",
          "type": "Map",
          "description": "Карта."
        },
        {
          "isRequired": false,
          "param": "behaviors",
          "type": "String|String[]",
          "description": "Список поведений карты, включенных\nсразу при создании карты. По умолчанию - \"drag\", \"dblClickZoom\", \"rightMouseButtonMagnifier\" для настольных браузеров,\n\"drag\", \"dblClickZoom\" и \"multiTouch\" - для мобильных.\n"
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции поведений. Можно задавать следующие опции:\n\n    опции поведения behavior.Drag с префиксом drag;\n    опции поведения behavior.ScrollZoom с префиксом scrollZoom;\n    опции поведения behavior.DblClickZoom с префиксом dblClickZoom;\n    опции поведения behavior.MultiTouch с префиксом multiTouch;\n    опции поведения magnifier.RightMouseButtonMagnifier, с префиксом rightMouseButtonMagnifier;\n    опции поведения behavior.LeftMouseButtonMagnifier, с префиксом leftMouseButtonMagnifier;\n    опции поведения behavior.Ruler с префиксом ruler.\n"
        }
      ],
      "inherits": [
        "ICustomizable",
        "IEventEmitter",
        "IParentOnMap"
      ],
      "methods": [
        {
          "return": "map.behavior.Manager",
          "params": [
            {
              "isRequired": true,
              "param": "behaviors",
              "type": "String|String[]",
              "description": "Список отключаемых поведений."
            }
          ],
          "desciption": "Отключает поведения на карте.\n\nВозвращает ссылку на себя.",
          "name": "disable"
        },
        {
          "return": "map.behavior.Manager",
          "params": [
            {
              "isRequired": true,
              "param": "behaviors",
              "type": "String|String[]",
              "description": "Список подключаемых поведений."
            }
          ],
          "desciption": "Включает поведения на карте.\n\nВозвращает ссылку на себя.",
          "name": "enable"
        },
        {
          "return": "IBehavior",
          "params": [
            {
              "isRequired": true,
              "param": "behaviorName",
              "type": "String",
              "description": "Имя поведения."
            }
          ],
          "desciption": "Возвращает экземпляр поведения по ключу.",
          "name": "get"
        },
        {
          "return": "Boolean",
          "params": [
            {
              "isRequired": true,
              "param": "behaviorName",
              "type": "String",
              "description": "Идентификатор поведения."
            }
          ],
          "desciption": "Проверяет, включено ли в настоящий момент поведение.\n\nВозвращает true, если поведение включено, в противном случае - false.",
          "name": "isEnabled"
        }
      ]
    }
  },
  {
    "name": "map.Container",
    "url": "map.Container",
    "def": {
      "name": "map.Container",
      "description": "Расширяет\n            IDomEventEmitter.\n\nМенеджер контейнера карты. У каждой карты уже есть свой собственный\nменеджер контейнера, доступный как map.container. Не инстанцируйте экземпляры\nэтого класса без необходимости.\n\nСм.: Map.container \n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "parentElement",
          "type": "String|HTMLElement",
          "description": "HTML-элемент, в котором будет создана карта или его id."
        }
      ],
      "inherits": [
        "IDomEventEmitter"
      ],
      "methods": [
        {
          "desciption": "Позволяет переводить карту в полноэкранный режим.",
          "name": "enterFullscreen"
        },
        {
          "desciption": "Позволяет вывести карту из полноэкранного режима.",
          "name": "exitFullscreen"
        },
        {
          "params": [
            {
              "isRequired": false,
              "param": "preservePixelPosition",
              "type": "Boolean",
              "description": "Сохранять положение центра карты."
            }
          ],
          "desciption": "Вызывается при изменении размера контейнера карты для того,\nчтобы карта применила новый размер.",
          "name": "fitToViewport"
        },
        {
          "return": "HTMLElement",
          "desciption": "Возвращает HTML-элемент карты.",
          "name": "getElement"
        },
        {
          "return": "Number[]",
          "desciption": "Возвращает смещение контейнера карты в пикселях относительно левого\nверхнего угла документа.",
          "name": "getOffset"
        },
        {
          "return": "Number[]",
          "desciption": "Возвращает размеры контейнера карты в пикселях.",
          "name": "getSize"
        },
        {
          "return": "Boolean",
          "desciption": "Возвращает признак находится ли карта в полноэкранном режиме.",
          "name": "isFullscreen"
        }
      ]
    }
  },
  {
    "name": "map.Converter",
    "url": "map.Converter",
    "def": {
      "name": "map.Converter",
      "description": "Класс для преобразования глобальных пиксельных координат точки\n(считаются от левого верхнего угла мира) в локальные\n(считаются от левого верхнего угла окна) и наоборот.\nУ каждой карты уже есть собственный конвертер, доступный как map.converter.\nНе инстанцируйте экземпляры этого класса без необходимости.\n\nСм.: Map.converter \n\nКонструктор | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "map",
          "type": "Map",
          "description": "Ссылка на карту."
        }
      ],
      "methods": [
        {
          "return": "Number[]",
          "params": [
            {
              "isRequired": true,
              "param": "globalPixelPoint",
              "type": "Number[]",
              "description": "Пиксельные координаты точки, которые необходимо преобразовать."
            }
          ],
          "desciption": "Преобразовывает глобальные пиксельные координаты точки в локальные.\n\nВозвращает преобразованные координаты.",
          "name": "globalToPage"
        },
        {
          "return": "Number[]",
          "params": [
            {
              "isRequired": true,
              "param": "pagePixelPoint",
              "type": "Number[]",
              "description": "Пиксельные координаты точки, которые необходимо преобразовать."
            }
          ],
          "desciption": "Преобразовывает локальные пиксельные координаты точки в глобальные.\n\nВозвращает преобразованные координаты.",
          "name": "pageToGlobal"
        }
      ]
    }
  },
  {
    "name": "layout.templateBased.Base",
    "url": "layout.templateBased.Base",
    "def": {
      "name": "layout.templateBased.Base",
      "description": "Расширяет\n            ILayout.\n\nБазовый класс макета на основе шаблонов. Этот класс\nиспользуется фабрикой макетов как базовый для создания пользовательских макетов.\n\nСм.: templateLayoutFactory \n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "data",
          "type": "Object",
          "description": "Набор разнородных данных, на основе которых строится макет."
        }
      ],
      "inherits": [
        "ILayout"
      ],
      "methods": [
        {
          "desciption": "Строит экземпляр макета на основе шаблона и добавляет его в родительский HTML-элемент.",
          "name": "build"
        },
        {
          "desciption": "Удаляет содержимое макета из DOM.",
          "name": "clear"
        },
        {
          "return": "IShape|null",
          "desciption": "Возвращает фигуру, описывающую форму области, охватывающей макет, либо null, если нет возможности\nрассчитать данную фигуру. По умолчанию пытается построить фигуру через опцию shape - this.getData().options.get('shape').\nВ опции можно задать как инстанцию класса, реализующего интерфейс IShape, так и JSON-описание пиксельной геометрии фигуры.\nКоординаты геометрии фигуры должны отсчитываться от точки привязки родительского элемента макета.",
          "name": "getShape"
        },
        {
          "desciption": "Перестраивает макет.",
          "name": "rebuild"
        }
      ]
    }
  },
  {
    "name": "map.Hint",
    "url": "map.Hint",
    "def": {
      "name": "map.Hint",
      "description": "Расширяет\n            IHintManager, IHintSharingManager.\n\nМенеджер хинта карты. У каждой карты уже есть собственный менеджер хинта, доступный как myMap.hint.\nВ один момент на карте может быть открыт только один хинт, управляемый менеджером.\nНе создавайте экземпляры этого класса без необходимости.\n\nСм.: Hint Map.hint \n\nКонструктор | Поля  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "map",
          "type": "Map",
          "description": "Ссылка на объект карты."
        }
      ],
      "inherits": [
        "IHintManager"
      ]
    }
  },
  {
    "name": "map.Copyrights",
    "url": "map.Copyrights",
    "def": {
      "name": "map.Copyrights",
      "description": "Менеджер размещённой на карте информации\nоб авторских правах. У каждой карты уже есть собственный менеджер\nинформации об авторских правах, доступный как map.copyrights. Не инстанцируйте экземпляры\nэтого класса без необходимости.\n\nСм.: Map.copyrights \n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "map",
          "type": "Map",
          "description": "Карта."
        }
      ],
      "methods": [
        {
          "return": "ICopyrightsAccessor",
          "params": [
            {
              "isRequired": true,
              "param": "customCopyrights",
              "type": "String|HTMLElement|String[]|HTMLElement[]",
              "description": "Информация\nоб авторских правах в виде строки, DOM-элемента либо массива строк/DOM-элементов."
            }
          ],
          "desciption": "Добавляет на карту статическую (не зависящую от текущего\nцентра и масштаба карты) информацию об авторских правах.\n\nВозвращает объект, позволяющий управлять добавленной\nинформацией.",
          "name": "add"
        },
        {
          "return": "map.Copyrights",
          "params": [
            {
              "isRequired": true,
              "param": "provider",
              "type": "ICopyrightsProvider",
              "description": "Провайдер."
            }
          ],
          "desciption": "Добавляет нового провайдера информации об авторских правах.\n\nВозвращает ссылку на себя.",
          "name": "addProvider"
        },
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": false,
              "param": "point",
              "type": "Number[]",
              "description": "Точка (в географических координатах),\nдля которой требуется определить информацию об авторских правах.\nЕсли не указана, берётся текущий центр карты."
            },
            {
              "isRequired": false,
              "param": "zoom",
              "type": "Number",
              "description": "Уровень масштабирования,\nдля которого требуется определить информацию об авторских правах.\nЕсли не указан, берётся текущий уровень масштабирования карты."
            }
          ],
          "desciption": "Определяет информацию об авторских правах в указанной точке.\nВозвращает объект-promise, который будет подтверждён и передаст\nв качестве параметра массив строк/DOM-элементов.\n\nВозвращает объект-promise.",
          "name": "get"
        },
        {
          "return": "map.Copyrights",
          "params": [
            {
              "isRequired": true,
              "param": "provider",
              "type": "ICopyrightsProvider",
              "description": "Провайдер."
            }
          ],
          "desciption": "Удаляет провайдера информации об авторских правах.\n\nВозвращает ссылку на себя.",
          "name": "removeProvider"
        }
      ],
      "props": [
        {
          "type": "event.Manager",
          "description": "Менеджер событий.\nБросает события типа MapEvent.",
          "name": "events"
        }
      ]
    }
  },
  {
    "name": "map.GeoObjects",
    "url": "map.GeoObjects",
    "def": {
      "name": "map.GeoObjects",
      "description": "Расширяет\n            IGeoObjectCollection.\n\nКоллекция геообъектов карты. У каждой карты уже есть своя коллекция геообъектов,\nдоступная как map.geoObjects. Не инстанцируйте экземпляры этого класса без необходимости.\n\nСм.: Map.geoObjects \n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "map",
          "type": "Map",
          "description": "Карта."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции коллекции геообъектов.\nЧерез опции map.geoObjects можно задавать настройки геообъектов, добавленных на карту:\n\n    опции кластеризаторов с префиксом clusterer;\n    опции кластеров с префиксом cluster.\n"
        }
      ],
      "inherits": [
        "IGeoObjectCollection"
      ],
      "methods": [
        {
          "return": "map.GeoObjects",
          "params": [
            {
              "isRequired": true,
              "param": "child",
              "type": "IGeoObject",
              "description": "Дочерний геообъект."
            },
            {
              "isRequired": false,
              "param": "index",
              "type": "Integer",
              "description": "Индекс, в который добавляется новый объект.\nПо умолчанию объект добавляется в конец коллекции."
            }
          ],
          "desciption": "Добавляет (вставляет) дочерний геообъект в коллекцию.\n\nВозвращает ссылку на себя.",
          "name": "add"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "callback",
              "type": "Function",
              "description": "Функция-обработчик."
            },
            {
              "isRequired": false,
              "param": "context",
              "type": "Object",
              "description": "Контекст выполнения функции-обработчика."
            }
          ],
          "desciption": "Для каждого дочернего геообъекта, вызывает функцию-обработчик.",
          "name": "each"
        },
        {
          "return": "IGeoObject",
          "params": [
            {
              "isRequired": true,
              "param": "index",
              "type": "Integer",
              "description": "Индекс."
            }
          ],
          "desciption": "Возвращает дочерний геообъект с заданным индексом.\n\nВозвращает дочерний геообъект.",
          "name": "get"
        },
        {
          "return": "Number[][]|null",
          "desciption": "Возвращает географические координаты области, охватывающей коллекцию и ее дочерние\nгеообъекты.",
          "name": "getBounds"
        },
        {
          "return": "IIterator",
          "desciption": "Возвращает итератор по коллекции.",
          "name": "getIterator"
        },
        {
          "return": "Integer",
          "desciption": "Возвращает длину коллекции.",
          "name": "getLength"
        },
        {
          "return": "Number[][]|null",
          "desciption": "Возвращает глобальные пиксельные координаты области, охватывающей коллекцию и ее дочерние\nгеообъекты.",
          "name": "getPixelBounds"
        },
        {
          "return": "Integer",
          "params": [
            {
              "isRequired": true,
              "param": "object",
              "type": "Object",
              "description": "Дочерний геообъект."
            }
          ],
          "desciption": "Возвращает индекс дочернего геообъекта.\nЕсли геообъект в коллекции не найден, возвращается -1.",
          "name": "indexOf"
        },
        {
          "return": "map.GeoObjects",
          "params": [
            {
              "isRequired": true,
              "param": "child",
              "type": "IGeoObject",
              "description": "Удаляемый геообъект."
            }
          ],
          "desciption": "Удаляет дочерний геообъект из коллекции.\n\nВозвращает ссылку на себя.",
          "name": "remove"
        },
        {
          "return": "map.GeoObjects",
          "desciption": "Очищает коллекцию.\n\nВозвращает ссылку на себя.",
          "name": "removeAll"
        },
        {
          "return": "map.GeoObjects",
          "params": [
            {
              "isRequired": true,
              "param": "index",
              "type": "Integer",
              "description": "Индекс."
            },
            {
              "isRequired": true,
              "param": "child",
              "type": "IGeoObject",
              "description": "Дочерний геообъект."
            }
          ],
          "desciption": "Записывает в коллекцию новый дочерний геообъект.\n\nВозвращает ссылку на себя.",
          "name": "set"
        },
        {
          "return": "GeoObjectCollection",
          "params": [
            {
              "isRequired": true,
              "param": "index",
              "type": "Integer",
              "description": "Индекс геообъекта, с которого начинается удаление."
            },
            {
              "isRequired": true,
              "param": "number",
              "type": "Integer",
              "description": "Количество удаляемых геообъектов."
            }
          ],
          "desciption": "Удаляет геообъекты из коллекции. Если необходимо, вставляет на их место другие.\nОбъекты, которые будут вставлены вместо удаляемых, передаются как дополнительные параметры\n(после параметра number).\n\nВозвращает коллекция удаленных геообъектов.",
          "name": "splice"
        }
      ]
    }
  },
  {
    "name": "map.ZoomRange",
    "url": "map.ZoomRange",
    "def": {
      "name": "map.ZoomRange",
      "description": "Расширяет\n            IEventEmitter.\n\nМенеджер коэффициентов масштабирования карты.\nУ каждой карты уже есть свой менеджер коэффициентов масштабирования, доступный как\nmap.zoomRange. Не инстанцируйте экземпляры этого класса без необходимости.\n\nСм.: Map.zoomRange \n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "map",
          "type": "Map",
          "description": "Карта."
        },
        {
          "isRequired": true,
          "param": "constraints",
          "type": "Number[]",
          "description": "Массив, содержащий минимальный и максимальный зум карты."
        }
      ],
      "inherits": [
        "IEventEmitter"
      ],
      "methods": [
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": true,
              "param": "coords",
              "type": ""
            }
          ],
          "desciption": "Определяет доступный в указанной точке диапазон уровней масштабирования.\nВозвращает объект-promise, который будет подтверждён и получит в качестве\nпараметра массив из двух чисел - максимальный и минимальный уровень\nмасштабирования в данной точке.\n\nВозвращает объект-promise.",
          "name": "get"
        },
        {
          "return": "Number[]",
          "desciption": "Возвращает текущее (последнее полученное) значение\nминимального и максимального уровня масштабирования карты.",
          "name": "getCurrent"
        }
      ]
    }
  },
  {
    "name": "MapEvent",
    "url": "MapEvent",
    "def": {
      "name": "MapEvent",
      "description": "Расширяет\n            Event.\n\nОбъект, описывающий произошедшее над картой событие.\nИмена полей, доступных через метод Event.get:\n\n    coords - географические координаты точки, в которой произошло событие;\n    globalPixels - координаты события в глобальных пикселях от левого верхнего угла мира;\n    pagePixels - координаты события в пикселях от левого верхнего угла страницы\n    (также доступно под именем position);\n    clientPixels - координаты события в пикселях от левого верхнего угла окна браузера;\n    domEvent - исходное DOM-событие (в виде объекта DomEvent), если оно имеется.\n\n\nКонструктор | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "originalEvent",
          "type": "Object",
          "description": "Данные, связанные с событием. Должны содержать поле \"map\" указывающее на карту,\nнад которой произошло событие."
        },
        {
          "isRequired": false,
          "param": "sourceEvent",
          "type": "IEvent",
          "description": "Исходное событие."
        }
      ],
      "inherits": [
        "Event"
      ]
    }
  },
  {
    "name": "map.pane.Manager",
    "url": "map.pane.Manager",
    "def": {
      "name": "map.pane.Manager",
      "description": "Менеджер пейнов карты.\nУ каждой карты уже есть свой менеджер пейнов, доступный как map.panes.\nНе создавайте экземпляры этого класса без необходимости.\nСписок ключей доступных по умолчанию пейнов карты и их zIndex'ы:\n\n    \n        'ground': pane.MovablePane (zIndex: 100) - самый нижний пейн, предназначенный\n        для размещения подложки карты;\n    \n    \n        'areas': pane.MovablePane (zIndex: 200) - пейн площадных объектов, таких как\n        многоугольники;\n    \n    \n        'shadows': pane.MovablePane (zIndex: 300) - пейн теней объектов карты,\n        находящихся выше;\n    \n    \n        'places': pane.MovablePane (zIndex: 400) - пейн точечных объектов, таких как\n        метки;\n    \n    \n        'events': pane.EventsPane (zIndex: 500) - пейн, предназначенный для слушания\n        событий карты;\n    \n    \n        'overlaps': pane.MovablePane (zIndex: 600) - пейн для объектов не теребующих,\n        использования активных областей для реализации своей интерактивности;\n    \n    \n        'balloon': pane.MovablePane (zIndex: 700) - пейн балуна;\n    \n    \n        'outerBalloon': pane.MovablePane (zIndex: 800) - внешний пейн балуна;\n    \n    \n        'controls': pane.StaticPane (zIndex: 900) - пейн элементов управления карты;\n    \n    \n        'copyrights': pane.StaticPane (zIndex: 1000) - пейн копирайтов;\n    \n    \n        'hint': pane.StaticPane (zIndex: 1100) - пейн хинта;\n    \n    \n        'outerHint': pane.StaticPane (zIndex: 1200) - внешний пейн хинта.\n    \n\n\nСм.: Map.panes \n\nКонструктор | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "map",
          "type": "Map",
          "description": "Карта."
        }
      ],
      "methods": [
        {
          "params": [
            {
              "isRequired": true,
              "param": "key",
              "type": "String",
              "description": "Ключ добавляемого пейна."
            },
            {
              "isRequired": true,
              "param": "pane",
              "type": "IPane",
              "description": "Добавляемый пейн."
            }
          ],
          "desciption": "Добавляет новый пейн в карту.\nКлюч добавляемого пейна должен быть уникальным в рамках текущего набора ключей пейнов карты.",
          "name": "append"
        },
        {
          "desciption": "Деструктор.",
          "name": "destroy"
        },
        {
          "return": "IPane|null",
          "params": [
            {
              "isRequired": true,
              "param": "key",
              "type": "String",
              "description": "Ключ пейна."
            }
          ],
          "desciption": "Возвращает пейн карты с заданным ключом, либо null, если такой пейн в данной карте отсутствует.",
          "name": "get"
        },
        {
          "return": "String",
          "desciption": "Принимает в качестве аргументов ключи пейнов карты и возвращает ключ самого нижнего пейна из переданного набора.\nЕсли ни один ключ не передан, то будет произведен поиск по всему набору пейнов карты.\n\nВозвращает ключ самого нижнего пейна карты.",
          "name": "getLower"
        },
        {
          "return": "String",
          "desciption": "Принимает в качестве аргументов ключи пейнов карты и возвращает ключ самого верхнего пейна из переданного набора.\nЕсли ни один ключ не передан, то будет произведен поиск по всему набору пейнов карты.\n\nВозвращает ключ самого верхнего пейна карты.",
          "name": "getUpper"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "key",
              "type": "String",
              "description": "Ключ добавляемого пейна."
            },
            {
              "isRequired": true,
              "param": "pane",
              "type": "IPane",
              "description": "Добавляемый пейн."
            },
            {
              "isRequired": true,
              "param": "referenceKey",
              "type": "String",
              "description": "Ключ пейна, перед которым осуществляется вставка."
            }
          ],
          "desciption": "Вставляет новый пейн перед другим пейном карты.\nКлюч добавляемого пейна должен быть уникальным в рамках текущего набора ключей пейнов карты.",
          "name": "insertBefore"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "pane",
              "type": "IPane",
              "description": "Удаляемый пейн."
            }
          ],
          "desciption": "Удаляет пейн из карты.",
          "name": "remove"
        }
      ]
    }
  },
  {
    "name": "MapType",
    "url": "MapType",
    "def": {
      "name": "MapType",
      "description": "Тип карты.\n\nКонструктор | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "name",
          "type": "String",
          "description": "Название типа."
        },
        {
          "isRequired": true,
          "param": "layers",
          "type": "Function[]|String[]",
          "description": "Массив, содержащий конструкторы слоев или ключи."
        }
      ],
      "methods": [
        {
          "return": "Function[]|String[]",
          "desciption": "Возвращает список слоев данного типа карты - массив конструкторов или ключей для слоев.",
          "name": "getLayers"
        },
        {
          "return": "String",
          "params": [
            {
              "isRequired": true,
              "param": "map",
              "type": ""
            }
          ],
          "desciption": "Возвращает название типа карты.",
          "name": "getName"
        }
      ]
    }
  },
  {
    "name": "mapType.storage",
    "url": "mapType.storage",
    "def": {
      "name": "mapType.storage",
      "description": "Статический объект.\n\n\n            Экземпляр класса  util.Storage\n        \n\nХранилище типов карты.\n\nМетоды ",
      "hasCtor": false
    }
  },
  {
    "name": "meta",
    "url": "meta",
    "def": {
      "name": "meta",
      "description": "Статический объект.\n\nИнформация об API.\n\nПоля ",
      "hasCtor": false,
      "props": [
        {
          "type": "String",
          "description": "Порядок координат, который используется в API. Возможные значения:\n\n\n\n\n\nЗадается GET-параметром \"coordorder\" при подключении API.\n\n\nПодробнее про параметры подключения API",
          "name": "coordinatesOrder"
        },
        {
          "type": "String",
          "description": "Двузначный код страны. Возвращается в формате ISO 3166-1.\n\n\nЗадается GET-параметром \"lang\" при подключении API.\n\n\nПодробнее про параметры подключения API",
          "name": "countryCode"
        },
        {
          "type": "String",
          "description": "Двузначный код языка. Возвращается  в формате ISO 639-1.\n\n\nЗадается GET-параметром \"lang\" при подключении API.\n\n\nПодробнее про параметры подключения API",
          "name": "languageCode"
        },
        {
          "type": "String",
          "description": "Режим работы API Яндекс.Карт. Возможные значения:\n\n\n\n\n\nЗадается GET-параметром \"mode\" при подключении API.\n\n\nПодробнее про параметры подключения API",
          "name": "mode"
        },
        {
          "type": "Object",
          "description": "Ссылка на пространство имен API Яндекс.Карт. \n\n\nИмеет значение независимо от значения параметра \"ns\" при подключении API.",
          "name": "ns"
        },
        {
          "type": "String",
          "description": "Версия API Яндекс.Карт.",
          "name": "version"
        }
      ]
    }
  },
  {
    "name": "modules",
    "url": "modules",
    "def": {
      "name": "modules",
      "hasCtor": false
    }
  },
  {
    "name": "modules.define",
    "url": "modules.define",
    "def": {
      "name": "modules.define",
      "hasCtor": false
    }
  },
  {
    "name": "modules.isDefined",
    "url": "modules.isDefined",
    "def": {
      "name": "modules.isDefined",
      "hasCtor": false
    }
  },
  {
    "name": "modules.require",
    "url": "modules.require",
    "def": {
      "name": "modules.require",
      "hasCtor": false
    }
  },
  {
    "name": "Monitor",
    "url": "Monitor",
    "def": {
      "name": "Monitor",
      "description": "Объект, отслеживающий изменения определенных полей данных на заданном менеджере данных.\nТакже может использоваться для отслеживания изменений опций.\n\nКонструктор | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "dataManager",
          "type": "IDataManager|IOptionManager",
          "description": "Менеджер данных."
        }
      ],
      "methods": [
        {
          "return": "Monitor",
          "params": [
            {
              "isRequired": true,
              "param": "name",
              "type": "String|String[]",
              "description": "Имя, либо массив имен полей данных, за которыми устанавливается наблюдение."
            },
            {
              "isRequired": true,
              "param": "changeCallback",
              "type": "Function",
              "description": "Обработчик изменения поля данных, либо одного из полей данных группы."
            },
            {
              "isRequired": false,
              "param": "context",
              "type": "Object",
              "description": "Контекст исполнения обработчика изменений данных, а также опциональных обработчиков."
            },
            {
              "isRequired": false,
              "param": "params",
              "type": "Object",
              "description": "Опциональные параметры."
            }
          ],
          "desciption": "Включает наблюдение за определенным полем, либо группой полей данных.\n\nВозвращает ссылку на себя.",
          "name": "add"
        },
        {
          "return": "Monitor",
          "desciption": "Инициирует проверку изменения значений наблюдаемых полей данных.\n\nВозвращает ссылку на себя.",
          "name": "forceChange"
        },
        {
          "return": "Object",
          "params": [
            {
              "isRequired": true,
              "param": "name",
              "type": "String",
              "description": "Имя поля данных."
            }
          ],
          "desciption": "Возвращает текущее значение одного из наблюдаемых полей данных.",
          "name": "get"
        },
        {
          "return": "Monitor",
          "params": [
            {
              "isRequired": true,
              "param": "name",
              "type": "String|String[]",
              "description": "Имя, либо массив имен полей данных, для которых отключается наблюдение."
            }
          ],
          "desciption": "Отключает наблюдение за определенным полем, либо группой полей данных.\n\nВозвращает ссылку на себя.",
          "name": "remove"
        },
        {
          "return": "Monitor",
          "desciption": "Отключает наблюдение для всех полей данных.\n\nВозвращает ссылку на себя.",
          "name": "removeAll"
        }
      ]
    }
  },
  {
    "name": "multiRouter.driving.Path",
    "url": "multiRouter.driving.Path",
    "def": {
      "name": "multiRouter.driving.Path",
      "description": "Примечание.&nbsp;Конструктор класса multiRouter.driving.Path скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nРасширяет\n            IGeoObject.\n\nОтображение пути автомобильного мультимаршрута. Единичный маршрут может содержать\nнесколько путей, каждый путь соединяет две путевые точки.\n\nПоля  | События  | Методы \n\nСоздает отображение пути автомобильного мультимаршрута.",
      "hasCtor": false,
      "inherits": [
        "IGeoObject"
      ],
      "methods": [
        {
          "return": "GeoObjectCollection",
          "desciption": "Возвращает дочернюю коллекцию сегментов, из которых состоит путь.",
          "name": "getSegments"
        }
      ],
      "props": [
        {
          "type": "multiRouter.driving.PathModel",
          "description": "Модель данных пути мультимаршрута.",
          "name": "model"
        },
        {
          "type": "data.Manager",
          "description": "Данные пути мультимаршрута.\nДоступны следующие поля:\n\n    index: Integer - порядковый номер пути в соответствующем маршруте\n    мультимаршрута;\n    type: String - идентификатор типа маршрута, принимающий значение \"driving\" для\n    автомобильных маршрутов;\n    distance: Object - объект с полями text и value, описывающий протяженность\n    пути в метрах;\n    duration: Object - объект с полями text и value, описывающий время проезда\n    пути в секундах;\n    durationInTraffic: Object - объект с полями text и value, описывающий время\n    проезда пути в секундах с учетом пробок;\n    coordinates: Number[][] - координаты всех точек пути;\n    encodedCoordinates: String - строка закодированных в base64 координат всех точек\n    пути.\n",
          "name": "properties"
        }
      ]
    }
  },
  {
    "name": "multiRouter.driving.PathModel",
    "url": "multiRouter.driving.PathModel",
    "def": {
      "name": "multiRouter.driving.PathModel",
      "description": "Примечание.&nbsp;Конструктор класса multiRouter.driving.PathModel скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nРасширяет\n            IEventEmitter.\n\nМодель данных пути автомобильного маршрута. Единичный маршрут может содержать\nнесколько путей, каждый путь соединяет две путевые точки.\n\nПоля  | События  | Методы \n\nСоздает модель данных пути автомобильного маршрута.",
      "hasCtor": false,
      "inherits": [
        "IEventEmitter"
      ],
      "methods": [
        {
          "desciption": "Уничтожает модель.",
          "name": "destroy"
        },
        {
          "return": "multiRouter.driving.SegmentModel[]",
          "desciption": "Возвращает массив сегментов пути.",
          "name": "getSegments"
        },
        {
          "return": "String",
          "desciption": "Возвращает идентификатор типа пути маршрута. Для автомобильных маршрутов\nвозвращается строка \"driving\".",
          "name": "getType"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "pathJson",
              "type": "Object",
              "description": "JSON-данные."
            }
          ],
          "desciption": "Обновляет состояние модели.",
          "name": "update"
        }
      ],
      "props": [
        {
          "type": "data.Manager",
          "description": "Данные пути мультимаршрута.\nДоступны следующие поля:\n\n    index: Integer - порядковый номер пути в соответствующем маршруте\n    мультимаршрута;\n    type: String - идентификатор типа маршрута, принимающий значение \"driving\" для\n    автомобильных маршрутов;\n    distance: Object - объект с полями text и value, описывающий протяженность\n    пути в метрах;\n    duration: Object - объект с полями text и value, описывающий время проезда\n    пути в секундах;\n    durationInTraffic: Object - объект с полями text и value, описывающий время\n    проезда пути в секундах с учетом пробок;\n    coordinates: Number[][] - координаты всех точек пути;\n    encodedCoordinates: String - строка закодированных в base64 координат всех точек\n    пути.\n",
          "name": "properties"
        },
        {
          "type": "multiRouter.driving.RouteModel",
          "description": "Ссылка на родительскую модель маршрута.",
          "name": "route"
        }
      ]
    }
  },
  {
    "name": "multiRouter.driving.Route",
    "url": "multiRouter.driving.Route",
    "def": {
      "name": "multiRouter.driving.Route",
      "description": "Примечание.&nbsp;Конструктор класса multiRouter.driving.Route скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nРасширяет\n            IGeoObject.\n\nОтображение единичного автомобильного маршрута. Мультимаршрут может состоять из\nнескольких единичных маршрутов.\n\nПоля  | События  | Методы \n\nСоздает отображение единичного автомобильного маршрута.",
      "hasCtor": false,
      "inherits": [
        "IGeoObject"
      ],
      "methods": [
        {
          "return": "GeoObjectCollection",
          "desciption": "Возвращает дочернюю коллекцию путей, из которых состоит маршрут.",
          "name": "getPaths"
        }
      ],
      "props": [
        {
          "type": "multiRouter.driving.RouteModel",
          "description": "Модель данных единичного маршрута.",
          "name": "model"
        },
        {
          "type": "data.Manager",
          "description": "Данные маршрута.\nДоступны следующие поля:\n\n    index: Integer - порядковый номер маршрута в мультимаршруте;\n    type: String - идентификатор типа маршрута, принимающий значение \"driving\" для\n    автомобильных маршрутов;\n    blocked: Boolean - признак того, что маршрут содержит перекрытые участки;\n    distance: Object - объект с полями text и value, описывающий протяженность\n    маршрута в метрах;\n    duration: Object - объект с полями text и value, описывающий время проезда\n    маршрута в секундах;\n    durationInTraffic: Object - объект с полями text и value, описывающий время\n    проезда маршрута в секундах с учетом пробок;\n    boundedBy: Number[][] - координаты нижнего и верхнего углов прямоугольника,\n    ограничивающего данный маршрут.\n",
          "name": "properties"
        }
      ]
    }
  },
  {
    "name": "map.layer.Manager",
    "url": "map.layer.Manager",
    "def": {
      "name": "map.layer.Manager",
      "description": "Расширяет\n            ILayer, IMapObjectCollection.\n\nМенеджер слоев карты.\n\nСм.: Map.layers \n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "map",
          "type": "Map",
          "description": "Карта"
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции слоев карты.\nЧерез опции map.layers можно задавать настройки слоев, добавленных на карту.\nОпции слоев хотспотов задаются с префиксом 'hotspotLayer'."
        }
      ],
      "inherits": [
        "ILayer",
        "IMapObjectCollection"
      ],
      "methods": [
        {
          "params": [
            {
              "isRequired": true,
              "param": "callback",
              "type": "Function",
              "description": "Функция-обработчик."
            },
            {
              "isRequired": false,
              "param": "context",
              "type": "Object",
              "description": "Контекст выполнения функции."
            }
          ],
          "desciption": "Перебирает все элементы коллекции, вызывая для каждого функцию-обработчик.",
          "name": "each"
        }
      ]
    }
  },
  {
    "name": "multiRouter.driving.SegmentModel",
    "url": "multiRouter.driving.SegmentModel",
    "def": {
      "name": "multiRouter.driving.SegmentModel",
      "description": "Примечание.&nbsp;Конструктор класса multiRouter.driving.SegmentModel скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nРасширяет\n            IEventEmitter.\n\nМодель данных сегмента пути автомобильного маршрута.\nСегментом автомобильного маршрута называется часть пути от одного манёвра до другого.\n\nПоля  | События  | Методы \n\nСоздает модель данных сегмента пути автомобильного маршрута.",
      "hasCtor": false,
      "inherits": [
        "IEventEmitter"
      ],
      "methods": [
        {
          "desciption": "Уничтожает модель.",
          "name": "destroy"
        },
        {
          "return": "String",
          "desciption": "Возвращает идентификатор типа сегмента. Для автомобильных маршрутов возвращается\nстрока \"driving\".",
          "name": "getType"
        },
        {
          "return": "multiRouter.ViaPointModel[]",
          "desciption": "Возвращает массив транзитных точек сегмента.",
          "name": "getViaPoints"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "segmentJson",
              "type": "Object",
              "description": "JSON-данные."
            }
          ],
          "desciption": "Обновляет состояние модели.",
          "name": "update"
        }
      ],
      "props": [
        {
          "type": "geometry.base.LineString",
          "description": "Геометрия сегмента.",
          "name": "geometry"
        },
        {
          "type": "multiRouter.driving.PathModel",
          "description": "Ссылка на родительскую модель пути.",
          "name": "path"
        },
        {
          "type": "data.Manager",
          "description": "Данные сегмента.\nДоступны следующие поля:\n\n    index: Integer - порядковый номер сегмента во множестве сегментов\n    соответствующего пути маршрута;\n    type: String - идентификатор типа сегмента, принимающий значение \"driving\" для\n    автомобильных сегментов;\n    street: String - текстовое описание улицы, по которой проходит сегмент;\n    action: Object - объект с полями text и value, описывающий завершающий маневр\n    сегмента;\n    distance: Object - объект с полями text и value, описывающий протяженность\n    сегмента в метрах;\n    duration: Object - объект с полями text и value, описывающий время проезда\n    сегмента в секундах;\n    durationInTraffic: Object - объект с полями text и value, описывающий время\n    проезда сегмента в секундах с учетом пробок;\n    text: String - текстовое описание сегмента;\n    viaPoints: Integer[] - индексы транзитных точек, лежащих на данном сегменте;\n    lodIndex: Integer - порядковый номер первой точки сегмента во множестве всех\n    координат соответствующего ему пути маршрута.\n",
          "name": "properties"
        }
      ]
    }
  },
  {
    "name": "multiRouter.EditorAddon",
    "url": "multiRouter.EditorAddon",
    "def": {
      "name": "multiRouter.EditorAddon",
      "description": "Примечание.&nbsp;Конструктор класса multiRouter.EditorAddon скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nРасширяет\n            ICustomizable, IEventEmitter.\n\nАддон редактора мультимаршрута.\n\nПоля  | События  | Методы \n\nСоздает аддон редактора мультимаршрута.",
      "hasCtor": false,
      "inherits": [
        "ICustomizable",
        "IEventEmitter"
      ],
      "methods": [
        {
          "return": "Boolean",
          "desciption": "Возвращает признак того, что редактор в данный момент включен.",
          "name": "isActive"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "state",
              "type": "Object",
              "description": "Начальное состояние редактора."
            }
          ],
          "desciption": "Включает редактор.",
          "name": "start"
        },
        {
          "desciption": "Отключает редактор.",
          "name": "stop"
        }
      ],
      "props": [
        {
          "type": "data.Manager",
          "description": "Менеджер состояния редактора мультимаршрута.",
          "name": "state"
        }
      ]
    }
  },
  {
    "name": "multiRouter.masstransit.Path",
    "url": "multiRouter.masstransit.Path",
    "def": {
      "name": "multiRouter.masstransit.Path",
      "description": "Примечание.&nbsp;Конструктор класса multiRouter.masstransit.Path скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nРасширяет\n            IGeoObject.\n\nОтображение пути мультимаршрута общественного транспорта. Единичный маршрут может \nсодержать несколько путей, каждый путь соединяет две путевые точки.\n\nПоля  | События  | Методы \n\nСоздает отображение пути мультимаршрута общественного транспорта.",
      "hasCtor": false,
      "inherits": [
        "IGeoObject"
      ],
      "methods": [
        {
          "return": "GeoObjectCollection",
          "desciption": "Возвращает дочернюю коллекцию маркеров сегментов.",
          "name": "getSegmentMarkers"
        },
        {
          "return": "GeoObjectCollection",
          "desciption": "Возвращает дочернюю коллекцию сегментов, из которых состоит путь.",
          "name": "getSegments"
        }
      ],
      "props": [
        {
          "type": "multiRouter.masstransit.PathModel",
          "description": "Модель данных пути мультимаршрута.",
          "name": "model"
        },
        {
          "type": "data.Manager",
          "description": "Данные пути мультимаршрута.\nДоступны следующие поля:\n\n    index: Integer - порядковый номер пути в соответствующем маршруте\n    мультимаршрута;\n    type: String - идентификатор типа маршрута, принимающий значение \"masstransit\"\n    для маршрутов общественного транспорта;\n    distance: Object - объект с полями text и value, описывающий протяженность\n    пути в метрах;\n    duration: Object - объект с полями text и value, описывающий время проезда\n    пути в секундах;\n    coordinates: Number[][] - координаты всех точек пути;\n    encodedCoordinates: String - строка закодированных в base64 координат всех точек\n    пути.\n",
          "name": "properties"
        }
      ]
    }
  },
  {
    "name": "multiRouter.masstransit.PathModel",
    "url": "multiRouter.masstransit.PathModel",
    "def": {
      "name": "multiRouter.masstransit.PathModel",
      "description": "Примечание.&nbsp;Конструктор класса multiRouter.masstransit.PathModel скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nРасширяет\n            IEventEmitter.\n\nМодель данных пути маршрута общественного транспорта. Единичный маршрут может\nсодержать несколько путей, каждый путь соединяет две путевые точки.\n\nПоля  | События  | Методы \n\nСоздает модель данных пути маршрута общественного транспорта.",
      "hasCtor": false,
      "inherits": [
        "IEventEmitter"
      ],
      "methods": [
        {
          "desciption": "Уничтожает модель.",
          "name": "destroy"
        },
        {
          "return": "multiRouter.masstransit.SegmentModel[]",
          "desciption": "Возвращает массив сегментов пути.",
          "name": "getSegments"
        },
        {
          "return": "String",
          "desciption": "Возвращает идентификатор типа маршрута. Для маршрутов общественного транспорта\nвозвращается строка \"masstransit\".",
          "name": "getType"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "pathJson",
              "type": "Object",
              "description": "JSON-данные."
            }
          ],
          "desciption": "Обновляет состояние модели.",
          "name": "update"
        }
      ],
      "props": [
        {
          "type": "data.Manager",
          "description": "Данные пути мультимаршрута.\nДоступны следующие поля:\n\n    index: Integer - порядковый номер пути в соответствующем маршруте\n    мультимаршрута;\n    type: String - идентификатор типа маршрута, принимающий значение \"masstransit\"\n    для маршрутов общественного транспорта;\n    distance: Object - объект с полями text и value, описывающий протяженность\n    пути в метрах;\n    duration: Object - объект с полями text и value, описывающий время проезда\n    пути в секундах;\n    coordinates: Number[][] - координаты всех точек пути;\n    encodedCoordinates: String - строка закодированных в base64 координат всех точек\n    пути.\n",
          "name": "properties"
        },
        {
          "type": "multiRouter.masstransit.RouteModel",
          "description": "Ссылка на родительскую модель маршрута.",
          "name": "route"
        }
      ]
    }
  },
  {
    "name": "multiRouter.masstransit.Route",
    "url": "multiRouter.masstransit.Route",
    "def": {
      "name": "multiRouter.masstransit.Route",
      "description": "Примечание.&nbsp;Конструктор класса multiRouter.masstransit.Route скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nРасширяет\n            IGeoObject.\n\nОтображение единичного маршрута общественного транспорта. Мультимаршрут может состоять\nиз нескольких единичных маршрутов.\n\nПоля  | События  | Методы \n\nСоздает отображение единичного маршрута общественного транспорта.",
      "hasCtor": false,
      "inherits": [
        "IGeoObject"
      ],
      "methods": [
        {
          "return": "GeoObjectCollection",
          "desciption": "Возвращает дочернюю коллекцию путей, из которых состоит маршрут.",
          "name": "getPaths"
        }
      ],
      "props": [
        {
          "type": "multiRouter.masstransit.RouteModel",
          "description": "Модель данных единичного маршрута.",
          "name": "model"
        },
        {
          "type": "data.Manager",
          "description": "Данные маршрута.\nДоступны следующие поля:\n\n    index: Integer - порядковый номер маршрута в мультимаршруте;\n    type: String - идентификатор типа маршрута, принимающий значение \"masstransit\"\n    для маршрутов общественного транспорта;\n    distance: Object - объект с полями text и value, описывающий протяженность\n    маршрута в метрах;\n    duration: Object - объект с полями text и value, описывающий время проезда\n    маршрута в секундах;\n    boundedBy: Number[][] - координаты нижнего и верхнего углов прямоугольника,\n    ограничивающего данный маршрут.\n",
          "name": "properties"
        }
      ]
    }
  },
  {
    "name": "multiRouter.masstransit.RouteModel",
    "url": "multiRouter.masstransit.RouteModel",
    "def": {
      "name": "multiRouter.masstransit.RouteModel",
      "description": "Примечание.&nbsp;Конструктор класса multiRouter.masstransit.RouteModel скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nРасширяет\n            IEventEmitter.\n\nМодель данных единичного маршрута общественного транспорта. Мультимаршрут может\nсостоять из нескольких единичных маршрутов.\n\nПоля  | События  | Методы \n\nСоздает модель данных единичного маршрута общественного транспорта.",
      "hasCtor": false,
      "inherits": [
        "IEventEmitter"
      ],
      "methods": [
        {
          "desciption": "Уничтожает модель.",
          "name": "destroy"
        },
        {
          "return": "multiRouter.masstransit.PathModel[]",
          "desciption": "Возвращает массив путей маршрута.",
          "name": "getPaths"
        },
        {
          "return": "String",
          "desciption": "Возвращает идентификатор типа маршрута. Для маршрутов общественного транспорта\nвозвращается строка \"masstransit\".",
          "name": "getType"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "routeJson",
              "type": "Object",
              "description": "JSON-данные."
            }
          ],
          "desciption": "Обновляет состояние модели.",
          "name": "update"
        }
      ],
      "props": [
        {
          "type": "multiRouter.MultiRouteModel",
          "description": "Ссылка на родительскую модель мультимаршрута.",
          "name": "multiRoute"
        },
        {
          "type": "data.Manager",
          "description": "Данные маршрута.\nДоступны следующие поля:\n\n    index: Integer - порядковый номер маршрута в мультимаршруте;\n    type: String - идентификатор типа маршрута, принимающий значение \"masstransit\"\n    для маршрутов общественного транспорта;\n    distance: Object - объект с полями text и value, описывающий протяженность\n    маршрута в метрах;\n    duration: Object - объект с полями text и value, описывающий время проезда\n    маршрута в секундах;\n    boundedBy: Number[][] - координаты нижнего и верхнего углов прямоугольника,\n    ограничивающего данный маршрут.\n",
          "name": "properties"
        }
      ]
    }
  },
  {
    "name": "multiRouter.masstransit.StopModel",
    "url": "multiRouter.masstransit.StopModel",
    "def": {
      "name": "multiRouter.masstransit.StopModel",
      "description": "Примечание.&nbsp;Конструктор класса multiRouter.masstransit.StopModel скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nРасширяет\n            IEventEmitter.\n\nМодель данных остановки транспортного сегмента маршрута общественного транспорта.\n\nПоля  | События \n\nСоздает модель данных остановки транспортного сегмента.",
      "hasCtor": false,
      "inherits": [
        "IEventEmitter"
      ],
      "props": [
        {
          "type": "geometry.base.Point",
          "description": "Геометрия остановки.",
          "name": "geometry"
        },
        {
          "type": "data.Manager",
          "description": "Данные остановки.\nДоступны следующие поля:\n\n    index: Integer - порядковый номер остановки во множестве остановок\n    соответствующего транспортного сегмента;\n    id: String - идентификатор остановки;\n    name: String - название остановки;\n    lodIndex: Integer - порядковый номер точки остановки во множестве всех\n    координат соответствующего ей пути маршрута.\n",
          "name": "properties"
        },
        {
          "type": "multiRouter.masstransit.TransportSegmentModel",
          "description": "Ссылка на родительскую модель транспортного сегмента.",
          "name": "segment"
        }
      ]
    }
  },
  {
    "name": "multiRouter.masstransit.TransferSegment",
    "url": "multiRouter.masstransit.TransferSegment",
    "def": {
      "name": "multiRouter.masstransit.TransferSegment",
      "description": "Примечание.&nbsp;Конструктор класса multiRouter.masstransit.TransferSegment скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nРасширяет\n            IGeoObject.\n\nОтображение сегмента перехода маршрута общественного транспорта.\nСегментом пути маршрута общественного транспорта называется часть пути от одной пересадки до\nдругой.\n\nПоля  | События  | Методы \n\nСоздает отображение сегмента перехода маршрута общественного транспорта.",
      "hasCtor": false,
      "inherits": [
        "IGeoObject"
      ],
      "props": [
        {
          "type": "multiRouter.masstransit.TransferSegmentModel",
          "description": "Модель данных сегмента.",
          "name": "model"
        },
        {
          "type": "data.Manager",
          "description": "Данные сегмента.\nДоступны следующие поля:\n\n    index: Integer - порядковый номер сегмента во множестве сегментов\n    соответствующего пути маршрута;\n    type: String - идентификатор типа сегмента, принимающий значение \"transfer\" для\n    сегментов переходов;\n    text: String - текстовое описание сегмента;\n    distance: Object - объект с полями text и value, описывающий протяженность\n    сегмента в метрах;\n    duration: Object - объект с полями text и value, описывающий время проезда\n    сегмента в секундах;\n    lodIndex: Integer - порядковый номер первой точки сегмента во множестве всех\n    координат соответствующего ему пути маршрута.\n",
          "name": "properties"
        }
      ]
    }
  },
  {
    "name": "multiRouter.masstransit.TransferSegmentModel",
    "url": "multiRouter.masstransit.TransferSegmentModel",
    "def": {
      "name": "multiRouter.masstransit.TransferSegmentModel",
      "description": "Примечание.&nbsp;Конструктор класса multiRouter.masstransit.TransferSegmentModel скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nРасширяет\n            IEventEmitter.\n\nМодель данных сегмента перехода пути маршрута общественного транспорта.\nСегментом пути маршрута общественного транспорта называется часть пути от одной пересадки до\nдругой.\n\nПоля  | События  | Методы \n\nСоздает модель данных сегмента перехода пути маршрута общественного транспорта.",
      "hasCtor": false,
      "inherits": [
        "IEventEmitter"
      ],
      "methods": [
        {
          "params": [
            {
              "isRequired": true,
              "param": "segmentJson",
              "type": "Object",
              "description": "JSON-данные."
            }
          ],
          "desciption": "Обновляет состояние модели.",
          "name": "destroy"
        },
        {
          "return": "String",
          "desciption": "Возвращает идентификатор типа сегмента. Для сегментов перехода маршрутов\nобщественного транспорта возвращается строка \"transfer\".",
          "name": "getType"
        }
      ],
      "props": [
        {
          "type": "geometry.base.LineString",
          "description": "Геометрия сегмента.",
          "name": "geometry"
        },
        {
          "type": "multiRouter.masstransit.PathModel",
          "description": "Ссылка на родительскую модель пути.",
          "name": "path"
        },
        {
          "type": "data.Manager",
          "description": "Данные сегмента.\nДоступны следующие поля:\n\n    index: Integer - порядковый номер сегмента во множестве сегментов\n    соответствующего пути маршрута;\n    type: String - идентификатор типа сегмента, принимающий значение \"transfer\" для\n    сегментов переходов;\n    text: String - текстовое описание сегмента;\n    distance: Object - объект с полями text и value, описывающий протяженность\n    сегмента в метрах;\n    duration: Object - объект с полями text и value, описывающий время проезда\n    сегмента в секундах;\n    lodIndex: Integer - порядковый номер первой точки сегмента во множестве всех\n    координат соответствующего ему пути маршрута.\n",
          "name": "properties"
        }
      ]
    }
  },
  {
    "name": "multiRouter.masstransit.TransportProperties",
    "url": "multiRouter.masstransit.TransportProperties",
    "def": {
      "name": "multiRouter.masstransit.TransportProperties",
      "description": "Данный класс не имеет конструктора и предназначен для описания объекта данных\nтранспортного средства в транспортном сегменте маршрута общественного транспорта.\n\nКонструктор | Поля ",
      "hasCtor": true,
      "props": [
        {
          "type": "String",
          "description": "Идентификатор транспортного средства.",
          "name": "id"
        },
        {
          "type": "String",
          "description": "Название маршрута транспортного средства.",
          "name": "name"
        },
        {
          "type": "String",
          "description": "Идентификатор вида транспортного средства.\nМожет принимать одно из следующих строковых значений:\n\n    \"bus\" - автобус;\n    \"trolleybus\" - троллейбус;\n    \"tramway\" - трамвай;\n    \"minibus\" - маршрутное такси;\n    \"underground\" - метро;\n    \"suburban\" - электричка.\n",
          "name": "type"
        }
      ]
    }
  },
  {
    "name": "multiRouter.masstransit.TransportSegment",
    "url": "multiRouter.masstransit.TransportSegment",
    "def": {
      "name": "multiRouter.masstransit.TransportSegment",
      "description": "Примечание.&nbsp;Конструктор класса multiRouter.masstransit.TransportSegment скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nРасширяет\n            IGeoObject.\n\nОтображение транспортного сегмента маршрута общественного транспорта.\nСегментом пути маршрута общественного транспорта называется часть пути от одной пересадки до\nдругой.\n\nПоля  | События  | Методы \n\nСоздает отображение транспортного сегмента маршрута общественного транспорта.",
      "hasCtor": false,
      "inherits": [
        "IGeoObject"
      ],
      "props": [
        {
          "type": "multiRouter.masstransit.TransportSegmentModel",
          "description": "Модель данных сегмента.",
          "name": "model"
        },
        {
          "type": "data.Manager",
          "description": "Данные сегмента.\nДоступны следующие поля:\n\n    index: Integer - порядковый номер сегмента во множестве сегментов\n    соответствующего пути маршрута;\n    type: String - идентификатор типа сегмента, принимающий значение \"transport\" для\n    транспортных сегментов;\n    text: String - текстовое описание сегмента;\n    transports: multiRouter.masstransit.TransportProperties[] - массив,\n    описывающий конкретные транспортные средства, с помощью которых возможно перемещение\n    по данному сегменту;\n    stops: Object - описание остановок в формате GeoJson:FeatureCollection;\n    distance: Object - объект с полями text и value, описывающий протяженность\n    сегмента в метрах;\n    duration: Object - объект с полями text и value, описывающий время проезда\n    сегмента в секундах;\n    lodIndex: Integer - порядковый номер первой точки сегмента во множестве всех\n    координат соответствующего ему пути маршрута.\n",
          "name": "properties"
        }
      ]
    }
  },
  {
    "name": "multiRouter.masstransit.TransportSegmentModel",
    "url": "multiRouter.masstransit.TransportSegmentModel",
    "def": {
      "name": "multiRouter.masstransit.TransportSegmentModel",
      "description": "Примечание.&nbsp;Конструктор класса multiRouter.masstransit.TransportSegmentModel скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nРасширяет\n            IEventEmitter.\n\nМодель данных транспортного сегмента пути маршрута общественного транспорта.\nСегментом пути маршрута общественного транспорта называется часть пути от одной пересадки до\nдругой.\n\nПоля  | События  | Методы \n\nСоздает модель данных транспортного сегмента пути маршрута общественного транспорта.",
      "hasCtor": false,
      "inherits": [
        "IEventEmitter"
      ],
      "methods": [
        {
          "desciption": "Уничтожает модель.",
          "name": "destroy"
        },
        {
          "return": "multiRouter.masstransit.StopModel[]",
          "desciption": "Возвращает массив остановок транспортного сегмента.",
          "name": "getStops"
        },
        {
          "return": "String",
          "desciption": "Возвращает идентификатор типа сегмента. Для транспортных сегментов маршрутов\nобщественного транспорта возвращается строка \"transport\".",
          "name": "getType"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "segmentJson",
              "type": "Object",
              "description": "JSON-данные."
            }
          ],
          "desciption": "Обновляет состояние модели.",
          "name": "update"
        }
      ],
      "props": [
        {
          "type": "geometry.base.LineString",
          "description": "Геометрия сегмента.",
          "name": "geometry"
        },
        {
          "type": "multiRouter.masstransit.PathModel",
          "description": "Ссылка на родительскую модель пути.",
          "name": "path"
        },
        {
          "type": "data.Manager",
          "description": "Данные сегмента.\nДоступны следующие поля:\n\n    index: Integer - порядковый номер сегмента во множестве сегментов\n    соответствующего пути маршрута;\n    type: String - идентификатор типа сегмента, принимающий значение \"transport\" для\n    транспортных сегментов;\n    text: String - текстовое описание сегмента;\n    transports: multiRouter.masstransit.TransportProperties[] - массив,\n    описывающий конкретные транспортные средства, с помощью которых возможно перемещение\n    по данному сегменту;\n    stops: Object - описание остановок в формате GeoJson:FeatureCollection;\n    distance: Object - объект с полями text и value, описывающий протяженность\n    сегмента в метрах;\n    duration: Object - объект с полями text и value, описывающий время проезда\n    сегмента в секундах;\n    lodIndex: Integer - порядковый номер первой точки сегмента во множестве всех\n    координат соответствующего ему пути маршрута.\n",
          "name": "properties"
        }
      ]
    }
  },
  {
    "name": "multiRouter.masstransit.WalkSegment",
    "url": "multiRouter.masstransit.WalkSegment",
    "def": {
      "name": "multiRouter.masstransit.WalkSegment",
      "description": "Примечание.&nbsp;Конструктор класса multiRouter.masstransit.WalkSegment скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nРасширяет\n            IGeoObject.\n\nОтображение пешего сегмента маршрута общественного транспорта.\nСегментом пути маршрута общественного транспорта называется часть пути от одной пересадки до\nдругой.\n\nПоля  | События  | Методы \n\nСоздает отображение пешего сегмента маршрута общественного транспорта.",
      "hasCtor": false,
      "inherits": [
        "IGeoObject"
      ],
      "props": [
        {
          "type": "multiRouter.masstransit.WalkSegmentModel",
          "description": "Модель данных сегмента.",
          "name": "model"
        },
        {
          "type": "data.Manager",
          "description": "Данные сегмента.\nДоступны следующие поля:\n\n    index: Integer - порядковый номер сегмента во множестве сегментов\n    соответствующего пути маршрута;\n    type: String - идентификатор типа сегмента, принимающий значение \"walk\" для\n    пеших сегментов;\n    text: String - текстовое описание сегмента;\n    distance: Object - объект с полями text и value, описывающий протяженность\n    сегмента в метрах;\n    duration: Object - объект с полями text и value, описывающий время проезда\n    сегмента в секундах;\n    lodIndex: Integer - порядковый номер первой точки сегмента во множестве всех\n    координат соответствующего ему пути маршрута.\n",
          "name": "properties"
        }
      ]
    }
  },
  {
    "name": "multiRouter.masstransit.WalkSegmentModel",
    "url": "multiRouter.masstransit.WalkSegmentModel",
    "def": {
      "name": "multiRouter.masstransit.WalkSegmentModel",
      "description": "Примечание.&nbsp;Конструктор класса multiRouter.masstransit.WalkSegmentModel скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nРасширяет\n            IEventEmitter.\n\nМодель данных пешего сегмента пути маршрута общественного транспорта.\nСегментом пути маршрута общественного транспорта называется часть пути от одной пересадки до\nдругой.\n\nПоля  | События  | Методы \n\nСоздает модель данных пешего сегмента пути маршрута общественного транспорта.",
      "hasCtor": false,
      "inherits": [
        "IEventEmitter"
      ],
      "methods": [
        {
          "desciption": "Уничтожает модель.",
          "name": "destroy"
        },
        {
          "return": "String",
          "desciption": "Возвращает идентификатор типа сегмента. Для пеших сегментов маршрутов\nобщественного транспорта возвращается строка \"walk\".",
          "name": "getType"
        }
      ],
      "props": [
        {
          "type": "geometry.base.LineString",
          "description": "Геометрия сегмента.",
          "name": "geometry"
        },
        {
          "type": "multiRouter.masstransit.PathModel",
          "description": "Ссылка на родительскую модель пути.",
          "name": "path"
        },
        {
          "type": "data.Manager",
          "description": "Данные сегмента.\nДоступны следующие поля:\n\n    index: Integer - порядковый номер сегмента во множестве сегментов\n    соответствующего пути маршрута;\n    type: String - идентификатор типа сегмента, принимающий значение \"walk\" для\n    пеших сегментов;\n    text: String - текстовое описание сегмента;\n    distance: Object - объект с полями text и value, описывающий протяженность\n    сегмента в метрах;\n    duration: Object - объект с полями text и value, описывающий время проезда\n    сегмента в секундах;\n    lodIndex: Integer - порядковый номер первой точки сегмента во множестве всех\n    координат соответствующего ему пути маршрута.\n",
          "name": "properties"
        }
      ]
    }
  },
  {
    "name": "multiRouter.MultiRoute",
    "url": "multiRouter.MultiRoute",
    "def": {
      "name": "multiRouter.MultiRoute",
      "description": "Расширяет\n            IGeoObject.\n\nМультимаршрут на карте. Позволяет отображать на карте маршрут и несколько альтернатив\nк нему. Предоставляет интерфейс выбора активного маршрута.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "model",
          "type": "multiRouter.MultiRouteModel|IMultiRouteModelJson",
          "description": "Модель данных мультимаршрута,\nлибо объект описания модели. В случае передачи объекта описания, модель на его основе\nсоздается автоматически."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции мультимаршрута. Также для задания опций составных частей\nмультимаршрута доступны следующие префиксы:\n\n    wayPoint - опции путевых точек;\n    wayPointStart - опции отображения начальной путевой точки;\n    wayPointFinish - опции отображения конечной путевой точки;\n    viaPoint - опции транзитных точек;\n    pin - опции точечных маркеров на маршруте;\n    editor - опции редактора мультимаршрута (см. multiRouter.Editor).\n\nОпции единичных маршрутов в рамках мультимаршрута задаются с помощью префиксов:\n\n    route - опции маршрутов в том числе неактивных;\n    routeActive - опции активного маршрута.\n\nПричем опции заданные с префиксом \"routeActive\" более приоритетны по отношению к опциям с\nпрефиксом \"route\".\nДля задания опций составных частей маршрутов общественного транспорта доступны следующие\nпрефиксы.\n\n    routeMarker - опции меток сегментов маршрута;\n    routeWalkMarker - опции меток пеших сегментов маршрута;\n    routeTransferMarker - опции меток сегментов переходов;\n    routeTransportMarker - опции меток транспортных сегментов маршрута;\n    routeWalkSegment - опции линий пеших сегментов маршрута;\n    routeTransferSegment - опции линий сегментов переходов;\n    routeTransportSegment - опции линий транспортных сегментов маршрута;\n\nТакже данные префиксы доступны в \"routeActive*\" варианте."
        }
      ],
      "inherits": [
        "IGeoObject"
      ],
      "methods": [
        {
          "return": "multiRouter.driving.Route|multiRouter.masstransit.Route|null",
          "desciption": "Возвращает активный маршрут.",
          "name": "getActiveRoute"
        },
        {
          "return": "Number[][]|null",
          "desciption": "Возвращает географические координаты области, охватывающей мультимаршрут.",
          "name": "getBounds"
        },
        {
          "return": "Number[][]|null",
          "desciption": "Возвращает глобальные пиксельные координаты области, охватывающей мультимаршрут.",
          "name": "getPixelBounds"
        },
        {
          "return": "GeoObjectCollection",
          "desciption": "Возвращает дочернюю коллекцию единичных маршрутов мультимаршрута.",
          "name": "getRoutes"
        },
        {
          "return": "GeoObjectCollection",
          "desciption": "Возвращает дочернюю коллекцию транзитных точек мультимаршрута.",
          "name": "getViaPoints"
        },
        {
          "return": "GeoObjectCollection",
          "desciption": "Возвращает дочернюю коллекцию путевых точек мультимаршрута.",
          "name": "getWayPoints"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "route",
              "type": "multiRouter.driving.Route|multiRouter.masstransit.Route|null",
              "description": "Активируемый\nмаршрут."
            }
          ],
          "desciption": "Устанавливает активный маршрут. При этом предыдущий активный маршрут деактивируется, и\nгенерируется событие multiRouter.MultiRoute.activeroutechange.",
          "name": "setActiveRoute"
        }
      ],
      "props": [
        {
          "type": "multiRouter.EditorAddon",
          "description": "Редактор мультимаршрута.",
          "name": "editor"
        },
        {
          "type": "multiRouter.MultiRouteModel",
          "description": "Модель данных мультимаршрута.",
          "name": "model"
        }
      ]
    }
  },
  {
    "name": "multiRouter.MultiRouteModel",
    "url": "multiRouter.MultiRouteModel",
    "def": {
      "name": "multiRouter.MultiRouteModel",
      "description": "Расширяет\n            IEventEmitter.\n\nМодель данных мультимаршрута.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "referencePoints",
          "type": "IMultiRouteReferencePoint[]",
          "description": "Описание опорных точек мультимаршрута."
        },
        {
          "isRequired": false,
          "param": "params",
          "type": "IMultiRouteParams",
          "description": "Параметры маршрутизации."
        }
      ],
      "inherits": [
        "IEventEmitter"
      ],
      "methods": [
        {
          "desciption": "Уничтожает модель.",
          "name": "destroy"
        },
        {
          "return": "(multiRouter.WayPointModel|multiRouter.ViaPointModel)[]",
          "desciption": "Возвращает объединенный массив\nмоделей транзитных и путевых точек в порядке, соответствующем порядку следования\nсоответствующих опорных точек.",
          "name": "getAllPoints"
        },
        {
          "return": "Object",
          "desciption": "Возвращает JSON-данные модели мультимаршрута.",
          "name": "getJson"
        },
        {
          "return": "IMultiRouteParams",
          "desciption": "Возвращает объект, описывающий текущие значения параметров\nмаршрутизации.",
          "name": "getParams"
        },
        {
          "return": "(multiRouter.WayPointModel|multiRouter.ViaPointModel)[]",
          "desciption": "Устаревшее название метода multiRouter.MultiRouteModel.getAllPoints. Не рекомендуется\nк использованию.\n\nВозвращает объединенный массив\nмоделей транзитных и путевых точек в порядке, соответствующем порядку следования\nсоответствующих опорных точек.",
          "name": "getPoints"
        },
        {
          "return": "Object",
          "desciption": "Возвращает объект, содержащий следующие поля:\n\n    way: Integer[] - индексы опорных точек, соответствующие множеству путевых точек модели;\n    via: Integer[] - индексы опорных точек, соответствующие множеству транзитных точек модели.\n",
          "name": "getReferencePointIndexes"
        },
        {
          "return": "IMultiRouteReferencePoint[]",
          "desciption": "Возвращает массив опорных точек мультимаршрута.",
          "name": "getReferencePoints"
        },
        {
          "return": "multiRouter.driving.RouteModel[]|multiRouter.masstransit.RouteModel[]",
          "desciption": "Возвращает массив моделей дочерних маршрутов.",
          "name": "getRoutes"
        },
        {
          "return": "multiRouter.ViaPointModel[]",
          "desciption": "Возвращает массив моделей дочерних транзитных точек.",
          "name": "getViaPoints"
        },
        {
          "return": "multiRouter.WayPointModel[]",
          "desciption": "Возвращает массив моделей дочерних путевых точек.",
          "name": "getWayPoints"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "params",
              "type": "IMultiRouteParams",
              "description": "Параметры маршрутизации."
            },
            {
              "isRequired": false,
              "param": "extend",
              "type": "Boolean",
              "description": "Позволяет изменить лишь часть параметров, а значения не\nпереданных оставить прежним."
            },
            {
              "isRequired": true,
              "param": "clearRequests",
              "type": ""
            }
          ],
          "desciption": "Задает параметры маршрутизации.",
          "name": "setParams"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "referencePoints",
              "type": "IMultiRouteReferencePoint[]",
              "description": "Массив опорных точек."
            },
            {
              "isRequired": false,
              "param": "viaIndexes",
              "type": "Integer[]",
              "description": "Индексы транзитных точек в массиве опорных точек."
            },
            {
              "isRequired": true,
              "param": "clearRequests",
              "type": ""
            }
          ],
          "desciption": "Задает опорные точки мультимаршрута.",
          "name": "setReferencePoints"
        }
      ],
      "props": [
        {
          "type": "data.Manager",
          "description": "Данные мультимаршрута.",
          "name": "properties"
        }
      ]
    }
  },
  {
    "name": "multiRouter.ViaPoint",
    "url": "multiRouter.ViaPoint",
    "def": {
      "name": "multiRouter.ViaPoint",
      "description": "Примечание.&nbsp;Конструктор класса multiRouter.ViaPoint скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nРасширяет\n            IGeoObject.\n\nОтображение транзитной точки. Транзитные точки не подразумевают остановку. Таким\nобразом, при прохождении через транзитную точку, сегмент пути маршрута не прерывается.\n\nПоля  | События  | Методы \n\nСоздает отображение транзитной точки.",
      "hasCtor": false,
      "inherits": [
        "IGeoObject"
      ],
      "props": [
        {
          "type": "multiRouter.ViaPointModel",
          "description": "Модель данных транзитной точки.",
          "name": "model"
        },
        {
          "type": "data.Manager",
          "description": "Данные транзитной точки мультимаршрута.\nДоступны следующие поля:\n\n    index: Integer - порядковый номер точки;\n    lodIndex: Integer - порядковый номер транзитной точки во множестве всех координат\n    соответствующего ей пути маршрута.\n",
          "name": "properties"
        }
      ]
    }
  },
  {
    "name": "multiRouter.ViaPointModel",
    "url": "multiRouter.ViaPointModel",
    "def": {
      "name": "multiRouter.ViaPointModel",
      "description": "Примечание.&nbsp;Конструктор класса multiRouter.ViaPointModel скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nРасширяет\n            IEventEmitter.\n\nМодель данных транзитной точки мультимаршрута. Транзитные точки не подразумевают\nостановку. Таким образом, при прохождении через транзитную точку, сегмент пути маршрута не\nпрерывается.\n\nПоля  | События  | Методы \n\nСоздает модель данных транзитной точки мультимаршрута.",
      "hasCtor": false,
      "inherits": [
        "IEventEmitter"
      ],
      "methods": [
        {
          "desciption": "Уничтожает модель.",
          "name": "destroy"
        },
        {
          "return": "Object",
          "desciption": "Возвращает соответствующую опорную точку.",
          "name": "getReferencePoint"
        },
        {
          "return": "Integer",
          "desciption": "Возвращает индекс соответствующей опорной точки во множестве опорных точек\nродительского мультимаршрута.",
          "name": "getReferencePointIndex"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "referencePoint",
              "type": "Object",
              "description": "Описание опорной точки."
            }
          ],
          "desciption": "Задает описание соответствующей опорной точки.\nОпорная точка может быть задана одним из следующих способов:\n\n    строка, содержащая почтовый адрес опорной точки;\n    массив, содержащий широту и долготу опорной точки;\n    геометрия geometry.Point, описывающая опорную точку.\n",
          "name": "setReferencePoint"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "viaPointJson",
              "type": "Object",
              "description": "JSON-данные."
            }
          ],
          "desciption": "Обновляет модель новыми данными.",
          "name": "update"
        }
      ],
      "props": [
        {
          "type": "geometry.base.Point",
          "description": "Геометрия транзитной точки мультимаршрута.",
          "name": "geometry"
        },
        {
          "type": "multiRouter.MultiRouteModel",
          "description": "Ссылка на родительскую модель мультимаршрута.",
          "name": "multiRoute"
        },
        {
          "type": "data.Manager",
          "description": "Данные транзитной точки мультимаршрута.\nДоступны следующие поля:\n\n    index: Integer - порядковый номер точки;\n    lodIndex: Integer - порядковый номер транзитной точки во множестве всех координат\n    соответствующего ей пути маршрута.\n",
          "name": "properties"
        }
      ]
    }
  },
  {
    "name": "multiRouter.WayPoint",
    "url": "multiRouter.WayPoint",
    "def": {
      "name": "multiRouter.WayPoint",
      "description": "Примечание.&nbsp;Конструктор класса multiRouter.WayPoint скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nРасширяет\n            IGeoObject.\n\nОтображение путевой точки. Путевые точки подразумевают остановку и делят маршрут на\nт.н. пути.\n\nПоля  | События  | Методы \n\nСоздает отображение путевой точки.",
      "hasCtor": false,
      "inherits": [
        "IGeoObject"
      ],
      "props": [
        {
          "type": "multiRouter.WayPointModel",
          "description": "Модель данных путевой точки.",
          "name": "model"
        },
        {
          "type": "data.Manager",
          "description": "Данные путевой точки мультимаршрута.\nДоступны следующие поля:\n\n    index: Integer - порядковый номер точки;\n    request: String - строка запроса соответствующего точке запроса;\n    address: String - строка почтового адреса точки;\n    description: String - описание точки;\n    name: String - название точки.\n",
          "name": "properties"
        }
      ]
    }
  },
  {
    "name": "multiRouter.WayPointModel",
    "url": "multiRouter.WayPointModel",
    "def": {
      "name": "multiRouter.WayPointModel",
      "description": "Примечание.&nbsp;Конструктор класса multiRouter.WayPointModel скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nРасширяет\n            IEventEmitter.\n\nМодель данных путевой точки мультимаршрута. Путевые точки подразумевают остановку и\nделят маршрут на т.н. пути.\n\nПоля  | События  | Методы \n\nСоздает модель данных путевой точки мультимаршрута.",
      "hasCtor": false,
      "inherits": [
        "IEventEmitter"
      ],
      "methods": [
        {
          "desciption": "Уничтожает модель.",
          "name": "destroy"
        },
        {
          "return": "Object",
          "desciption": "Возвращает соответствующую опорную точку.",
          "name": "getReferencePoint"
        },
        {
          "return": "Integer",
          "desciption": "Возвращает индекс соответствующей опорной точки во множестве опорных точек\nродительского мультимаршрута.",
          "name": "getReferencePointIndex"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "referencePoint",
              "type": "Object",
              "description": "Описание опорной точки."
            }
          ],
          "desciption": "Задает описание соответствующей опорной точки.\nОпорная точка может быть задана одним из следующих способов:\n\n    строка, содержащая почтовый адрес опорной точки;\n    массив, содержащий широту и долготу опорной точки;\n    геометрия geometry.Point, описывающая опорную точку.\n",
          "name": "setReferencePoint"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "wayPointJson",
              "type": "Object",
              "description": "JSON-данные."
            }
          ],
          "desciption": "Обновляет модель новыми данными.",
          "name": "update"
        }
      ],
      "props": [
        {
          "type": "geometry.base.Point",
          "description": "Геометрия путевой точки мультимаршрута.",
          "name": "geometry"
        },
        {
          "type": "multiRouter.MultiRouteModel",
          "description": "Ссылка на родительскую модель мультимаршрута.",
          "name": "multiRoute"
        },
        {
          "type": "data.Manager",
          "description": "Данные путевой точки мультимаршрута.\nДоступны следующие поля:\n\n    index: Integer - порядковый номер точки;\n    request: String - строка запроса соответствующего точке запроса;\n    address: String - строка почтового адреса точки;\n    description: String - описание точки;\n    name: String - название точки.\n",
          "name": "properties"
        }
      ]
    }
  },
  {
    "name": "ObjectManager",
    "url": "ObjectManager",
    "def": {
      "name": "ObjectManager",
      "description": "Расширяет\n            ICustomizable, IEventEmitter, IGeoObject, IParentOnMap.\n\nМенеджер объектов.\nПозволяет оптимально отображать, кластеризовать и управлять видимостью объектов.\nОбратите внимание, что у объектов, отрисованных на карте через данный менеджер, нельзя включать режимы редактирования и перетаскивания.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции.\n\n    Можно задавать все опции, указанные в описании Clusterer,\n        за исключением опций hasBalloon и hasHint.\n    \n    Опции для кластеров задаются с префиксом cluster.\n        Список опций указан в описании класса ClusterPlacemark;\n    \n    \n        Опции для одиночных объектов задаются с префиксом geoObject.\n        Список опций указан в описании класса Placemark.\n    \n"
        }
      ],
      "inherits": [
        "ICustomizable",
        "IEventEmitter",
        "IGeoObject",
        "IParentOnMap"
      ],
      "methods": [
        {
          "return": "ObjectManager",
          "params": [
            {
              "isRequired": true,
              "param": "objects",
              "type": "Object|Object[]|String",
              "description": "Строка или объект с JSON-описанием объектов.\nJSON-описание объектов строится по следующему принципу (см. пример ниже).\nОбъектом может быть сущность или коллекция сущностей.\nКоллекция сущностей представляет из себя объект с полями:\n\n    type - тип объекта. Значение поля должно быть равно \"FeatureCollection\";\n    features - массив дочерних сущностей коллекции. Дочерние объекты могут быть сущностями или\n    вложенными коллекциями сущностей.\n\nСущность представляет из себя объект с полями:\n\n    id - уникальный идентификатор объекта. Обязательное поле;\n    type - тип объекта. Значение поля должно быть равно \"Feature\";\n    geometry - геометрия объекта. Содержит поля type и coordinates. Значение соответствует,\n    передаваемому в конструктор GeoObject;\n    options - опции геообъекта;\n    properties - данные геообъекта.\n"
            }
          ],
          "desciption": "Возвращает ссылку на менеджер объектов.",
          "name": "add"
        },
        {
          "return": "Number[][]|null",
          "desciption": "Вычисляет границы области в геокоординатах, охватывающей\nвсе объекты в составе менеджера.\n\nВозвращает массив координат области или null, если менеджер\nне добавлен на карту.",
          "name": "getBounds"
        },
        {
          "return": "String|Function|null",
          "params": [
            {
              "isRequired": true,
              "param": "",
              "type": ""
            }
          ],
          "desciption": "Возвращает заданную функцию-фильтр.",
          "name": "getFilter"
        },
        {
          "return": "Object",
          "params": [
            {
              "isRequired": true,
              "param": "id",
              "type": "Object",
              "description": "Идентификатор объекта, для которого нужно получить состояние."
            }
          ],
          "desciption": "Получение информации о текущем состоянии объекта, добавленного в менеджер.\n\nВозвращает объект с полями:\n\n  found - признак, указывающий, существует ли объект с переданным идентификатором. Тип: Boolean;\n  isShown - признак, указывающий, находится ли объект в видимой области карты. Тип: Boolean;\n  cluster - JSON-описание кластера, в который добавлен объект.\n  Помимо обязательных полей, содержит поле properties.geoObjects с массивом\n  объектов, попавших в кластер.\n  Поле возвращается только при включенной кластеризации;\n  isClustered - признак, указывающий, попал ли объект в состав кластера;\n  Поле возвращается только при включенной кластеризации. Тип: Boolean;\n  isFilteredOut - признак, указывающий, прошел ли объект фильтрацию.\n  Если фильтр не задан или объект прошел фильтрацию, значение поля будет false. Тип: Boolean.\n",
          "name": "getObjectState"
        },
        {
          "return": "Number[][]|null",
          "desciption": "Вычисляет границы области в глобальных пиксельных координатах, охватывающей\nвсе объекты в составе менеджера.\n\nВозвращает массив координат области или null, если менеджер\nне добавлен на карту.",
          "name": "getPixelBounds"
        },
        {
          "return": "ObjectManager",
          "params": [
            {
              "isRequired": true,
              "param": "objects",
              "type": "Object|Object[]|String",
              "description": "Строка, объект с JSON-описанием объектов или массив\nидентификаторов удаляемых объектов.\nФормат описания объектов см. в описании метода ObjectManager.add"
            }
          ],
          "desciption": "Возвращает ссылку на менеджер объектов.",
          "name": "remove"
        },
        {
          "return": "ObjectManager",
          "desciption": "Удаление всех объектов из менеджера.\n\nВозвращает ссылку на себя.",
          "name": "removeAll"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "filterFunction",
              "type": "Function|String",
              "description": "функция-фильтр. Получает на вход единичный объект, добавленный\nв ObjectManager. Если функция возвращает true, объект будет обработан. Если false - объект будет\nисключен из дальнейшей обработки.\nТакже в качестве фильтра можно передавать строку.\nВ строке-фильтре доступны следующие ключевые слова:\n\n    options - обращение к опциям объекта;\n    properties - обращение к данным объекта;\n    geometry - обращение к геометрии объекта;\n    id - обращение к идентификатору объекта;\n\nВ качестве фильтра можно указывать выражение, возвращающее true или false."
            }
          ],
          "desciption": "Устанавливает функцию-фильтр для объектов.",
          "name": "setFilter"
        }
      ],
      "props": [
        {
          "type": "objectManager.ClusterCollection",
          "description": "Коллекция кластеров, сгенерированных менеджером.",
          "name": "clusters"
        },
        {
          "type": "objectManager.ObjectCollection",
          "description": "Коллекция объектов, добавленных в слой.",
          "name": "objects"
        }
      ]
    }
  },
  {
    "name": "objectManager.Balloon",
    "url": "objectManager.Balloon",
    "def": {
      "name": "objectManager.Balloon",
      "description": "Расширяет\n            IBalloonManager.\n\nМенеджер балуна коллекций ObjectManager. Позволяет управлять балуном объекта, открывать и скрывать его.\nИспользует внутри себя менеджер балуна карты map.Balloon.\nКоллекции объектов в составе ObjectManager содержат экземпляр этого класса, доступный как myObjectManager.objects.balloon\nи myObjectsLayer.clusters.balloon.\nНе создавайте экземпляры этого класса без необходимости.\n\nСм.: Balloon \n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "collection",
          "type": "IReadOnlyCollection",
          "description": "Коллекция объектов."
        }
      ],
      "inherits": [
        "IBalloonManager"
      ],
      "methods": [
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": false,
              "param": "force",
              "type": "Boolean",
              "description": "Мгновенное закрытие."
            }
          ],
          "desciption": "Закрывает открытый балун.\n\nВозвращает объект-promise.",
          "name": "close"
        },
        {
          "return": "Object|null",
          "desciption": "Возвращает хэш с описание объекта, на котором открыт балун или null, если\nбалун не был открыт.",
          "name": "getData"
        },
        {
          "return": "Boolean",
          "params": [
            {
              "isRequired": true,
              "param": "id",
              "type": "Object",
              "description": "Идентификатор объекта."
            }
          ],
          "desciption": "Метод, определяющий, открыт ли балун на объекте с переданным идентификатором.\n\nВозвращает состояние балуна: открыт/закрыт.",
          "name": "isOpen"
        },
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": true,
              "param": "objectId",
              "type": "Object",
              "description": "Идентификатор объекта, на котором надо открыть балун."
            },
            {
              "isRequired": true,
              "param": "anchorPixelPosition",
              "type": ""
            }
          ],
          "desciption": "Открывает балун на объекте с переданным идентификатором.\n\nВозвращает объект-promise.",
          "name": "open"
        },
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": true,
              "param": "objectData",
              "type": "Object",
              "description": "Хэш с описанием объекта, на котором открыт балун. Соответствует\nописанию объекта, который подается на вход ObjectManager.add."
            }
          ],
          "desciption": "Задаёт новые данные для отображения балуна.\n\nВозвращает объект-promise.",
          "name": "setData"
        }
      ]
    }
  },
  {
    "name": "objectManager.ClusterCollection",
    "url": "objectManager.ClusterCollection",
    "def": {
      "name": "objectManager.ClusterCollection",
      "description": "Расширяет\n            ICustomizable, IEventEmitter.\n\nКоллекция кластеров, сгенерированных ObjectManager.\nКластеры добавляются и удаляются из коллекции автоматически в ходе работы и доступны только на чтение.\nОбъект-кластер представляет из себя JSON-структуру, аналогичную объектам в составе слоя.\nПоля объекта-кластера:\n\n    id - уникальный идентификатор кластера;\n    geometry - описание геометрии кластера;\n    properties - описание данных кластера. В поле properties.geoObjects хранится массив\n    объектов, входящих в состав кластера;\n    options - опции кластера. Необязательное поле.\n\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "ICustomizable",
        "IEventEmitter"
      ],
      "methods": [
        {
          "params": [
            {
              "isRequired": true,
              "param": "callback",
              "type": "Function",
              "description": "Функция-обработчик, в которую передаются объекты коллекции."
            },
            {
              "isRequired": true,
              "param": "context",
              "type": "Object",
              "description": "Контекст исполнения функции-обработчика."
            }
          ],
          "name": "each"
        },
        {
          "return": "Object[]",
          "desciption": "Возвращает массив объектов, содержащихся в коллекции.",
          "name": "getAll"
        },
        {
          "return": "Object|null",
          "params": [
            {
              "isRequired": true,
              "param": "id",
              "type": "String",
              "description": "Идентификатор кластера."
            }
          ],
          "desciption": "Возвращает объект-кластер c указанным идентификатором или null,\nесли такого кластера не существует.",
          "name": "getById"
        },
        {
          "return": "IIterator",
          "desciption": "Возвращает итератор по коллекции.",
          "name": "getIterator"
        },
        {
          "return": "Number",
          "desciption": "Возвращает количество объектов в коллекции.",
          "name": "getLength"
        },
        {
          "return": "ObjectManager",
          "desciption": "Возвращает родительский слой объектов коллекции.\n\nВозвращает ",
          "name": "getObjectManager"
        },
        {
          "return": "objectManager.ObjectCollection",
          "params": [
            {
              "isRequired": true,
              "param": "objectId",
              "type": "String",
              "description": "Идентификатор кластера."
            },
            {
              "isRequired": true,
              "param": "options",
              "type": "Object",
              "description": "Объект с опциями кластера."
            }
          ],
          "desciption": "Возвращает ссылку на себя.",
          "name": "setClusterOptions"
        }
      ],
      "props": [
        {
          "type": "objectManager.Balloon",
          "description": "Балун кластера в составе менеджера.",
          "name": "balloon"
        },
        {
          "type": "option.Manager",
          "description": "Менеджер опций.\nИмена полей, доступных через метод option.Manager.get:\n\n    hasBalloon - флаг наличия у коллекции поля .balloon.\n    Если при клике на кластер не нужно открывать балун, рекомендуется установить эту опцию в значение\n    false, чтобы избежать лишних инициализаций;\n    hasHint - флаг наличия у коллекции поля .hint.\n    Если при наведении на кластер не нужно показывать всплывающую подсказку,\n    рекомендуется установить эту опцию в значение false, чтобы избежать лишних инициализаций;\n    hideIconOnBalloonOpen - cкрывать иконку при открытии балуна. Значение по умолчанию true;\n    openBalloonOnClick - опция, позволяющая запретить открытие балуна при клике на кластер.\n    По умолчанию открытие балуна разрешено;\n    openHintOnHover - опция, позволяющая запретить показ всплывающей подсказки при наведении на кластер.\n    По умолчанию показ хинтов разрешен.\n",
          "name": "options"
        },
        {
          "type": "objectManager.OverlayCollection",
          "description": "Коллекция оверлеев кластеров.\nВсе события, за исключением событий add и remove, пропагируются от коллекции оверлеев\nв коллекцию кластеров.",
          "name": "overlays"
        },
        {
          "type": "data.Manager",
          "description": "Состояние коллекции кластеров. Определяется следующими полями:\n\n    activeObject - JSON-описание объекта, выбранного в балуне кластера.\n",
          "name": "state"
        }
      ]
    }
  },
  {
    "name": "objectManager.Hint",
    "url": "objectManager.Hint",
    "def": {
      "name": "objectManager.Hint",
      "description": "Расширяет\n            IHintManager.\n\nМенеджер хинта объектного слоя. Позволяет управлять хинтом объектного слоя, открывать и скрывать его.\nИспользует внутри себя менеджер хинтов карты map.Hint.\nОбъектные слои содержат экземпляры этого класса, доступные как myObjectManager.objects.hint и\nmyObjectManager.clusters.hint.\nНе создавайте экземпляры этого класса без необходимости.\n\nСм.: Hint \n\nКонструктор | Поля  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "collection",
          "type": "IReadOnlyCollection",
          "description": "Объектный слой."
        }
      ],
      "inherits": [
        "IHintManager"
      ],
      "methods": [
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": false,
              "param": "force",
              "type": "Boolean",
              "description": "Мгновенное закрытие."
            }
          ],
          "desciption": "Скрывает всплывающую подсказку.\n\nВозвращает объект-promise.",
          "name": "close"
        },
        {
          "return": "Object|null",
          "desciption": "Возвращает хэш с описание объекта, на котором показан хинт или null, если\nхинт не был показан.",
          "name": "getData"
        },
        {
          "return": "Boolean",
          "params": [
            {
              "isRequired": true,
              "param": "id",
              "type": "Object",
              "description": "Идентификатор объекта."
            }
          ],
          "desciption": "Метод, определяющий, показана ли всплывающая подсказка на объекте с переданным идентификатором.\n\nВозвращает состояние подсказки: показана/скрыта.",
          "name": "isOpen"
        },
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": true,
              "param": "objectId",
              "type": "Object",
              "description": "Идентификатор объекта, на котором надо открыть подсказку."
            },
            {
              "isRequired": false,
              "param": "position",
              "type": "Number[]",
              "description": "Позиция, на которой надо показать всплывающую подсказку в глобальных\nпиксельных координатах. Если значение не задано, хинт покажется на геометрическом центре объекта."
            }
          ],
          "desciption": "Показывает всплывающую подсказку на объекте с переданным идентификатором.\n\nВозвращает объект-promise.",
          "name": "open"
        },
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": true,
              "param": "objectData",
              "type": "Object",
              "description": "Хэш с описанием объекта, на котором открыт хинт. Соответствует\nописанию объекта, который подается на вход ObjectManager.add."
            }
          ],
          "desciption": "Задаёт новые данные для отображения всплывающей подсказки.\n\nВозвращает объект-promise.",
          "name": "setData"
        }
      ]
    }
  },
  {
    "name": "objectManager.ObjectCollection",
    "url": "objectManager.ObjectCollection",
    "def": {
      "name": "objectManager.ObjectCollection",
      "description": "Расширяет\n            ICollection, ICustomizable.\n\nКоллекция объектов, добавленных в слой.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "ICollection",
        "ICustomizable"
      ],
      "methods": [
        {
          "return": "objectManager.ObjectCollection",
          "params": [
            {
              "isRequired": true,
              "param": "data",
              "type": "Object|Object[]|String",
              "description": "Объекты, добавляемые в слой."
            }
          ],
          "desciption": "Метод полностью дублирует логику ObjectManager.add.\n\nВозвращает ссылку на себя.",
          "name": "add"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "callback",
              "type": "Function",
              "description": "Функция-обработчик, в которую передаются объекты коллекции."
            },
            {
              "isRequired": true,
              "param": "context",
              "type": "Object",
              "description": "Контекст исполнения функции-обработчика."
            }
          ],
          "desciption": "Метод, вызывающий переданную функцию-обработчик для всех элементов коллекции.",
          "name": "each"
        },
        {
          "return": "Object[]",
          "desciption": "Возвращает массив объектов, содержащихся в коллекции.",
          "name": "getAll"
        },
        {
          "return": "Object|null",
          "params": [
            {
              "isRequired": true,
              "param": "id",
              "type": "Number",
              "description": "Идентификатор объекта."
            }
          ],
          "desciption": "Возвращает объект или null, если объекта с переданным id не существует.",
          "name": "getById"
        },
        {
          "return": "Number",
          "desciption": "Возвращает количество объектов в коллекции.",
          "name": "getLength"
        },
        {
          "return": "ObjectManager",
          "desciption": "Возвращает родительский слой объектов коллекции.\n\nВозвращает родительский слой объектов.",
          "name": "getObjectManager"
        },
        {
          "return": "objectManager.ObjectCollection",
          "params": [
            {
              "isRequired": true,
              "param": "data",
              "type": "Object|Object[]|String",
              "description": "Объекты, которые нужно удалить."
            }
          ],
          "desciption": "Метод полностью дублирует логику ObjectManager.remove.\n\nВозвращает ссылку на себя.",
          "name": "remove"
        },
        {
          "return": "objectManager.ObjectCollection",
          "desciption": "Удаляет все элементы коллекции.\n\nВозвращает ссылку на себя.",
          "name": "removeAll"
        },
        {
          "return": "objectManager.ObjectCollection",
          "params": [
            {
              "isRequired": true,
              "param": "objectId",
              "type": "Object",
              "description": "Идентификатор объекта, которому нужно задать опции."
            },
            {
              "isRequired": true,
              "param": "options",
              "type": "Object",
              "description": "Новые опции объекта."
            }
          ],
          "desciption": "Метод, позволяющий динамически обновлять опции объекта.\nМетод следует использовать в случаях, когда вы хотите, чтобы\nновые опции мгновенно применились к отображению объекта на карте.\n\nВозвращает ссылку на себя.",
          "name": "setObjectOptions"
        }
      ],
      "props": [
        {
          "type": "objectManager.Balloon",
          "description": "Балун объекта в составе менеджера.",
          "name": "balloon"
        },
        {
          "type": "objectManager.Hint",
          "description": "Хинт объекта в составе ObjectManager.",
          "name": "hint"
        },
        {
          "type": "option.Manager",
          "description": "Менеджер опций.\nИмена полей, доступных через метод option.Manager.get:\n\n    hasBalloon - флаг наличия у коллекции поля .balloon.\n    Если при клике на объекте не нужно открывать балун, рекомендуется установить эту опцию в значение\n    false, чтобы избежать лишних инициализаций;\n    hasHint - флаг наличия у коллекции поля .hint.\n    Если при наведении на объект не нужно показывать всплывающую подсказку,\n    рекомендуется установить эту опцию в значение false, чтобы избежать лишних инициализаций;\n    hideIconOnBalloonOpen - cкрывать иконку при открытии балуна. Значение по умолчанию true;\n    openBalloonOnClick - показывать балун при клике на объект. Значение по умолчанию true.\n ",
          "name": "options"
        },
        {
          "type": "objectManager.OverlayCollection",
          "description": "Коллекция оверлеев одиночных объектов.\nВсе события, за исключением событий add и remove, пропагируются от коллекции оверлеев\nв коллекцию объектов.",
          "name": "overlays"
        }
      ]
    }
  },
  {
    "name": "objectManager.OverlayCollection",
    "url": "objectManager.OverlayCollection",
    "def": {
      "name": "objectManager.OverlayCollection",
      "description": "Расширяет\n            ICustomizable, IEventEmitter.\n\nКоллекция овелеев.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "ICustomizable",
        "IEventEmitter"
      ],
      "methods": [
        {
          "params": [
            {
              "isRequired": true,
              "param": "callback",
              "type": "Function",
              "description": "Функция-обработчик, в которую передаются объекты коллекции."
            },
            {
              "isRequired": true,
              "param": "context",
              "type": "Object",
              "description": "Контекст исполнения функции-обработчика."
            }
          ],
          "name": "each"
        },
        {
          "return": "Object[]",
          "desciption": "Возвращает массив объектов, содержащихся в коллекции.",
          "name": "getAll"
        },
        {
          "return": "Object|null",
          "params": [
            {
              "isRequired": true,
              "param": "id",
              "type": "Number",
              "description": "Идентификатор объекта, которому принадлежит оверлей."
            }
          ],
          "desciption": "Возвращает оверлей или null, если оверлея с переданным id не существует.",
          "name": "getById"
        },
        {
          "return": "Number|null",
          "params": [
            {
              "isRequired": true,
              "param": "overlay",
              "type": "IOverlay",
              "description": "Оверлей."
            }
          ],
          "desciption": "Возвращает идентификатор объекта или null, если оверлей не содержится в коллекции.",
          "name": "getId"
        },
        {
          "return": "IIterator",
          "desciption": "Возвращает итератор по коллекции.",
          "name": "getIterator"
        },
        {
          "return": "Number",
          "desciption": "Возвращает количество объектов в коллекции.",
          "name": "getLength"
        }
      ]
    }
  },
  {
    "name": "option.Manager",
    "url": "option.Manager",
    "def": {
      "name": "option.Manager",
      "description": "Расширяет\n            IOptionManager.\n\nМенеджер опций. Позволяет задавать и получать значения опций по строковому ключу,\nа также разрешать значения опций в контексте существующей иерархии менеджеров опций.\n\n\n\n\nСпециальный ключ \"preset\" позволяет задать набор опций по умолчанию для данного менеджера.\nЗначением опции \"preset\" может быть хэш вида {\"имя опции\": \"значение опции\"}, либо строковый идентификатор\nхэша опций в хранилище option.presetStorage.\nДанный хэш опций может также содержать поле с именем \"preset\", что позволяет наследовать значения опций от\nдругих наборов.\n\n\n\n\nПри поиске значения в иерархии сначала проверяются собственные опции, затем опции заданные с помощью ключа\n\"preset\", после чего происходит обращение к родителю, если он есть.\n\n\n\n\nДля отслеживания изменений некоторых опций можно использовать Monitor.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Хэш опций."
        },
        {
          "isRequired": false,
          "param": "parent",
          "type": "IOptionManager",
          "description": "Родительский менеджер опций."
        },
        {
          "isRequired": false,
          "param": "name",
          "type": "String",
          "description": "Имя менеджера опций."
        }
      ],
      "inherits": [
        "IOptionManager"
      ],
      "methods": [
        {
          "return": "option.Manager",
          "params": [
            {
              "isRequired": true,
              "param": "key",
              "type": "Object|String",
              "description": "Имя опции, либо хеш вида {\"имя опции\": \"значение опции\"}."
            },
            {
              "isRequired": false,
              "param": "value",
              "type": "Object",
              "description": "Значение опции, если в качестве первого аргумента было передано имя."
            }
          ],
          "desciption": "Задает значения опций для данного менеджера. Поддерживаются две сигнатуры:\n\n    один аргумент, представляющий собой хеш вида {\"имя опции\": \"значение опции\"};\n    два аргумента, первый из которых - имя опции, второй - значение.\n\n\nВозвращает ссылку на себя.",
          "name": "set"
        },
        {
          "return": "option.Manager",
          "params": [
            {
              "isRequired": true,
              "param": "keys",
              "type": "String|String[]",
              "description": "Имя опции или массив имен опций, значения которых должны быть аннулированы."
            }
          ],
          "desciption": "Стирает значения заданных опций в данном менеджере.\n\nВозвращает ссылку на себя.",
          "name": "unset"
        },
        {
          "return": "option.Manager",
          "desciption": "Стирает значения всех опции в данном менеджере.\n\nВозвращает ссылку на себя.",
          "name": "unsetAll"
        }
      ]
    }
  },
  {
    "name": "overlay.Circle",
    "url": "overlay.Circle",
    "def": {
      "name": "overlay.Circle",
      "description": "Расширяет\n            IOverlay.\n\nИнтерактивный оверлей круга.\nПо умолчанию оверлеи не добавлены в package.full (стандартного набора модулей).\nДля создания собственного экземпляра оверлея необходимо использовать overlay.storage.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "geometry",
          "type": "IPixelCircleGeometry",
          "description": "Пиксельная геометрия фигуры."
        },
        {
          "isRequired": false,
          "param": "data",
          "type": "Object",
          "description": "Данные."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции."
        }
      ],
      "inherits": [
        "IOverlay"
      ]
    }
  },
  {
    "name": "option.presetStorage",
    "url": "option.presetStorage",
    "def": {
      "name": "option.presetStorage",
      "description": "Статический объект.\n\n\n            Экземпляр класса  util.Storage\n        \n\nХранилище предустановленных опций.\nСписок доступных ключей:\n\n\nМетки с текстом\n\n\n  \n\n\n      \n        \n        \n        \n        \n        \n          \n              Значок\n            \n              Ключ\n            \n              Значок\n            \n              Ключ\n            \n          \n          \n          \n              \n            'islands#blueIcon'\n              \n            'islands#darkGreenIcon'\n          \n              \n            'islands#redIcon'\n             \n           'islands#violetIcon'\n          \n             \n           'islands#darkOrangeIcon'\n             \n           'islands#blackIcon'\n         \n             \n           'islands#nightIcon'\n             \n           'islands#yellowIcon'\n         \n            \n           'islands#darkBlueIcon'\n             \n           'islands#greenIcon'\n         \n              \n            'islands#pinkIcon'\n              \n            'islands#orangeIcon'\n         \n             \n           'islands#grayIcon'\n             \n           'islands#lightBlueIcon'\n         \n             \n           'islands#brownIcon'\n             \n           'islands#oliveIcon'\n       \n     \n   \n\n\n \n\nМетки с текстом (иконки тянутся под контент)\n\n\n \n\n\n     \n       \n       \n       \n       \n       \n         \n             Значок\n           \n             Ключ\n           \n             Значок\n           \n             Ключ\n           \n         \n         \n         \n             \n           'islands#blueStretchyIcon'\n             \n           'islands#darkGreenStretchyIcon'\n         \n             \n           'islands#redStretchyIcon'\n             \n           'islands#violetStretchyIcon'\n         \n             \n           'islands#darkOrangeStretchyIcon'\n             \n           'islands#blackStretchyIcon'\n         \n             \n           'islands#nightStretchyIcon'\n             \n           'islands#yellowStretchyIcon'\n         \n             \n           'islands#darkBlueStretchyIcon'\n             \n           'islands#greenStretchyIcon'\n         \n             \n           'islands#pinkStretchyIcon'\n             \n           'islands#orangeStretchyIcon'\n         \n             \n           'islands#grayStretchyIcon'\n             \n           'islands#lightBlueStretchyIcon'\n         \n             \n           'islands#brownStretchyIcon'\n             \n           'islands#oliveStretchyIcon'\n       \n     \n   \n\n\n \n\nМетки без содержимого с точкой в центре\n\n\n \n\n\n     \n       \n       \n       \n       \n       \n         \n             Значок\n           \n             Ключ\n           \n             Значок\n           \n             Ключ\n           \n         \n         \n         \n             \n           'islands#blueDotIcon'\n             \n           'islands#darkGreenDotIcon'\n         \n             \n           'islands#redDotIcon'\n             \n           'islands#violetDotIcon'\n         \n             \n           'islands#darkOrangeDotIcon'\n             \n           'islands#blackDotIcon'\n         \n             \n           'islands#nightDotIcon'\n             \n           'islands#yellowDotIcon'\n         \n             \n           'islands#darkBlueDotIcon'\n             \n           'islands#greenDotIcon'\n         \n             \n           'islands#pinkDotIcon'\n             \n           'islands#orangeDotIcon'\n         \n             \n           'islands#grayDotIcon'\n             \n           'islands#lightBlueDotIcon'\n         \n             \n           'islands#brownDotIcon'\n             \n           'islands#oliveDotIcon'\n       \n     \n   \n\n\n \n\nМетки в виде кругов \n\n\n \n\n\n     \n       \n       \n       \n       \n       \n       \n       \n         \n             Значок\n           \n             Ключ\n           \n             Значок\n           \n             Ключ\n           \n         \n         \n         \n             \n           'islands#blueCircleIcon'\n             \n           'islands#darkGreenCircleIcon'\n         \n             \n           'islands#redCircleIcon'\n             \n           'islands#violetCircleIcon'\n         \n             \n           'islands#darkOrangeCircleIcon'\n             \n           'islands#blackCircleIcon'\n         \n             \n           'islands#nightCircleIcon'\n             \n           'islands#yellowCircleIcon'\n         \n             \n           'islands#darkBlueCircleIcon'\n             \n           'islands#greenCircleIcon'\n         \n             \n           'islands#pinkCircleIcon'\n             \n           'islands#orangeCircleIcon'\n         \n             \n           'islands#grayCircleIcon'\n             \n           'islands#lightBlueCircleIcon'\n         \n             \n           'islands#brownCircleIcon'\n             \n           'islands#oliveCircleIcon'\n       \n     \n   \n\n\n \n\nМетки в виде кругов с точкой в центре\n\n\n \n\n\n     \n       \n       \n       \n       \n       \n       \n       \n         \n             Значок\n           \n             Ключ\n           \n             Значок\n           \n             Ключ\n           \n         \n         \n         \n             \n           'islands#blueCircleDotIcon'\n             \n           'islands#darkGreenCircleDotIcon'\n         \n             \n           'islands#redCircleDotIcon'\n             \n           'islands#violetCircleDotIcon'\n         \n             \n           'islands#darkOrangeCircleDotIcon'\n             \n           'islands#blackCircleDotIcon'\n         \n             \n           'islands#nightCircleDotIcon'\n             \n           'islands#yellowCircleDotIcon'\n         \n             \n           'islands#darkBlueCircleDotIcon'\n             \n           'islands#greenCircleDotIcon'\n         \n             \n           'islands#pinkCircleDotIcon'\n             \n           'islands#orangeCircleDotIcon'\n         \n             \n           'islands#grayCircleDotIcon'\n             \n           'islands#lightBlueCircleDotIcon'\n         \n             \n           'islands#brownCircleDotIcon'\n             \n           'islands#oliveCircleDotIcon'\n       \n     \n   \n\n\n   \n\nПиктограммы\n\n\n   \n\n\n    \n      \n      \n      \n          ЗначокКлюч\n      \n        \n          \n                 \n             'islands#geolocationIcon'\n       \n     \n   \n\n\n   \n\nЗначки кластеров\n\n\n    \n\n\n    \n      \n      \n      \n      \n      \n          ЗначокКлючЗначокКлюч\n      \n      \n          \n                 \n             'islands#blueClusterIcons'\n                 \n             'islands#invertedBlueClusterIcons'\n         \n                  \n              'islands#redClusterIcons'\n                  \n              'islands#invertedRedClusterIcons'\n         \n                  \n              'islands#darkOrangeClusterIcons'\n                  \n              'islands#invertedDarkOrangeClusterIcons'\n         \n                  \n              'islands#nightClusterIcons'\n                  \n              'islands#invertedNightClusterIcons'\n          \n                  \n              'islands#darkBlueClusterIcons'\n                  \n              'islands#invertedDarkBlueClusterIcons'\n         \n                  \n              'islands#pinkClusterIcons'\n                  \n              'islands#invertedPinkClusterIcons'\n          \n                  \n              'islands#grayClusterIcons'\n                  \n              'islands#invertedGrayClusterIcons'\n         \n                  \n              'islands#brownClusterIcons'\n                  \n              'islands#invertedBrownClusterIcons'\n         \n                  \n              'islands#darkGreenClusterIcons'\n                  \n              'islands#invertedDarkGreenClusterIcons'\n         \n                  \n              'islands#violetClusterIcons'\n                  \n              'islands#invertedVioletClusterIcons'\n         \n                  \n              'islands#blackClusterIcons'\n                  \n              'islands#invertedBlackClusterIcons'\n          \n                  \n              'islands#yellowClusterIcons'\n                  \n              'islands#invertedYellowClusterIcons'\n         \n                  \n              'islands#greenClusterIcons'\n                  \n              'islands#invertedGreenClusterIcons'\n          \n                  \n              'islands#orangeClusterIcons'\n                  \n              'islands#invertedOrangeClusterIcons'\n         \n                  \n              'islands#lightBlueClusterIcons'\n                  \n              'islands#invertedLightBlueClusterIcons'\n          \n                  \n              'islands#oliveClusterIcons'\n                  \n              'islands#invertedOliveClusterIcons'\n      \n \n \n\nМетоды ",
      "hasCtor": false
    }
  },
  {
    "name": "overlay.hotspot.Placemark",
    "url": "overlay.hotspot.Placemark",
    "def": {
      "name": "overlay.hotspot.Placemark",
      "description": "Расширяет\n            overlay.hotspot.Base.\n\nОверлей точечной активной области.\nПо умолчанию оверлеи не добавлены в package.full (стандартный набор модулей).\nДля создания собственного экземпляра оверлея необходимо использовать overlay.storage.\n\nКонструктор",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "geometry",
          "type": "IPixelPointGeometry",
          "description": "Пиксельная геометрия фигуры."
        },
        {
          "isRequired": false,
          "param": "data",
          "type": "Object",
          "description": "Данные."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции."
        }
      ]
    }
  },
  {
    "name": "overlay.hotspot.Circle",
    "url": "overlay.hotspot.Circle",
    "def": {
      "name": "overlay.hotspot.Circle",
      "description": "Расширяет\n            overlay.hotspot.Base.\n\nОверлей круглой активной области.\nПо умолчанию оверлеи не добавлены в package.full (стандартного набора модулей).\nДля создания собственного экземпляра оверлея необходимо использовать overlay.storage.\n\nКонструктор",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "geometry",
          "type": "IPixelCircleGeometry",
          "description": "Геометрия."
        },
        {
          "isRequired": false,
          "param": "data",
          "type": "Object",
          "description": "Данные."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции."
        }
      ]
    }
  },
  {
    "name": "overlay.hotspot.Polygon",
    "url": "overlay.hotspot.Polygon",
    "def": {
      "name": "overlay.hotspot.Polygon",
      "description": "Расширяет\n            overlay.hotspot.Base.\n\nОверлей активной области в форме многоугольника.\nПо умолчанию оверлеи не добавлены в package.full (стандартного набора модулей).\nДля создания собственного экземпляра оверлея необходимо использовать overlay.storage.\n\nКонструктор",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "geometry",
          "type": "IPixelPolygonGeometry",
          "description": "Геометрия."
        },
        {
          "isRequired": false,
          "param": "data",
          "type": "Object",
          "description": "Данные."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции."
        }
      ]
    }
  },
  {
    "name": "overlay.hotspot.Polyline",
    "url": "overlay.hotspot.Polyline",
    "def": {
      "name": "overlay.hotspot.Polyline",
      "description": "Расширяет\n            overlay.hotspot.Base.\n\nОверлей активной области в форме ломаной линии.\nПо умолчанию оверлеи не добавлены в package.full (стандартный набор модулей).\nДля создания собственного экземпляра оверлея необходимо использовать overlay.storage.\n\nКонструктор",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "geometry",
          "type": "IPixelLineStringGeometry",
          "description": "Пикcельная геометрия фигуры."
        },
        {
          "isRequired": false,
          "param": "data",
          "type": "Object",
          "description": "Данные."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции."
        }
      ]
    }
  },
  {
    "name": "overlay.hotspot.Rectangle",
    "url": "overlay.hotspot.Rectangle",
    "def": {
      "name": "overlay.hotspot.Rectangle",
      "description": "Расширяет\n            overlay.hotspot.Base.\n\nОверлей прямоугольной активной области.\nПо умолчанию оверлеи не добавлены в package.full (стандартного набора модулей).\nДля создания собственного экземпляра оверлея необходимо использовать overlay.storage.\n\nКонструктор",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "geometry",
          "type": "IPixelRectangleGeometry",
          "description": "Пиксельная геометрия фигуры."
        },
        {
          "isRequired": false,
          "param": "data",
          "type": "Object",
          "description": "Данные."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции."
        }
      ]
    }
  },
  {
    "name": "overlay.html.Balloon",
    "url": "overlay.html.Balloon",
    "def": {
      "name": "overlay.html.Balloon",
      "description": "Расширяет\n            IOverlay.\n\nHTML-оверлей балуна.\nПо умолчанию оверлеи не добавлены в package.full (стандартного набора модулей).\nДля создания собственного экземпляра оверлея необходимо использовать overlay.storage.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "geometry",
          "type": "IPixelPointGeometry",
          "description": "Пиксельная геометрия фигуры."
        },
        {
          "isRequired": false,
          "param": "data",
          "type": "Object",
          "description": "Данные."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции."
        }
      ],
      "inherits": [
        "IOverlay"
      ],
      "methods": [
        {
          "return": "HTMLElement",
          "desciption": "Возвращает родительский элемент макета балуна.",
          "name": "getBalloonElement"
        },
        {
          "return": "vow.Promise",
          "desciption": "Возвращает объект-обещание вернуть макет балуна.",
          "name": "getBalloonLayout"
        },
        {
          "return": "ILayout",
          "desciption": "Возвращает макет балуна.",
          "name": "getBalloonLayoutSync"
        },
        {
          "return": "HTMLElement",
          "desciption": "Возвращает родительский элемент макета балуна.",
          "name": "getElement"
        },
        {
          "return": "vow.Promise",
          "desciption": "Возвращает объект-обещание вернуть макет балуна.",
          "name": "getLayout"
        },
        {
          "return": "ILayout|null",
          "desciption": "Возвращает макет балуна.",
          "name": "getLayoutSync"
        },
        {
          "return": "String",
          "desciption": "Возвращает текущий режим балуна.\n\nВозвращает режим балуна: \"panel\" —&nbsp;режим панели\n\"standard\" —&nbsp;стандартное отображение.",
          "name": "getMode"
        },
        {
          "return": "HTMLElement",
          "desciption": "Возвращает родительский элемент макета тени балуна.",
          "name": "getShadowElement"
        },
        {
          "return": "vow.Promise",
          "desciption": "Возвращает объект-обещание вернуть макет тени балуна.",
          "name": "getShadowLayout"
        },
        {
          "return": "ILayout|null",
          "desciption": "Возвращает макет тени балуна.",
          "name": "getShadowLayoutSync"
        },
        {
          "return": "Boolean",
          "desciption": "Возвращает true, если макет пуст или если макет еще не был загружен,\nт.е. не имеет содержимого.",
          "name": "isEmpty"
        }
      ]
    }
  },
  {
    "name": "overlay.html.Hint",
    "url": "overlay.html.Hint",
    "def": {
      "name": "overlay.html.Hint",
      "description": "Расширяет\n            IOverlay.\n\nПростой HTML-оверлей.\nПо умолчанию оверлеи не добавлены в package.full (стандартный набор модулей).\nДля создания собственного экземпляра оверлея необходимо использовать overlay.storage.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "geometry",
          "type": "IPixelPointGeometry",
          "description": "Пикcельная геометрия фигуры."
        },
        {
          "isRequired": false,
          "param": "data",
          "type": "Object",
          "description": "Данные."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции."
        }
      ],
      "inherits": [
        "IOverlay"
      ],
      "methods": [
        {
          "return": "HTMLElement",
          "desciption": "Возвращает родительский элемент макета иконки.",
          "name": "getElement"
        },
        {
          "return": "vow.Promise",
          "desciption": "Возвращает объект-обещание вернуть макет иконки.",
          "name": "getLayout"
        },
        {
          "return": "ILayout|null",
          "desciption": "Возвращает макет иконки.",
          "name": "getLayoutSync"
        },
        {
          "return": "Boolean",
          "desciption": "Возвращает true, если макет пуст или если макет еще не был загружен,\nт.е. не имеет содержимого.",
          "name": "isEmpty"
        }
      ]
    }
  },
  {
    "name": "overlay.html.Placemark",
    "url": "overlay.html.Placemark",
    "def": {
      "name": "overlay.html.Placemark",
      "description": "Расширяет\n            IOverlay.\n\nHTML-оверлей метки.\nПо умолчанию оверлеи не добавлены в package.full (стандартного набора модулей).\nДля создания собственного экземпляра оверлея необходимо использовать overlay.storage.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "geometry",
          "type": "IPixelPointGeometry",
          "description": "Пикcельная геометрия."
        },
        {
          "isRequired": false,
          "param": "data",
          "type": "Object",
          "description": "Данные."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции."
        }
      ],
      "inherits": [
        "IOverlay"
      ],
      "methods": [
        {
          "return": "HTMLElement",
          "desciption": "Возвращает родительский элемент макета иконки.",
          "name": "getElement"
        },
        {
          "return": "HTMLElement",
          "desciption": "Возвращает родительский элемент макета иконки.",
          "name": "getIconElement"
        },
        {
          "return": "vow.Promise",
          "desciption": "Возвращает объект-обещание вернуть макет иконки.",
          "name": "getIconLayout"
        },
        {
          "return": "ILayout|null",
          "desciption": "Возвращает макет иконки.",
          "name": "getIconLayoutSync"
        },
        {
          "return": "vow.Promise",
          "desciption": "Возвращает объект-обещание вернуть макет иконки.",
          "name": "getLayout"
        },
        {
          "return": "ILayout|null",
          "desciption": "Возвращает макет иконки.",
          "name": "getLayoutSync"
        },
        {
          "return": "HTMLElement",
          "desciption": "Возвращает родительский элемент макета тени иконки.",
          "name": "getShadowElement"
        },
        {
          "return": "vow.Promise",
          "desciption": "Возвращает объект-обещание вернуть макет тени иконки.",
          "name": "getShadowLayout"
        },
        {
          "return": "ILayout|null",
          "desciption": "Возвращает макет тени иконки.",
          "name": "getShadowLayoutSync"
        }
      ]
    }
  },
  {
    "name": "overlay.html.Rectangle",
    "url": "overlay.html.Rectangle",
    "def": {
      "name": "overlay.html.Rectangle",
      "description": "Расширяет\n            IOverlay.\n\nHTML-оверлей прямоугольника.\nПо умолчанию оверлеи не добавлены в package.full (стандартного набора модулей).\nДля создания собственного экземпляра оверлея необходимо использовать overlay.storage.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "geometry",
          "type": "IPixelRectangleGeometry",
          "description": "Пикcельная геометрия фигуры."
        },
        {
          "isRequired": false,
          "param": "data",
          "type": "Object",
          "description": "Данные."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции оверлея. Используя этот параметр можно задавать как опции самого оверлея,\nтак и опции его макета."
        }
      ],
      "inherits": [
        "IOverlay"
      ],
      "methods": [
        {
          "return": "HTMLElement",
          "desciption": "Возвращает родительский элемент макета прямоугольника.",
          "name": "getElement"
        },
        {
          "return": "vow.Promise",
          "desciption": "Возвращает объект-обещание вернуть макет прямоугольника.",
          "name": "getLayout"
        },
        {
          "return": "ILayout|null",
          "desciption": "Возвращает макет прямоугольника.",
          "name": "getLayoutSync"
        }
      ]
    }
  },
  {
    "name": "overlay.Pin",
    "url": "overlay.Pin",
    "def": {
      "name": "overlay.Pin",
      "description": "Расширяет\n            IOverlay.\n\nИнтерактивный оверлей круглой метки.\nПо умолчанию оверлеи не добавлены в package.full (стандартного набора модулей).\nДля создания собственного экземпляра оверлея необходимо использовать overlay.storage.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "geometry",
          "type": "IPixelPointGeometry",
          "description": "Пиксельная геометрия метки."
        },
        {
          "isRequired": false,
          "param": "data",
          "type": "Object",
          "description": "Данные."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции."
        }
      ],
      "inherits": [
        "IOverlay"
      ]
    }
  },
  {
    "name": "overlay.Placemark",
    "url": "overlay.Placemark",
    "def": {
      "name": "overlay.Placemark",
      "description": "Расширяет\n            IOverlay.\n\nОверлей метки.\nПо умолчанию оверлеи не добавлены в package.full (стандартного набора модулей).\nДля создания собственного экземпляра оверлея необходимо использовать overlay.storage.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "geometry",
          "type": "IPixelPointGeometry",
          "description": "Пикcельная геометрия."
        },
        {
          "isRequired": false,
          "param": "data",
          "type": "Object",
          "description": "Данные."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции."
        }
      ],
      "inherits": [
        "IOverlay"
      ],
      "methods": [
        {
          "return": "HTMLElement",
          "desciption": "Возвращает родительский элемент макета иконки.",
          "name": "getElement"
        },
        {
          "return": "HTMLElement",
          "desciption": "Возвращает родительский элемент макета иконки.",
          "name": "getIconElement"
        },
        {
          "return": "vow.Promise",
          "desciption": "Возвращает объект-обещание вернуть макет иконки.",
          "name": "getIconLayout"
        },
        {
          "return": "ILayout|null",
          "desciption": "Возвращает макет иконки.",
          "name": "getIconLayoutSync"
        },
        {
          "return": "vow.Promise",
          "desciption": "Возвращает объект-обещание вернуть макет иконки.",
          "name": "getLayout"
        },
        {
          "return": "ILayout|null",
          "desciption": "Возвращает макет иконки.",
          "name": "getLayoutSync"
        },
        {
          "return": "HTMLElement",
          "desciption": "Возвращает родительский элемент макета тени иконки.",
          "name": "getShadowElement"
        },
        {
          "return": "vow.Promise",
          "desciption": "Возвращает объект-обещание вернуть макет тени иконки.",
          "name": "getShadowLayout"
        },
        {
          "return": "ILayout|null",
          "desciption": "Возвращает макет тени иконки.",
          "name": "getShadowLayoutSync"
        }
      ]
    }
  },
  {
    "name": "overlay.Polygon",
    "url": "overlay.Polygon",
    "def": {
      "name": "overlay.Polygon",
      "description": "Расширяет\n            IOverlay.\n\nОверлей многоугольника.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "geometry",
          "type": "IPixelPolygonGeometry",
          "description": "Пикcельная геометрия фигуры."
        },
        {
          "isRequired": false,
          "param": "data",
          "type": "Object",
          "description": "Данные."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции."
        }
      ],
      "inherits": [
        "IOverlay"
      ]
    }
  },
  {
    "name": "overlay.Polyline",
    "url": "overlay.Polyline",
    "def": {
      "name": "overlay.Polyline",
      "description": "Расширяет\n            IOverlay.\n\nОверлей линии.\nПо умолчанию оверлеи не добавлены в package.full (стандартного набора модулей).\nДля создания собственного экземпляра оверлея необходимо использовать overlay.storage.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "geometry",
          "type": "IPixelLineStringGeometry",
          "description": "Пикcельная геометрия фигуры."
        },
        {
          "isRequired": false,
          "param": "data",
          "type": "Object",
          "description": "Данные."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции."
        }
      ],
      "inherits": [
        "IOverlay"
      ]
    }
  },
  {
    "name": "multiRouter.driving.RouteModel",
    "url": "multiRouter.driving.RouteModel",
    "def": {
      "name": "multiRouter.driving.RouteModel",
      "description": "Примечание.&nbsp;Конструктор класса multiRouter.driving.RouteModel скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nРасширяет\n            IEventEmitter.\n\nМодель данных единичного автомобильного маршрута. Мультимаршрут может состоять из\nнескольких единичных маршрутов.\n\nПоля  | События  | Методы \n\nСоздает модель данных единичного автомобильного маршрута.",
      "hasCtor": false,
      "inherits": [
        "IEventEmitter"
      ],
      "methods": [
        {
          "desciption": "Уничтожает модель.",
          "name": "destroy"
        },
        {
          "return": "multiRouter.driving.PathModel[]",
          "desciption": "Возвращает массив путей маршрута.",
          "name": "getPaths"
        },
        {
          "return": "String",
          "desciption": "Возвращает идентификатор типа маршрута. Для автомобильных маршрутов возвращается\nстрока \"driving\".",
          "name": "getType"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "routeJson",
              "type": "Object",
              "description": "JSON-данные."
            }
          ],
          "desciption": "Обновляет состояние модели.",
          "name": "update"
        }
      ],
      "props": [
        {
          "type": "multiRouter.MultiRouteModel",
          "description": "Ссылка на родительскую модель мультимаршрута.",
          "name": "multiRoute"
        },
        {
          "type": "data.Manager",
          "description": "Данные маршрута.\nДоступны следующие поля:\n\n    index: Integer - порядковый номер маршрута в мультимаршруте;\n    type: String - идентификатор типа маршрута, принимающий значение \"driving\" для\n    автомобильных маршрутов;\n    blocked: Boolean - признак того, что маршрут содержит перекрытые участки;\n    distance: Object - объект с полями text и value, описывающий протяженность\n    маршрута в метрах;\n    duration: Object - объект с полями text и value, описывающий время проезда\n    маршрута в секундах;\n    durationInTraffic: Object - объект с полями text и value, описывающий время\n    проезда маршрута в секундах с учетом пробок;\n    boundedBy: Number[][] - координаты нижнего и верхнего углов прямоугольника,\n    ограничивающего данный маршрут.\n",
          "name": "properties"
        }
      ]
    }
  },
  {
    "name": "multiRouter.driving.Segment",
    "url": "multiRouter.driving.Segment",
    "def": {
      "name": "multiRouter.driving.Segment",
      "description": "Примечание.&nbsp;Конструктор класса multiRouter.driving.Segment скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nРасширяет\n            IGeoObject.\n\nОтображение сегмента автомобильного маршрута.\nСегментом автомобильного маршрута называется часть пути от одного манёвра до другого.\n\nПоля  | События  | Методы \n\nСоздает отображение сегмента автомобильного маршрута.",
      "hasCtor": false,
      "inherits": [
        "IGeoObject"
      ],
      "props": [
        {
          "type": "multiRouter.driving.SegmentModel",
          "description": "Модель данных сегмента.",
          "name": "model"
        },
        {
          "type": "data.Manager",
          "description": "Данные сегмента.\nДоступны следующие поля:\n\n    index: Integer - порядковый номер сегмента во множестве сегментов\n    соответствующего пути маршрута;\n    type: String - идентификатор типа сегмента, принимающий значение \"driving\" для\n    автомобильных сегментов;\n    street: String - текстовое описание улицы, по которой проходит сегмент;\n    action: Object - объект с полями text и value, описывающий завершающий маневр\n    сегмента;\n    distance: Object - объект с полями text и value, описывающий протяженность\n    сегмента в метрах;\n    duration: Object - объект с полями text и value, описывающий время проезда\n    сегмента в секундах;\n    durationInTraffic: Object - объект с полями text и value, описывающий время\n    проезда сегмента в секундах с учетом пробок;\n    text: String - текстовое описание сегмента;\n    viaPoints: Integer[] - индексы транзитных точек, лежащих на данном сегменте;\n    lodIndex: Integer - порядковый номер первой точки сегмента во множестве всех\n    координат соответствующего ему пути маршрута.\n",
          "name": "properties"
        }
      ]
    }
  },
  {
    "name": "overlay.storage",
    "url": "overlay.storage",
    "def": {
      "name": "overlay.storage",
      "description": "Статический объект.\n\n\n            Экземпляр класса  util.AsyncStorage\n        \n\nХранилище оверлеев.\nПо умолчанию оверлеи не добавлены в package.full (стандартного набора модулей).\nПри добавлении геообъекта на карту происходит загрузка необходимого оверлея.\nДля получения класса оверлея необходимо использовать метод\nrequire данного хранилища.\n\nПо умолчанию в хранилище объявлены следующие ключи для асинхронного доступа:\n\n   'default#circle' - Оверлей круга overlay.Circle;\n   'default#polyline' - Оверлей линии overlay.Polyline;\n   'default#placemark' - Оверлей метки-изображения overlay.Placemark;\n   'default#polygon' - Оверлей многоугольника overlay.Polygon;\n   'default#rectangle' - Оверлей прямоугольника overlay.Rectangle;\n   'hotspot#circle' - Хотспотный оверлей круга overlay.hotspot.Circle;\n   'hotspot#polyline' - Хотспотный оверлей линии overlay.hotspot.Polyline;\n   'hotspot#placemark' - Хотспотный оверлей точки overlay.hotspot.Placemark;\n   'hotspot#polygon' - Хотспотный оверлей многоугольника overlay.hotspot.Polygon;\n   'hotspot#rectangle' - Хотспотный оверлей прямоугольника overlay.hotspot.Rectangle;\n   'html#balloon' - HTML-оверлей балуна overlay.html.Balloon;\n   'html#hint' - Простой HTML-оверлей overlay.html.Hint;\n   'html#placemark' - HTML-оверлей метки overlay.html.Placemark;\n   'html#rectangle' - HTML-оверлей прямоугольника overlay.html.Rectangle.\n\n\nМетоды ",
      "hasCtor": false
    }
  },
  {
    "name": "pane.EventsPane",
    "url": "pane.EventsPane",
    "def": {
      "name": "pane.EventsPane",
      "description": "Расширяет\n            IEventPane.\n\nПейн событий.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "map",
          "type": "Map",
          "description": "Карта."
        },
        {
          "isRequired": true,
          "param": "params",
          "type": "Object",
          "description": "Параметры."
        }
      ],
      "inherits": [
        "IEventPane"
      ]
    }
  },
  {
    "name": "pane.MovablePane",
    "url": "pane.MovablePane",
    "def": {
      "name": "pane.MovablePane",
      "description": "Расширяет\n            IContainerPane.\n\nДвигающийся пейн карты.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "map",
          "type": "Map",
          "description": "Карта."
        },
        {
          "isRequired": true,
          "param": "params",
          "type": "Object",
          "description": "Параметры."
        }
      ],
      "inherits": [
        "IContainerPane"
      ]
    }
  },
  {
    "name": "pane.StaticPane",
    "url": "pane.StaticPane",
    "def": {
      "name": "pane.StaticPane",
      "description": "Расширяет\n            IContainerPane.\n\nСтатичный пейн карты.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "map",
          "type": "Map",
          "description": "Карта."
        },
        {
          "isRequired": true,
          "param": "params",
          "type": "Object",
          "description": "Параметры."
        }
      ],
      "inherits": [
        "IContainerPane"
      ]
    }
  },
  {
    "name": "Placemark",
    "url": "Placemark",
    "def": {
      "name": "Placemark",
      "description": "Расширяет\n            GeoObject.\n\nМетка. Представляет собой геообъект с геометрией geometry.Point.\n\nСм.: GeoObject geometry.Point \n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "geometry",
          "type": "Number[]|Object|IPointGeometry",
          "description": "Координаты метки или хэш с описанием геометрии, или\nссылка на объект точечной геометрии."
        },
        {
          "isRequired": false,
          "param": "properties",
          "type": "Object|IDataManager",
          "description": "Данные метки. Могут задаваться как экземпляр класса,\nреализующего интерфейс IDataManager, либо в виде хэша.\nПри значениях опций по умолчанию геообъектом трактуются следующие поля данных:\n\n    iconContent — содержимое иконки геообъекта;\n    hintContent — содержимое всплывающей подсказки геообъекта;\n    balloonContent — содержимое балуна геообъекта;\n    balloonContentHeader — содержимое заголовка балуна геообъекта;\n    balloonContentBody — содержимое основой части балуна геообъекта;\n    balloonContentFooter — содержимое нижней части балуна геообъекта.\n\nПоле balloonContent является кратким обозначением для поля balloonContentBody, но при одновременном задании\nballoonContentBody более приоритетен.\nТакже вы можете дополнить данные метки своими собственными полями и использовать их везде, где это возможно.\nНапример в макете метки или макете балуна."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции метки.\n"
        }
      ],
      "inherits": [
        "GeoObject"
      ],
      "props": [
        {
          "type": "geometryEditor.Point",
          "description": "Редактор геометрии \"Точка\".",
          "name": "editor"
        },
        {
          "type": "geometry.Point",
          "description": "Геометрия типа \"Точка\".",
          "name": "geometry"
        }
      ]
    }
  },
  {
    "name": "Polygon",
    "url": "Polygon",
    "def": {
      "name": "Polygon",
      "description": "Расширяет\n            GeoObject.\n\nМногоугольник. Представляет собой геообъект с геометрией geometry.Polygon.\n\nСм.: GeoObject geometry.Polygon \n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "geometry",
          "type": "Number[][][]|Object|IPolygonGeometry",
          "description": "Координаты вершин ломаных, определяющих\nвнешнюю и внутренние границы многоугольника, хэш-объект с параметрами геометрии или ссылка на объект геометрии.\nВнутренняя граница может отсутствовать."
        },
        {
          "isRequired": false,
          "param": "properties",
          "type": "Object|IDataManager",
          "description": "Данные многоугольника. Могут задаваться как экземпляр класса,\nреализующего интерфейс IDataManager, либо в виде хэша.\nПри значениях опций по умолчанию геообъектом трактуются следующие поля данных:\n\n    hintContent - содержимое всплывающей подсказки многоугольника;\n    balloonContent - содержимое балуна многоугольника;\n    balloonContentHeader - содержимое заголовка балуна многоугольника;\n     balloonContentBody - содержимое основой части балуна многоугольника;\n     balloonContentFooter - содержимое нижней части балуна многоугольника.\n\nПоле balloonContent является кратким обозначением для поля balloonContentBody, но при одновременном задании\nballoonContentBody более приоритетен.\nТакже вы можете дополнить данные многоугольника своими собственными полями и использовать их везде, где это возможно.\nНапример в макете балуна многоугольника."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции многоугольника. Используя этот параметр можно задавать как опции самого многоульника,\nтак и опции его составных частей:\n\n    Опции балуна многоульника с префиксом balloon.\n    Опции всплывающей подсказки многоульника с префиксом hint.\n    Опции редактора геометрии многоульника с префиксом editor. Смотрите описание класса geometryEditor.Polygon.\n    Опции геометрии могут задаваться без префикса. Смотрите описание класса IGeometry геометрии\n    geometry.Polygon.\n"
        }
      ],
      "inherits": [
        "GeoObject"
      ],
      "props": [
        {
          "type": "geometryEditor.Polygon",
          "description": "Редактор геометрии \"Многоугольник\".",
          "name": "editor"
        },
        {
          "type": "geometry.Polygon",
          "description": "Геометрия типа \"Многоугольник\".",
          "name": "geometry"
        }
      ]
    }
  },
  {
    "name": "Polyline",
    "url": "Polyline",
    "def": {
      "name": "Polyline",
      "description": "Расширяет\n            GeoObject.\n\nЛоманая линия. Представляет собой геообъект с геометрией geometry.LineString.\n\nСм.: GeoObject geometry.LineString \n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "geometry",
          "type": "Number[][]|Object|ILineStringGeometry",
          "description": "Координаты вершин, хэш-объект с параметрами геометрии или ссылка на объект геометрии ломаной линии."
        },
        {
          "isRequired": false,
          "param": "properties",
          "type": "Object|IDataManager",
          "description": "Данные ломаной. Могут задаваться как экземпляр класса,\nреализующего интерфейс IDataManager, либо в виде хэша.\nПри значениях опций по умолчанию геообъектом трактуются следующие поля данных:\n\n    hintContent - содержимое всплывающей подсказки ломаной;\n    balloonContent - содержимое балуна ломаной;\n    balloonContentHeader - содержимое заголовка балуна ломаной;\n    balloonContentBody - содержимое основой части балуна ломаной;\n    balloonContentFooter - содержимое нижней части балуна ломаной.\n\nПоле balloonContent является кратким обозначением для поля balloonContentBody, но при одновременном задании\nballoonContentBody более приоритетен.\nТакже вы можете дополнить данные ломаной своими собственными полями и использовать их, например, в макете хинта."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции ломаной. Используя этот параметр можно задавать как опции самой ломаной,\nтак и опции ее составных частей:\n\n    Опции балуна ломаной с префиксом balloon.\n    Опции всплывающей подсказки ломаной с префиксом hint.\n    Опции редактора геометрии ломаной с префиксом editor. Смотрите описание класса geometryEditor.LineString.\n    Опции геометрии могут задаваться без префикса. Смотрите описание класса IGeometry геометрии\n    geometry.LineString.\n"
        }
      ],
      "inherits": [
        "GeoObject"
      ],
      "props": [
        {
          "type": "geometryEditor.LineString",
          "description": "Редактор геометрии \"Ломаная линия\".",
          "name": "editor"
        },
        {
          "type": "geometry.LineString",
          "description": "Геометрия типа \"Ломаная линия\".",
          "name": "geometry"
        }
      ]
    }
  },
  {
    "name": "Popup",
    "url": "Popup",
    "def": {
      "name": "Popup",
      "description": "Расширяет\n            IPopup.\n\nКласс для создания инфо-объекта.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "map",
          "type": "Map",
          "description": "Ссылка на карту."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции."
        }
      ],
      "inherits": [
        "IPopup"
      ]
    }
  },
  {
    "name": "projection.Cartesian",
    "url": "projection.Cartesian",
    "def": {
      "name": "projection.Cartesian",
      "description": "Расширяет\n            IProjection.\n\nДекартова проекция прямоугольной области.\nУчитывает параметр coordorder загрузки API - при значении 'latlong' в массиве координат точки\nна первом месте должен стоять y, а на втором x.\n\nКонструктор | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "bounds",
          "type": "Object[]",
          "description": "Массив из двух точек -\nкоординат левого нижнего и правого верхнего углов прямоугольной координатной области."
        },
        {
          "isRequired": false,
          "param": "cycled",
          "type": "Boolean[]",
          "description": "Массив из признаков зацикленности карты по x и y."
        },
        {
          "isRequired": false,
          "param": "scale",
          "type": "Number|Number[]",
          "description": "Масштаб одного деления на оси. Может быть числом или парой чисел для каждой из осей."
        }
      ],
      "inherits": [
        "IProjection"
      ]
    }
  },
  {
    "name": "projection.sphericalMercator",
    "url": "projection.sphericalMercator",
    "def": {
      "name": "projection.sphericalMercator",
      "description": "Статический объект.\n\n\n            Экземпляр класса  IProjection\n        \n\nМеркаторовская проекция на сферу.\nИспользуется многими картографическими сервисами, в частности, OpenStreetMap.\n\nМетоды ",
      "hasCtor": false
    }
  },
  {
    "name": "ready",
    "url": "ready",
    "def": {
      "name": "ready",
      "hasCtor": false
    }
  },
  {
    "name": "Rectangle",
    "url": "Rectangle",
    "def": {
      "name": "Rectangle",
      "description": "Расширяет\n            GeoObject.\n\nПрямоугольник. Представляет собой геообъект с геометрией geometry.Rectangle.\n\nСм.: GeoObject geometry.Rectangle \n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "geometry",
          "type": "Number[][]|Object|IRectangleGeometry",
          "description": "Координаты двух противоположных углов, хэш-объект с параметрами геометрии или ссылка на объект геометрии прямоугольника."
        },
        {
          "isRequired": false,
          "param": "properties",
          "type": "Object|IDataManager",
          "description": "Данные прямоугольника. Могут задаваться как экземпляр класса,\nреализующего интерфейс IDataManager, либо в виде хэша.\nПри значениях опций по умолчанию геообъектом трактуются следующие поля данных:\n\n    hintContent - содержимое всплывающей подсказки прямоугольника;\n    balloonContent - содержимое балуна прямоугольника;\n    balloonContentHeader - содержимое заголовка балуна прямоугольника;\n    balloonContentBody - содержимое основой части балуна прямоугольника;\n    balloonContentFooter - содержимое нижней части балуна прямоугольника.\n\nПоле balloonContent является кратким обозначением для поля balloonContentBody, но при одновременном задании\nballoonContentBody более приоритетен.\nТакже вы можете дополнить данные прямоугольника своими собственными полями и использовать их, например, в макете балуна."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции прямоугольника. Используя этот параметр можно задавать как опции самого прямоугольника,\nтак и опции его составных частей:\n\n    Опции балуна прямоугольника с префиксом balloon.\n    Опции всплывающей подсказки прямоугольника с префиксом hint.\n    Опции геометрии могут задаваться без префикса. Смотрите описание класса IGeometry геометрии geometry.Rectangle.\n"
        }
      ],
      "inherits": [
        "GeoObject"
      ],
      "props": [
        {
          "type": "Null",
          "description": "Редактор геометрии \"Прямоугольник\" на данный момент не реализован.",
          "name": "editor"
        },
        {
          "type": "geometry.Rectangle",
          "description": "Геометрия типа \"Прямоугольник\".",
          "name": "geometry"
        }
      ]
    }
  },
  {
    "name": "regions.load",
    "url": "regions.load",
    "def": {
      "name": "regions.load",
      "description": "Предоставляет доступ к геометрии различных регионов и стран мира.\n\nКонструктор",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "region",
          "type": "String",
          "description": "ISO_3166-1 код страны (RU, UA, BY, KZ) для загрузки\nадминистративно-территориального деления, либо '001' для загрузки геометрии\nграниц стран мира."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции отображения."
        }
      ]
    }
  },
  {
    "name": "route",
    "url": "route",
    "def": {
      "name": "route",
      "hasCtor": false
    }
  },
  {
    "name": "RemoteObjectManager",
    "url": "RemoteObjectManager",
    "def": {
      "name": "RemoteObjectManager",
      "description": "Расширяет\n            ICustomizable, IEventEmitter, IGeoObject, IParentOnMap.\n\nМенеджер объектов, осуществляющий их оптимальную подгрузку с сервера.\nМенеджер отправляет запросы за данными по указанному url в JSONP-формате.\nОписание формата соответствует формату добавляемых в ObjectManager объектов ObjectManager.add.\nТакже поддерживаются объекты типа 'Cluster', содержащие поля:\n\n    type - тип объекта, для кластеров всегда 'Cluster';\n    id - уникальный идентификатор кластера;\n    geometry - геометрия кластера в JSON-формате;\n    features - массив объектов в составе кластера. Необязательное поле;\n    bbox - массив координат, описывающих прямоугольную область,\n    содержащую все объекты в составе кластера;\n    number - количество объектов в кластере;\n    properties - данные кластера.\n\nДанный модуль рассчитан на загрузку и отображение данных, предварительно обработанных на сервере.\nВ частности, рекомендуется использовать модуль для отображения результатов серверной кластеризации.\nДанные перезапрашиваются заново при изменении коэффициента масштабирования карты.\nМодуль не осуществляет кластеризацию объектов или фильтрацию по области видимости на клиенте.\nПри необходимости кластеризовать объекты на клиенте после загрузки используйте LoadingObjectManager.\nОбратите внимание, что у объектов, отрисованных на карте через данный менеджер, нельзя включать режимы редактирования и перетаскивания.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "urlTemplate",
          "type": "String",
          "description": "Шаблон URL данных. Поддерживаются\nспециальные конструкции по аналогии с Layer.\nТакже поддерживаются подстановки:\n\n    %b заменяется на массив географических координат,\n    описывающих прямоугольную область, для которой требуется загрузить данные.\n    %t заменяется на массив номеров тайлов, описывающих прямоугольную область,\n    для которой требуется загрузить данные.\n"
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции.\n\n    Можно задавать все опции, указанные в описании Clusterer,\n        за исключением опций hasBalloon и hasHint.\n    \n    Опции для кластеров задаются с префиксом cluster.\n        Список опций указан в описании класса ClusterPlacemark;\n    \n    \n        Опции для одиночных объектов задаются с префиксом geoObject.\n        Список опций указан в описании класса Placemark.\n    \n"
        }
      ],
      "inherits": [
        "ICustomizable",
        "IEventEmitter",
        "IGeoObject",
        "IParentOnMap"
      ],
      "methods": [
        {
          "return": "Number[][]|null",
          "desciption": "Вычисляет границы области в геокоординатах, охватывающей\nвсе загруженные объекты в составе менеджера.\n\nВозвращает массив координат области или null, если менеджер\nне добавлен на карту.",
          "name": "getBounds"
        },
        {
          "return": "Object",
          "params": [
            {
              "isRequired": true,
              "param": "id",
              "type": "Object",
              "description": "Идентификатор объекта, для которого нужно получить состояние."
            }
          ],
          "desciption": "Получение информации о текущем состоянии объекта, добавленного в менеджер.\n\nВозвращает объект с полями:\n\n  found - признак, указывающий, существует ли объект с переданным идентификатором в загруженных данных. Тип: Boolean;\n  isShown - признак, указывающий, находится ли объект в видимой области карты. Тип: Boolean;\n  isFilteredOut - признак, указывающий, прошел ли объект фильтрацию.\n  Если фильтр не задан или объект прошел фильтрацию, значение поля будет false. Тип: Boolean.\n",
          "name": "getObjectState"
        },
        {
          "return": "Number[][]|null",
          "desciption": "Вычисляет границы области в глобальных пиксельных координатах, охватывающей\nвсе загруженные объекты в составе менеджера.\n\nВозвращает массив координат области или null, если менеджер\nне добавлен на карту.",
          "name": "getPixelBounds"
        },
        {
          "return": "String",
          "desciption": "Возвращает шаблон URL данных.",
          "name": "getUrlTemplate"
        },
        {
          "desciption": "Метод, удаляющий все загруженные ранее данные и отправляющий\nзапрос за новыми данными.",
          "name": "reloadData"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "filterFunction",
              "type": "Function|String",
              "description": "функция-фильтр. Получает на вход единичный объект, добавленный\nв ObjectManager. Если функция возвращает true, объект будет обработан. Если false - объект будет\nисключен из дальнейшей обработки.\nТакже в качестве фильтра можно передавать строку.\nВ строке-фильтре доступны следующие ключевые слова:\n\n    options - обращение к опциям объекта;\n    properties - обращение к данным объекта;\n    geometry - обращение к геометрии объекта;\n    id - обращение к идентификатору объекта;\n\nВ качестве фильтра можно указывать выражение, возвращающее true или false."
            }
          ],
          "desciption": "Устанавливает функцию-фильтр для объектов.\nФильтрует как одиночные объекты, так и кластеры.",
          "name": "setFilter"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "urlTemplate",
              "type": "String",
              "description": "шаблон URL данных."
            }
          ],
          "name": "setUrlTemplate"
        }
      ],
      "props": [
        {
          "type": "objectManager.ClusterCollection",
          "description": "Коллекция кластеров, сгенерированных менеджером.",
          "name": "clusters"
        },
        {
          "type": "objectManager.ObjectCollection",
          "description": "Коллекция объектов, добавленных в слой.",
          "name": "objects"
        }
      ]
    }
  },
  {
    "name": "router.Editor",
    "url": "router.Editor",
    "def": {
      "name": "router.Editor",
      "description": "Примечание.&nbsp;Конструктор класса router.Editor скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nРасширяет\n            ICustomizable, IEventEmitter.\n\nРедактор маршрутов. Конструктор недоступен в package.full (стандартный набор модулей).\nДанный модуль загружается по требованию.\n\nПоля  | События  | Методы \n\n\n\n    \n       \n            \n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n        \n        \n\n    ",
      "hasCtor": false,
      "inherits": [
        "ICustomizable",
        "IEventEmitter"
      ],
      "methods": [
        {
          "params": [
            {
              "isRequired": false,
              "param": "options",
              "type": "Object",
              "description": "Опции."
            }
          ],
          "desciption": "Включает редактор маршрута.",
          "name": "start"
        },
        {
          "desciption": "Выключает редактор маршрута.",
          "name": "stop"
        }
      ],
      "props": [
        {
          "type": "IDataManager",
          "description": "Менеджер состояния редактора маршрута.\n\n\nПоля данных, доступные посредством методов get и set:",
          "name": "state"
        }
      ]
    }
  },
  {
    "name": "router.Path",
    "url": "router.Path",
    "def": {
      "name": "router.Path",
      "description": "Примечание.&nbsp;Конструктор класса router.Path скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nРасширяет\n            GeoObject.\n\nОбъект, описывающий часть (путь) машрута. Конструктор недоступен в package.full (стандартный набор модулей).\nДанный модуль загружается по требованию.\nМаршрут может содержать несколько путей, каждый путь соединяет две путевые точки.\nДля путей доступны следующие пресеты:\n\n    'router#interactivePath' - обеспечивает вывод информации о сегменте пути при клике по полилинии пути. При использовании этого пресета в макете балуна становятся доступными, как свойства геообъекта,\n    следующие данные сегмента router.Segment: action, humanAction, angle, length, humanLength, time, humanTime,\n    jamsTime, humanJamsTime, street. Используется по умолчанию.\n    'router#plainPath' - путь ведет себя как обычный геообъект.\n\n\nСм.: route \n\nПоля  | События  | Методы \n\n\n\n    \n       \n            \n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n        \n        \n\n    ",
      "hasCtor": false,
      "inherits": [
        "GeoObject"
      ],
      "methods": [
        {
          "return": "String",
          "desciption": "Возвращает строковое представление времени проезда пути с единицами измерения с учетом пробок.",
          "name": "getHumanJamsTime"
        },
        {
          "return": "String",
          "desciption": "Возвращает строковое представление длины пути с единицами измерения.",
          "name": "getHumanLength"
        },
        {
          "return": "String",
          "desciption": "Возвращает строковое представление времени проезда пути с единицами измерения.",
          "name": "getHumanTime"
        },
        {
          "return": "Integer",
          "desciption": "Возвращает время проезда пути в секундах с учетом пробок.",
          "name": "getJamsTime"
        },
        {
          "return": "Number",
          "desciption": "Возвращает длину пути в метрах.",
          "name": "getLength"
        },
        {
          "return": "router.Segment[]",
          "desciption": "Возвращает сегменты пути.",
          "name": "getSegments"
        },
        {
          "return": "Integer",
          "desciption": "Возвращает время проезда пути в секундах.",
          "name": "getTime"
        }
      ]
    }
  },
  {
    "name": "router.Route",
    "url": "router.Route",
    "def": {
      "name": "router.Route",
      "description": "Примечание.&nbsp;Конструктор класса router.Route скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nРасширяет\n            IGeoObject.\n\nОбъект, описывающий проложенный маршрут. Конструктор недоступен в package.full (стандартный набор модулей).\nДанный модуль загружается по требованию.\n\nСм.: route \n\nПоля  | События  | Методы \n\n\n\n    \n       \n            \n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n        \n        \n\n    ",
      "hasCtor": false,
      "inherits": [
        "IGeoObject"
      ],
      "methods": [
        {
          "return": "String",
          "desciption": "Возвращает строковое представление времени проезда маршрута с единицами измерения с учетом пробок.",
          "name": "getHumanJamsTime"
        },
        {
          "return": "String",
          "desciption": "Возвращает строковое представление длины маршрута с единицами измерения.",
          "name": "getHumanLength"
        },
        {
          "return": "String",
          "desciption": "Возвращает строковое представление времени проезда маршрута с единицами измерения.",
          "name": "getHumanTime"
        },
        {
          "return": "Integer",
          "desciption": "Возвращает время проезда маршрута в секундах с учетом пробок.",
          "name": "getJamsTime"
        },
        {
          "return": "Number",
          "desciption": "Возвращает длину маршрута в метрах.",
          "name": "getLength"
        },
        {
          "return": "GeoObjectCollection",
          "desciption": "Возвращает коллекцию путей, из которых состоит маршрут.",
          "name": "getPaths"
        },
        {
          "return": "Integer",
          "desciption": "Возвращает время проезда маршрута в секундах.",
          "name": "getTime"
        },
        {
          "return": "GeoObjectCollection",
          "desciption": "Возвращает коллекцию транзитных точек маршрута.",
          "name": "getViaPoints"
        },
        {
          "return": "GeoObjectCollection",
          "desciption": "Возвращает коллекцию путевых точек маршрута.",
          "name": "getWayPoints"
        }
      ],
      "props": [
        {
          "type": "router.Editor",
          "description": "Редактор маршрутов.",
          "name": "editor"
        }
      ]
    }
  },
  {
    "name": "router.Segment",
    "url": "router.Segment",
    "def": {
      "name": "router.Segment",
      "description": "Примечание.&nbsp;Конструктор класса router.Segment скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nОбъект, описываюший сегмент маршрута. Сегмент - часть маршрута от одного\nманёвра до другого. Конструктор недоступен в package.full (стандартный набор модулей).\nДанный модуль загружается по требованию.\n\nМетоды \n\n\n\n    \n       \n            \n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n        \n        \n\n    ",
      "hasCtor": false,
      "methods": [
        {
          "return": "String",
          "desciption": "Возвращает направление поворота маршрута в конце сегмента.\nВозможные значения:\n\nleft - налево;\nslight left - левее;\nhard left - резкий поворот налево;\nright - направо;\nslight right - правее;\nhard right - резкий поворот направо;\nnone - прямо;\nback - разворот;\nenter roundabout - въезд на перекресток с круговым движением;\nleave roundabout [N] - съезд с перекрестка с круговым движением. Число N - номер поворота с круга.\nДанное число может отсутствовать. Например, \"leave roundabout\" или \"leave roundabout 2\";\nmerge - въезд (например, на шоссе или магистраль). Обозначает слияние с транспортным потоком;\nboard ferry - паромная переправа.\n",
          "name": "getAction"
        },
        {
          "return": "Number",
          "desciption": "Определяет угол поворота маршрута в конце отрезка.\n\nВозвращает угол поворота (в градусах).",
          "name": "getAngle"
        },
        {
          "return": "Number[][]",
          "desciption": "Возвращает координаты ломаной, описывающей геометрию сегмента.",
          "name": "getCoordinates"
        },
        {
          "return": "String",
          "desciption": "Возвращает направление поворота в виде локализованной человекопонятной строки.",
          "name": "getHumanAction"
        },
        {
          "return": "String",
          "desciption": "Возвращает строковое представление времени проезда сегмента с единицами измерения с учетом пробок.",
          "name": "getHumanJamsTime"
        },
        {
          "return": "String",
          "desciption": "Возвращает строковое представление длины сегмента с единицами измерения.",
          "name": "getHumanLength"
        },
        {
          "return": "String",
          "desciption": "Возвращает строковое представление времени проезда сегмента с единицами измерения.",
          "name": "getHumanTime"
        },
        {
          "return": "Integer",
          "desciption": "Возвращает индекс данного сегмента в массиве всех сегментов пути.",
          "name": "getIndex"
        },
        {
          "return": "Integer",
          "desciption": "Возвращает время проезда сегмента в секундах с учетом пробок.",
          "name": "getJamsTime"
        },
        {
          "return": "Number",
          "desciption": "Возвращает длину сегмента в метрах.",
          "name": "getLength"
        },
        {
          "return": "Integer",
          "desciption": "Возвращает индекс точки в геометрии пути, на которой заканчивается сегмент.",
          "name": "getPolylineEndIndex"
        },
        {
          "return": "Integer",
          "desciption": "Возвращает индекс точки в геометрии пути, с которой начинается сегмент.",
          "name": "getPolylineStartIndex"
        },
        {
          "return": "String",
          "desciption": "Возвращает название улицы, по которой проходит сегмент маршрута.",
          "name": "getStreet"
        },
        {
          "return": "Integer",
          "desciption": "Возвращает время проезда сегмента в секундах.",
          "name": "getTime"
        }
      ]
    }
  },
  {
    "name": "router.ViaPoint",
    "url": "router.ViaPoint",
    "def": {
      "name": "router.ViaPoint",
      "description": "Примечание.&nbsp;Конструктор класса router.ViaPoint скрыт, так как данный класс не предназначен для самостоятельной инициализации.\n\nРасширяет\n            GeoObject.\n\nОбъект, описывающий транзитную точку маршрута. Конструктор недоступен в package.full (стандартный набор модулей).\nДанный модуль загружается по требованию.\n\nПоля  | События  | Методы \n\n\n\n    \n       \n            \n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n        \n        \n\n    ",
      "hasCtor": false,
      "inherits": [
        "GeoObject"
      ],
      "methods": [
        {
          "return": "Integer",
          "desciption": "Возвращает индекс пути, в котором расположена точка.",
          "name": "getPathIndex"
        },
        {
          "return": "Integer",
          "desciption": "Возвращает индекс сегмента пути, в котором расположена точка.",
          "name": "getSegmentIndex"
        }
      ]
    }
  },
  {
    "name": "router.WayPoint",
    "url": "router.WayPoint",
    "def": {
      "name": "router.WayPoint",
      "description": "Расширяет\n            GeoObject.\n\nОбъект, описывающий путевую точку маршрута.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "feature",
          "type": "Object",
          "description": "Свойства и геометрия."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции."
        }
      ],
      "inherits": [
        "GeoObject"
      ],
      "props": [
        {
          "type": "data.Manager",
          "description": "Менеджер данных путевой точки.\nЕсли путевая точка была задана адресом, то в поле GeocoderMetaData будут содержаться метаданные\nгеокодера. См. geocode.",
          "name": "properties"
        }
      ]
    }
  },
  {
    "name": "search",
    "url": "search",
    "def": {
      "name": "search",
      "hasCtor": false
    }
  },
  {
    "name": "shape.Circle",
    "url": "shape.Circle",
    "def": {
      "name": "shape.Circle",
      "description": "Расширяет\n            IShape.\n\nПиксельная фигура \"Круг\".\n\nКонструктор | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "pixelGeometry",
          "type": "IPixelCircleGeometry",
          "description": "Пиксельная геометрия фигуры."
        },
        {
          "isRequired": false,
          "param": "params",
          "type": "Object",
          "description": "Параметры фигуры."
        }
      ],
      "inherits": [
        "IShape"
      ]
    }
  },
  {
    "name": "shape.LineString",
    "url": "shape.LineString",
    "def": {
      "name": "shape.LineString",
      "description": "Расширяет\n            IShape.\n\nПиксельная фигура \"Ломаная линия\".\n\nКонструктор | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "pixelGeometry",
          "type": "IPixelLineStringGeometry",
          "description": "Пиксельная геометрия фигуры."
        },
        {
          "isRequired": false,
          "param": "params",
          "type": "Object",
          "description": "Параметры фигуры."
        }
      ],
      "inherits": [
        "IShape"
      ]
    }
  },
  {
    "name": "shape.MultiPolygon",
    "url": "shape.MultiPolygon",
    "def": {
      "name": "shape.MultiPolygon",
      "description": "Расширяет\n            IShape.\n\nПиксельная фигура \"Мультиполигон\".\n\nКонструктор | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "pixelGeometry",
          "type": "IPixelMultiPolygonGeometry",
          "description": "Пиксельная геометрия фигуры."
        },
        {
          "isRequired": false,
          "param": "params",
          "type": "Object",
          "description": "Параметры фигуры."
        }
      ],
      "inherits": [
        "IShape"
      ]
    }
  },
  {
    "name": "shape.Polygon",
    "url": "shape.Polygon",
    "def": {
      "name": "shape.Polygon",
      "description": "Расширяет\n            IShape.\n\nПиксельная фигура \"Полигон\".\n\nКонструктор | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "pixelGeometry",
          "type": "IPixelPolygonGeometry",
          "description": "Пиксельная геометрия фигуры."
        },
        {
          "isRequired": false,
          "param": "params",
          "type": "Object",
          "description": "Параметры фигуры."
        }
      ],
      "inherits": [
        "IShape"
      ]
    }
  },
  {
    "name": "shape.Rectangle",
    "url": "shape.Rectangle",
    "def": {
      "name": "shape.Rectangle",
      "description": "Расширяет\n            IShape.\n\nПиксельная фигура \"Прямоугольник\".\n\nКонструктор | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "pixelGeometry",
          "type": "IPixelRectangleGeometry",
          "description": "Пиксельная геометрия фигуры."
        },
        {
          "isRequired": false,
          "param": "params",
          "type": "Object",
          "description": "Параметры фигуры."
        }
      ],
      "inherits": [
        "IShape"
      ]
    }
  },
  {
    "name": "shape.storage",
    "url": "shape.storage",
    "def": {
      "name": "shape.storage",
      "description": "Статический объект.\n\n\n            Экземпляр класса  util.Storage\n        \n\nХранилище геометрий хотспотных шейпов.\n\nМетоды ",
      "hasCtor": false
    }
  },
  {
    "name": "suggest",
    "url": "suggest",
    "def": {
      "name": "suggest",
      "hasCtor": false
    }
  },
  {
    "name": "SuggestView",
    "url": "SuggestView",
    "def": {
      "name": "SuggestView",
      "description": "Расширяет\n            ICustomizable, IEventEmitter.\n\nСоздаёт выпадающую панель с поисковыми подсказками\nи прикрепляет к HTML-элементу &lt;input type=\"text\"&gt;.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "element",
          "type": "HTMLElement|String",
          "description": "HTML-элемент или его id."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции."
        }
      ],
      "inherits": [
        "ICustomizable",
        "IEventEmitter"
      ],
      "methods": [
        {
          "desciption": "Уничтожает панель подсказок.",
          "name": "destroy"
        }
      ],
      "props": [
        {
          "type": "data.Manager",
          "description": "Состояние панели поисковых подсказок.\nИмена полей, доступных через метод data.Manager.get:\n\n    request: String — текущий активный запрос;\n    items: Object[] - массив поисковых подсказок (объектов с полями\nvalue и displayName);\n    activeIndex: Number|null - индекс текущей активной подсказки, выделенная\nпользователем путём наведения мыши или с клавиатуры, или null, если\nни одна подсказка не активка;\n    panelClosed: Boolean - признак, была ли панель закрыта пользователем\nпутём нажатия клавиши ESC или выбора одной из подсказок.\n",
          "name": "state"
        }
      ]
    }
  },
  {
    "name": "template.filtersStorage",
    "url": "template.filtersStorage",
    "def": {
      "name": "template.filtersStorage",
      "description": "Статический объект.\n\n\n            Экземпляр класса  util.Storage\n        \n\nХранилище фильтров для шаблонов.\nФильтры из хранилища можно использовать во всех макетах, созданных с помощью templateLayoutFactory.\nПо умолчанию в хранилище объявлены следующие ключи для фильтров:\n\n   default — позволяет устанавливать значения по умолчанию.\n     Например, так: {{ properties.header|default:\"Заголовок\" }}\n   \n\n\nМетоды \n\nПримеры: \n\n1.\n\n2.\n\n3.",
      "hasCtor": false
    }
  },
  {
    "name": "Template",
    "url": "Template",
    "def": {
      "name": "Template",
      "description": "Шаблонизатор.\nВ API Яндекс.Карт поддерживается базовый синтаксис языков шаблонов Twig/Django Templates.\nПоддерживаются следующие операции:\n\n\n{% if условие %} ... {% else %} ... {% endif %} или\n    Блок else или elseif можно опустить. Внутри блоков if, else и elseif можно использовать любые конструкции языка шаблонов.\n\n\n    {% for значение in массив_или_хеш %} ... {% endfor %}.\n    Внутри блока for можно использовать любые конструкции языка шаблонов.\n\n{% for key, value in массив_или_хеш %} ... {% endfor %}.\n\nКонструктор | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "text",
          "type": "String",
          "description": "Строка-шаблон."
        }
      ],
      "methods": [
        {
          "return": "Object",
          "params": [
            {
              "isRequired": true,
              "param": "data",
              "type": "IDataManager",
              "description": "Менеджер данных."
            }
          ],
          "desciption": "Возвращает объект с полями:\n\n    {String} text — результат выполнения шаблонизации;\n    {Object[]} renderedValues — массив c использованными данными из менеджера.\n",
          "name": "build"
        }
      ]
    }
  },
  {
    "name": "templateLayoutFactory",
    "url": "templateLayoutFactory",
    "def": {
      "name": "templateLayoutFactory",
      "description": "Статический объект.\n\nФабрика для создания класса макета из текстового шаблона.\nПозволяет создавать классы, реализующие интерфейс ILayout, используя язык шаблонов.\nВ API Яндекс.Карт поддерживается базовый синтаксис языков шаблонов Twig/Django Templates.\nБолее подробно о синтаксисе можно прочитать в описании Template.\n\nСм.: layout.templateBased.Base \n\nМетоды \n\nПримеры: \n\n1.\n\n2.\n\n3.\n\n4.",
      "hasCtor": false,
      "methods": [
        {
          "return": "Function",
          "params": [
            {
              "isRequired": true,
              "param": "template",
              "type": "String",
              "description": "Шаблон html-содержимого макетов."
            },
            {
              "isRequired": false,
              "param": "overrides",
              "type": "Object",
              "description": "Переопределения родительских методов. Можно переопределять/дополнять методы\nbuild, clear и rebuild."
            },
            {
              "isRequired": true,
              "param": "staticMethods",
              "type": ""
            }
          ],
          "desciption": "Возвращает конструктор макета. Созданный класс будет унаследован от\nкласса layout.templateBased.Base с переопределением списка методов,\nуказанных в overrides.",
          "name": "createClass"
        }
      ]
    }
  },
  {
    "name": "traffic.provider.Actual",
    "url": "traffic.provider.Actual",
    "def": {
      "name": "traffic.provider.Actual",
      "description": "Расширяет\n            ITrafficProvider.\n\nПровайдер актуальных пробок. Доступен в хранилище провайдеров под ключом 'traffic#actual'.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции провайдера. Опции для слоев провайдера задаются через\nопции глобальной коллекции слоев Map.layers.\n\n    Опции для картиночного слоя Layer\n    задаются с префиксом 'trafficImage';\n    Опции для слоя хотспотов hotspot.Layer\n    задаются с префиксом 'trafficJam';\n    Опции для слоя инфоточек задаются с префиксом\n    'trafficInfo'. Слой инфоточек является экземпляром класса\n    hotspot.Layer.\n"
        },
        {
          "isRequired": false,
          "param": "state",
          "type": "Object",
          "description": "Состояние провайдера."
        }
      ],
      "inherits": [
        "ITrafficProvider"
      ],
      "methods": [
        {
          "desciption": "Шлёт запрос на обновление пробок.",
          "name": "update"
        }
      ],
      "props": [
        {
          "type": "data.Manager",
          "description": "Состояние провайдера.\nИмена полей, доступных через метод data.Manager.get:\n\n    isInited - признак, готов ли провайдер предоставлять данные;\n    infoLayerShown - признак, показан ли слой дорожных событий;\n    timestamp - текущее время во временной зоне UTC+0 в секундах;\n    localtime - локальное время, для которого сервер в текущий момент отдает данные,\n    в формате 'ЧЧ:ММ';\n    level - уровень загруженности дорог в баллах - от 0 до 10;\n    isotime - строка, содержащая текущую дату в формате \"YYYY-MM-DDThh:mm:ss±hhmm\".\n",
          "name": "state"
        }
      ]
    }
  },
  {
    "name": "traffic.provider.Archive",
    "url": "traffic.provider.Archive",
    "def": {
      "name": "traffic.provider.Archive",
      "description": "Расширяет\n            ITrafficProvider.\n\nПровайдер архива пробок. Позволяет показывать состояние пробок,\nтипичное для данного региона в конкретный день недели и конкретное время суток.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции провайдера. Опции для слоев провайдера задаются через\nопции глобальной коллекции слоев Map.layers.\n\n    Опции для картиночного слоя Layer\n    задаются с префиксом 'trafficImage';\n    Опции для слоя хотспотов hotspot.Layer\n    задаются с префиксом 'trafficJam'.\n"
        },
        {
          "isRequired": false,
          "param": "state",
          "type": "Object",
          "description": "Состояние провайдера."
        }
      ],
      "inherits": [
        "ITrafficProvider"
      ],
      "methods": [
        {
          "return": "Object|null",
          "desciption": "Возвращает день недели, часы и минуты состояния провайдера\nс учетом часового пояса и перехода на зимнее/летнее время.\nТо есть то время, которое пользователь видит в элементе управления пробками.\n\nВозвращает объект с полями\n\n    dayOfWeek - Сокращенное название дня недели.\n    'mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun';\n    hours - часы;\n    minutes - минуты.\n\nЕсли центр карты находится в точке, для которой не удается опеределить часовой пояс,\nфункция возвращает null - если мы не знаем, в каком часовом поясе находимся,\nмы не можем узнать местное время.",
          "name": "getTime"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "time",
              "type": "Object",
              "description": "Объект с задаваемыми параметрами."
            },
            {
              "isRequired": false,
              "param": "callback",
              "type": "Function",
              "description": "Функция, которая вызывается после того, как было выставлено время.\nПринимает на вход хэш с выставленными данными."
            }
          ],
          "desciption": "Позволяет задавать время для архивного провайдера в минутах, часах и днях недели.\nВыставляет локальное время только после того, как провайдер инициализирует поля timeZone и dst.\n\n    timeZone - поле, которое показывает, в каком часовом поясе на данный момент находится центр карты.\nПри перемещении центра карты из одного часового пояса в другой локальное время может изменяться.\n    dst - признак перехода на летнее/зимнее время. При dst='dst' время летнее.\n\nПостоянной составляющей времени для провайдера пробок \"обычно\" служит поле timestamp,\nкоторое отражает текущее время в нулевом часовом поясе (UTC+0).\nПри переходе из одного часового пояса в другой timestamp не изменяется.\nЗначения полей timestamp, dst и timeZone можно получить через поле traffic.provider.Archive.state.",
          "name": "setTime"
        }
      ],
      "props": [
        {
          "type": "data.Manager",
          "description": "Состояние провайдера.\nИмена полей, доступных через метод data.Manager.get:\n\n    isInited - признак, готов ли провайдер предоставлять данные;\n    timeZone - смещение по времени для текущего временного пояса относительно UTC+0.\n    Измеряется в секундах.;\n    dst - признак перехода на зимнее/летнее время. При dst='dst' время летнее;\n    timestamp - текущее время во временной зоне UTC+0 в секундах;\n    localtime - локальное время, которое возвращает в ответе сервер;\n    level - уровень загруженности дорог в баллах - от 0 до 10.\n",
          "name": "state"
        }
      ]
    }
  },
  {
    "name": "traffic.provider.Forecast",
    "url": "traffic.provider.Forecast",
    "def": {
      "name": "traffic.provider.Forecast",
      "description": "Расширяет\n            ITrafficProvider.\n\nПровайдер прогноза пробок. Доступен в хранилище провайдеров под ключом 'traffic#forecast'.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции провайдера. Опции для слоев провайдера задаются через\nопции глобальной коллекции слоев Map.layers.\n\n    Опции для картиночного слоя Layer\n    задаются с префиксом 'trafficImage';\n    Опции для слоя хотспотов hotspot.Layer\n    задаются с префиксом 'trafficJam'.\n"
        },
        {
          "isRequired": false,
          "param": "state",
          "type": "Object",
          "description": "Состояние провайдера."
        }
      ],
      "inherits": [
        "ITrafficProvider"
      ],
      "methods": [
        {
          "return": "Object|null",
          "desciption": "Возвращает время, которое пользователь видит в элементе управления пробками.\n\nВозвращает объект с полями\n\n    dayOfWeek - Сокращенное название дня недели.\n    'mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun';\n    hours - часы;\n    minutes - минуты.\n\nЕсли центр карты находится в точке, для которой не удается опеределить часовой пояс,\nфункция возвращает null - если мы не знаем, в каком часовом поясе находимся,\nмы не можем узнать местное время.",
          "name": "getTime"
        }
      ],
      "props": [
        {
          "type": "data.Manager",
          "description": "Состояние провайдера.\nИмена полей, доступных через метод data.Manager.get:\n\n    isInited - признак, готов ли провайдер предоставлять данные;\n    timestamp - текущее время в формате unix timestamp в секундах;\n    localtime - локальное время, для которого сервер в текущий момент отдает данные,\n    в формате 'ЧЧ:ММ';\n    level - уровень загруженности дорог в баллах - от 0 до 10.\n    timeOffset - временной интервал между текущим временем и временем прогноза.\n    Измеряется в секундах и кратен 15 минутам (900 секундам)\n    isotime - строка, содержащая текущую дату в формате \"YYYY-MM-DDThh:mm:ss±hhmm\".\n",
          "name": "state"
        }
      ]
    }
  },
  {
    "name": "traffic.provider.storage",
    "url": "traffic.provider.storage",
    "def": {
      "name": "traffic.provider.storage",
      "description": "Статический объект.\n\n\n            Экземпляр класса  util.Storage\n        \n\nХранилище провайдеров.\n\nМетоды ",
      "hasCtor": false
    }
  },
  {
    "name": "util.AsyncStorage",
    "url": "util.AsyncStorage",
    "def": {
      "name": "util.AsyncStorage",
      "description": "Расширяет\n            util.Storage.\n\nХранилище, которое предоставляет асинхронный доступ к значениям по ключам.\n\nКонструктор | Методы ",
      "hasCtor": true,
      "inherits": [
        "util.Storage"
      ],
      "methods": [
        {
          "return": "util.AsyncStorage",
          "params": [
            {
              "isRequired": true,
              "param": "key",
              "type": "String",
              "description": "Ключ, по которому можно будет произвести асинхронный вызов."
            },
            {
              "isRequired": false,
              "param": "depends",
              "type": "String[]",
              "description": "Массив ключей значений из текущего хранилища,\nкоторые должны быть проинициализированы перед текущим. Этот аргумент может быть пропущен."
            },
            {
              "isRequired": true,
              "param": "resolveCallback",
              "type": "Function",
              "description": "Функция, которая определяет значение, доступное по ключу.\nПервым аргументом в resolveCallback поступит provide-функция, в которую нужно будет передать значение.\nВызов provide-функции может быть отложен во времени.\nПоследующие аргументы - это значения из хранилища, указанные в зависимостях.\nПорядок модулей будет соответствовать порядку в массиве depends."
            },
            {
              "isRequired": false,
              "param": "context",
              "type": "Object",
              "description": "Контекст исполнения функции."
            }
          ],
          "desciption": "Определение в хранилище асинхронного значения.\n\nВозвращает ссылку на себя.",
          "name": "define"
        },
        {
          "return": "Boolean",
          "params": [
            {
              "isRequired": true,
              "param": "key",
              "type": "String",
              "description": "Ключ значения."
            }
          ],
          "desciption": "Проверка доступности ключа в хранилище.\n\nВозвращает true - ключ опреден, false - нет.",
          "name": "isDefined"
        },
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": true,
              "param": "keys",
              "type": "String|String[]",
              "description": "Ключ или массив ключей."
            },
            {
              "isRequired": false,
              "param": "successCallback",
              "type": "Function",
              "description": "Функция обратного вызова, которая будет вызвана после получения всех значений.\nВ функцию как аргументы будут переданы значения из хранилища.\nПорядок аргументов будет соответствовать порядку в массиве keys."
            },
            {
              "isRequired": false,
              "param": "errorCallback",
              "type": "Function",
              "description": "Функция обратного вызова, которая будет вызвана в случае ошибки.\nВ функцию будет передан объект ошибки."
            },
            {
              "isRequired": false,
              "param": "context",
              "type": "Object",
              "description": "Контекст исполнения функции обратного вызова."
            }
          ],
          "desciption": "Асинхронный запрос на получение значений из хранилища.\n\nВозвращает объект-promise, который предоставляет асинхронный доступ к значению.",
          "name": "require"
        }
      ]
    }
  },
  {
    "name": "util.augment",
    "url": "util.augment",
    "def": {
      "name": "util.augment",
      "hasCtor": false
    }
  },
  {
    "name": "util.bind",
    "url": "util.bind",
    "def": {
      "name": "util.bind",
      "hasCtor": false
    }
  },
  {
    "name": "util.bounds",
    "url": "util.bounds",
    "def": {
      "name": "util.bounds",
      "description": "Статический объект.\n\nНабор статических методов для работы с прямоугольными областями, представленными в виде двух противоположных точек в координатной системе проекции.\n\nМетоды ",
      "hasCtor": false,
      "methods": [
        {
          "return": "Boolean",
          "params": [
            {
              "isRequired": true,
              "param": "bounds1",
              "type": "Number[][]",
              "description": "Первая область."
            },
            {
              "isRequired": true,
              "param": "bounds2",
              "type": "Number[][]",
              "description": "Вторая область."
            },
            {
              "isRequired": false,
              "param": "projection",
              "type": "IProjection",
              "description": "Проекция."
            }
          ],
          "desciption": "Определяет пересекаются ли две прямоугольные области.\n\nВозвращает признак пересечения.",
          "name": "areIntersecting"
        },
        {
          "return": "Boolean",
          "params": [
            {
              "isRequired": true,
              "param": "outer",
              "type": "Number[][]",
              "description": "Внешняя область"
            },
            {
              "isRequired": true,
              "param": "inner",
              "type": "Number[][]",
              "description": "Проверяемая область."
            },
            {
              "isRequired": false,
              "param": "projection",
              "type": "IProjection",
              "description": "Проекция."
            }
          ],
          "desciption": "Определяет содержат ли прямоугольная область другую прямоугольную область полностью.\n\nВозвращает признак попадания.",
          "name": "containsBounds"
        },
        {
          "return": "Boolean",
          "params": [
            {
              "isRequired": true,
              "param": "bounds",
              "type": "Number[][]",
              "description": "Внешняя область"
            },
            {
              "isRequired": true,
              "param": "point",
              "type": "Number[]",
              "description": "Проверяемая точка."
            },
            {
              "isRequired": false,
              "param": "projection",
              "type": "IProjection",
              "description": "Проекция."
            }
          ],
          "desciption": "Определяет содержат ли прямоугольная область точку.\n\nВозвращает признак попадания.",
          "name": "containsPoint"
        },
        {
          "return": "Number[][]",
          "params": [
            {
              "isRequired": true,
              "param": "sourceBounds",
              "type": "Number[][][]",
              "description": "Массив прямоугольных обласлей"
            },
            {
              "isRequired": false,
              "param": "projection",
              "type": "IProjection",
              "description": "Проекция."
            }
          ],
          "desciption": "Вычисляет прямоугольную область, в которую попадают все переданные.\n\nВозвращает вычисленная область.",
          "name": "fromBounds"
        },
        {
          "return": "Number[][]",
          "params": [
            {
              "isRequired": true,
              "param": "pixelBounds",
              "type": "Number[][]",
              "description": "Исходные границы."
            },
            {
              "isRequired": true,
              "param": "zoom",
              "type": "Number",
              "description": "Масштаб."
            },
            {
              "isRequired": false,
              "param": "projection",
              "type": "IProjection",
              "description": "Проекция, которая будет использоваться для вычисления геокоординат."
            }
          ],
          "desciption": "Производит перевод прямоугольной области из пиксельных координат в геокоординаты с учетом масштаба.\n\nВозвращает вычисленные границы в геокоординатах.",
          "name": "fromGlobalPixelBounds"
        },
        {
          "return": "Number[][]",
          "params": [
            {
              "isRequired": true,
              "param": "points",
              "type": "Number[][]",
              "description": "Массив точек."
            },
            {
              "isRequired": false,
              "param": "projection",
              "type": "IProjection",
              "description": "Проекция."
            }
          ],
          "desciption": "Вычисляет минимальную прямоугольную область, в которую попадают все переданные точки.\n\nВозвращает вычисленная область.",
          "name": "fromPoints"
        },
        {
          "return": "Number[]",
          "params": [
            {
              "isRequired": true,
              "param": "bounds",
              "type": "Number[][]",
              "description": "Область."
            },
            {
              "isRequired": false,
              "param": "projection",
              "type": "IProjection",
              "description": "Проекция."
            }
          ],
          "desciption": "Вычисляет центр прямоугольникой области в координатной системе проекции.\n\nВозвращает точку-центр в координатной системе входящих данных.",
          "name": "getCenter"
        },
        {
          "return": "Object",
          "params": [
            {
              "isRequired": true,
              "param": "bounds",
              "type": "Number[][]",
              "description": "Область, заданная в географических координатах.\nПервая точка содержит минимальные значения широты и долготы, вторая точка -\nмаксимальные."
            },
            {
              "isRequired": true,
              "param": "containerSize",
              "type": "Number[]",
              "description": "Размер контейнера карты."
            },
            {
              "isRequired": false,
              "param": "projection",
              "type": "IProjection",
              "description": "Проекция."
            },
            {
              "isRequired": false,
              "param": "params",
              "type": "Boolean|Object",
              "description": "Параметры или значение опции preciseZoom."
            }
          ],
          "desciption": "Вычисляет центр и уровень масштабирования, которые необходимо\nустановить карте для того, чтобы полностью отобразить переданную\nобласть.\n\nВозвращает объект с полями center (Number[]) и zoom (Number).",
          "name": "getCenterAndZoom"
        },
        {
          "return": "Number[][][]",
          "params": [
            {
              "isRequired": true,
              "param": "bounds1",
              "type": "Number[][]",
              "description": "Первая область."
            },
            {
              "isRequired": true,
              "param": "bounds2",
              "type": "Number[][]",
              "description": "Вторая область."
            },
            {
              "isRequired": false,
              "param": "projection",
              "type": "IProjection",
              "description": "Проекция."
            }
          ],
          "desciption": "Возвращает все пересечения двух прямоугольных областей. В случае, если данные передаются в геокоординатах, то пересечений может быть больше одного.\n\n\nЕсли области не пересекаются, то возвращается пустой массив.\n\nВозвращает прямоугольные области, которые образуются пересечением исходных.",
          "name": "getIntersections"
        },
        {
          "return": "Number[]",
          "params": [
            {
              "isRequired": true,
              "param": "bounds",
              "type": "Number[][]",
              "description": "Область."
            },
            {
              "isRequired": false,
              "param": "projection",
              "type": "IProjection",
              "description": "Проекция."
            }
          ],
          "desciption": "Вычисляет размеры прямоугольной области в координатной системе проекции.\n\nВозвращает размер области.",
          "name": "getSize"
        }
      ]
    }
  },
  {
    "name": "util.cursor.Accessor",
    "url": "util.cursor.Accessor",
    "def": {
      "name": "util.cursor.Accessor",
      "description": "Объект, предоставляющий доступ к добавленному на карту курсору.\n\nКонструктор | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "key",
          "type": "String",
          "description": "Ключ, под которым хранится курсор в хранилище курсоров."
        }
      ],
      "methods": [
        {
          "return": "String",
          "desciption": "Возвращает текущий ключ для доступа к курсору в хранилище курсоров.\n\nВозвращает ",
          "name": "getKey"
        },
        {
          "desciption": "Удаляет курсор с карты.",
          "name": "remove"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "key",
              "type": "String"
            }
          ],
          "desciption": "Задает новый ключ для доступа к курсору. По этому ключу должен находиться\nсоответствующий курсор в хранилище курсоров. В случае, если данный курсор\nактивен, то он сразу сменится.",
          "name": "setKey"
        }
      ]
    }
  },
  {
    "name": "util.cursor.Manager",
    "url": "util.cursor.Manager",
    "def": {
      "name": "util.cursor.Manager",
      "description": "Менеджер курсоров.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "element",
          "type": "HTMLElement",
          "description": "DOM-элемент, для которого выполняется установка курсоров."
        }
      ],
      "methods": [
        {
          "return": "util.cursor.Accessor",
          "params": [
            {
              "isRequired": true,
              "param": "key",
              "type": "String",
              "description": "Курсор. Допустимые значения:\n\n    \"arrow\" - стрелка;\n    \"crosshair\" - перекрестье;\n    \"grab\" - \"рука\";\n    \"grabbing\" - сжатая \"рука\"\n    \"help\" - стрелка со знаком вопроса;\n    \"zoom\" - лупа;\n    \"move\" - курсор в виде четырех стрелок;\n    \"pointer\" - \"палец\";\n    \"inherit\" - унаследовать курсор от родителя.\n"
            }
          ],
          "desciption": "Устанавливает новый курсор и дописывает его в стэк курсоров объекта.\n\nВозвращает объект, предоставляющий доступ к добавленному на карту курсору.",
          "name": "push"
        }
      ],
      "props": [
        {
          "type": "event.Manager",
          "description": "Менеджер событий менеджера курсоров.",
          "name": "events"
        }
      ]
    }
  },
  {
    "name": "util.defineClass",
    "url": "util.defineClass",
    "def": {
      "name": "util.defineClass",
      "hasCtor": false
    }
  },
  {
    "name": "util.Dragger",
    "url": "util.Dragger",
    "def": {
      "name": "util.Dragger",
      "description": "Расширяет\n            IEventEmitter.\n\nСпециальный инструмент, который предоставляет механизм для реализации перетаскивания элементов на странице.\nПри использовании следует обратить внимание, что во время работы драггера\nв системе событий API Яндекс.Карт не будут поступать события mousemove и mouseup.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "params",
          "type": "Object",
          "description": "Параметры драггера."
        }
      ],
      "inherits": [
        "IEventEmitter"
      ],
      "methods": [
        {
          "desciption": "Останавливает работу драггера и удаляет прослушивание события \"mousedown\" у элемента autoStartElement.",
          "name": "destroy"
        },
        {
          "return": "Boolean",
          "desciption": "Возвращает работает ли сейчас драггер.",
          "name": "isDragging"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "event",
              "type": "IDomEvent",
              "description": "Инициализирующее событие."
            }
          ],
          "desciption": "Запускает драггер.\nЭтот метод автоматически вызывается по событию \"mousedown\" элемента autoStartElement, если он задан.\nДанный метод можно использовать для инициализации по требованию.\nК примеру, при получении ответа от сервера.\nДля корректной работы при инициализации по требованию необходимо\nчтобы передаваемое событие поддерживало поле 'position' в методе get.",
          "name": "start"
        },
        {
          "desciption": "Останавливает драггер.\nЭтот метод можно использовать для досрочной остановки работы драггера.",
          "name": "stop"
        }
      ]
    }
  },
  {
    "name": "util.extend",
    "url": "util.extend",
    "def": {
      "name": "util.extend",
      "hasCtor": false
    }
  },
  {
    "name": "util.hd",
    "url": "util.hd",
    "def": {
      "name": "util.hd",
      "description": "Статический объект.\n\nПозволяет работать с HD экранами различных устройств.\n\nМетоды ",
      "hasCtor": false,
      "methods": [
        {
          "return": "Number",
          "desciption": "Возвращает отношение виртуальных пикселей на экране к физическим.",
          "name": "getPixelRatio"
        },
        {
          "return": "Number",
          "params": [
            {
              "isRequired": true,
              "param": "hash",
              "type": "IRatioMap",
              "description": "Объект типа IRatioMap для экранов с различным пиксельным соотношением."
            }
          ],
          "desciption": "Возвращает результат выборки — пиксельное соотношение, либо 1, если передана, например, строка.",
          "name": "selectRatio"
        },
        {
          "return": "Object",
          "params": [
            {
              "isRequired": true,
              "param": "hash",
              "type": "Object|IRatioMap",
              "description": "Объект типа IRatioMap для экранов с различным пиксельным соотношением."
            }
          ],
          "desciption": "Возвращает из переданного хэша объект равный или наиболее близкий к ключу соотношения пикселей.\nВ случае, если передан не хэш, а, например, строка или функция, вернется она же.\n\nВозвращает результат выборки, либо исходные данные, полученные на входе.",
          "name": "selectValue"
        }
      ]
    }
  },
  {
    "name": "util.math.areEqual",
    "url": "util.math.areEqual",
    "def": {
      "name": "util.math.areEqual",
      "hasCtor": false
    }
  },
  {
    "name": "util.math.cycleRestrict",
    "url": "util.math.cycleRestrict",
    "def": {
      "name": "util.math.cycleRestrict",
      "hasCtor": false
    }
  },
  {
    "name": "util.math.restrict",
    "url": "util.math.restrict",
    "def": {
      "name": "util.math.restrict",
      "hasCtor": false
    }
  },
  {
    "name": "util.pixelBounds",
    "url": "util.pixelBounds",
    "def": {
      "name": "util.pixelBounds",
      "description": "Статический объект.\n\nНабор статических методов для работы с прямоугольными областями, \nпредставленными в виде пары из верхней левой и нижней правой точек\nв декардовой координатной системе.\n\nМетоды ",
      "hasCtor": false,
      "methods": [
        {
          "return": "Boolean",
          "params": [
            {
              "isRequired": true,
              "param": "bounds1",
              "type": "Number[][]",
              "description": "Первая область."
            },
            {
              "isRequired": true,
              "param": "bounds2",
              "type": "Number[][]",
              "description": "Вторая область."
            }
          ],
          "desciption": "Определяет пересекаются ли две прямоугольные области.\n\nВозвращает признак пересечения.",
          "name": "areIntersecting"
        },
        {
          "return": "Boolean",
          "params": [
            {
              "isRequired": true,
              "param": "outer",
              "type": "Number[][]",
              "description": "Внешняя область"
            },
            {
              "isRequired": true,
              "param": "inner",
              "type": "Number[][]",
              "description": "Проверяемая область."
            }
          ],
          "desciption": "Определяет содержат ли прямоугольная область другую прямоугольную область полностью.\n\nВозвращает признак попадания.",
          "name": "containsBounds"
        },
        {
          "return": "Boolean",
          "params": [
            {
              "isRequired": true,
              "param": "bounds",
              "type": "Number[][]",
              "description": "Внешняя область"
            },
            {
              "isRequired": true,
              "param": "point",
              "type": "Number[]",
              "description": "Проверяемая точка."
            }
          ],
          "desciption": "Определяет содержат ли прямоугольная область точку.\n\nВозвращает признак попадания.",
          "name": "containsPoint"
        },
        {
          "return": "Number[][]",
          "params": [
            {
              "isRequired": true,
              "param": "sourceBounds",
              "type": "Number[][][]",
              "description": "Массив прямоугольных обласлей"
            }
          ],
          "desciption": "Вычисляет прямоугольную область, в которую попадают все переданные.\n\nВозвращает вычисленная область.",
          "name": "fromBounds"
        },
        {
          "return": "Number[][]",
          "params": [
            {
              "isRequired": true,
              "param": "points",
              "type": "Number[][]",
              "description": "Массив точек."
            }
          ],
          "desciption": "Вычисляет прямоугольную область, в которую попадают переданные точки.\n\nВозвращает вычисленная область.",
          "name": "fromPoints"
        },
        {
          "return": "Number[]",
          "params": [
            {
              "isRequired": true,
              "param": "bounds",
              "type": "Number[][]",
              "description": "Область."
            }
          ],
          "desciption": "Вычисляет центр прямоугольникой области.\n\nВозвращает точку-центр в координатной системе входящих данных.",
          "name": "getCenter"
        },
        {
          "return": "Number[][]|Null",
          "params": [
            {
              "isRequired": true,
              "param": "bounds1",
              "type": "Number[][]",
              "description": "Первая область."
            },
            {
              "isRequired": true,
              "param": "bounds2",
              "type": "Number[][]",
              "description": "Вторая область."
            }
          ],
          "desciption": "Вычисляет пересечение двух прямоугольных областей.\n\nВозвращает прямоугольную область, которая образуется пересечением переданных, либо Null, если области не пересекаются.",
          "name": "getIntersection"
        },
        {
          "return": "Number[]",
          "params": [
            {
              "isRequired": true,
              "param": "bounds",
              "type": "Number[][]",
              "description": "Область."
            }
          ],
          "desciption": "Вычисляет размеры прямоугольной области.\n\nВозвращает размер области.",
          "name": "getSize"
        }
      ]
    }
  },
  {
    "name": "util.requireCenterAndZoom",
    "url": "util.requireCenterAndZoom",
    "def": {
      "name": "util.requireCenterAndZoom",
      "hasCtor": false
    }
  },
  {
    "name": "util.Storage",
    "url": "util.Storage",
    "def": {
      "name": "util.Storage",
      "description": "Хранилище объектов по ключу.\n\nКонструктор | Методы ",
      "hasCtor": true,
      "methods": [
        {
          "return": "util.Storage",
          "params": [
            {
              "isRequired": true,
              "param": "key",
              "type": "String",
              "description": "Ключ."
            },
            {
              "isRequired": true,
              "param": "object",
              "type": "Object",
              "description": "Хранимый объект."
            }
          ],
          "desciption": "Добавляет объект в хранилище.\n\nВозвращает ссылку на себя.",
          "name": "add"
        },
        {
          "return": "Object",
          "params": [
            {
              "isRequired": true,
              "param": "key",
              "type": "String|Object",
              "description": "Ключ."
            }
          ],
          "desciption": "Возвращает объект, хранящийся под указанным ключом или исходный key, в случае, если это не строка.",
          "name": "get"
        },
        {
          "return": "util.Storage",
          "params": [
            {
              "isRequired": true,
              "param": "key",
              "type": "String",
              "description": "Ключ."
            }
          ],
          "desciption": "Удаляет пару \"ключ: значение\" из хранилища.\n\nВозвращает ссылку на себя.",
          "name": "remove"
        }
      ]
    }
  },
  {
    "name": "vow",
    "url": "vow",
    "def": {
      "name": "vow",
      "description": "Статический объект.\n\nСодержит методы для создания и обработки объектов-promise.\n\n\nПримечание.&nbsp;\n  Данный класс является частью библиотеки Vow.\n  Ниже описаны только некоторые методы. Полный список методов доступен здесь:\n  http://dfilatov.github.io/vow/.\n  Copyright (c) 2012-2013 Filatov Dmitry (dfilatov@yandex-team.ru).\n  Dual licensed under the MIT\n  and GPL licenses.\n\n\nДанный класс является частью библиотеки Vow.\n\n\n  \n\nНиже описаны только некоторые методы. Полный список методов доступен здесь:\n  http://dfilatov.github.io/vow/.\n\n\n  \n\nCopyright (c) 2012-2013 Filatov Dmitry (dfilatov@yandex-team.ru).\n  Dual licensed under the MIT\n  and GPL licenses.\n\nМетоды ",
      "hasCtor": false,
      "methods": [
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": true,
              "param": "iterable",
              "type": "Object|Object[]",
              "description": "Набор объектов-promise и/или значений."
            }
          ],
          "desciption": "Возвращает объект-promise, который будет разрешен или отклонён только\nкогда будут разрешены или отклонены все указанные объекты.",
          "name": "all"
        },
        {
          "return": "vow.Deferred",
          "desciption": "Создаёт новый deferred-объект. Эквивалент для `new ymaps.vow.Deferred()`.\n\nСм.: vow.Deferred \n\nВозвращает объект-deferred.",
          "name": "defer"
        },
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": true,
              "param": "reason",
              "type": "Object",
              "description": "Причина отклонения."
            }
          ],
          "desciption": "Возвращает объект-promise, отклонённый с указанной причиной.",
          "name": "reject"
        },
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": true,
              "param": "value",
              "type": "Object",
              "description": "Значение."
            }
          ],
          "desciption": "Возвращает объект-promise, разрешённый указанным значением.",
          "name": "resolve"
        }
      ]
    }
  },
  {
    "name": "vow.Deferred",
    "url": "vow.Deferred",
    "def": {
      "name": "vow.Deferred",
      "description": "Класс, описывающий объекты-deferred.\n\n\nПримечание.&nbsp;\n  Данный класс является частью библиотеки Vow.\n  Ниже описаны только некоторые методы. Полный список методов доступен здесь:\n  http://dfilatov.github.io/vow/.\n  Copyright (c) 2012-2013 Filatov Dmitry (dfilatov@yandex-team.ru).\n  Dual licensed under the MIT\n  and GPL licenses.\n\n\nДанный класс является частью библиотеки Vow.\n\n\n  \n\nНиже описаны только некоторые методы. Полный список методов доступен здесь:\n  http://dfilatov.github.io/vow/.\n\n\n  \n\nCopyright (c) 2012-2013 Filatov Dmitry (dfilatov@yandex-team.ru).\n  Dual licensed under the MIT\n  and GPL licenses.\n\n\n\n\nПримечание.&nbsp;Не является отдельным модулем: доступен после подключения модуля vow.\n\nКонструктор | Методы ",
      "hasCtor": true,
      "methods": [
        {
          "return": "vow.Promise",
          "desciption": "Возвращает связанный объект-promise.",
          "name": "promise"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "reason",
              "type": "Object",
              "description": "Причина отклонения."
            }
          ],
          "desciption": "Отклоняет связанный объект-promise с указанной причиной.",
          "name": "reject"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "value",
              "type": "Object",
              "description": "Значение."
            }
          ],
          "desciption": "Разрешает связанный объект-promise указанным значением.",
          "name": "resolve"
        }
      ]
    }
  },
  {
    "name": "vow.Promise",
    "url": "vow.Promise",
    "def": {
      "name": "vow.Promise",
      "description": "Класс, описывающий объекты-promise.\n\n\nСпецификация Promise/A+.\n\n\n\n\nПримечание.&nbsp;\n  Данный класс является частью библиотеки Vow.\n  Ниже описаны только некоторые методы. Полный список методов доступен здесь:\n  http://dfilatov.github.io/vow/.\n  Copyright (c) 2012-2013 Filatov Dmitry (dfilatov@yandex-team.ru).\n  Dual licensed under the MIT\n  and GPL licenses.\n\n\nДанный класс является частью библиотеки Vow.\n\n\n  \n\nНиже описаны только некоторые методы. Полный список методов доступен здесь:\n  http://dfilatov.github.io/vow/.\n\n\n  \n\nCopyright (c) 2012-2013 Filatov Dmitry (dfilatov@yandex-team.ru).\n  Dual licensed under the MIT\n  and GPL licenses.\n\n\n\n\nПримечание.&nbsp;Не является отдельным модулем: доступен после подключения модуля vow.\n\nКонструктор | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "resolver",
          "type": "Function",
          "description": "Функция, которая принимает в качестве параметров методы resolve и reject\nдля установки состояния и значения создаваемому объекту-promise."
        }
      ],
      "methods": [
        {
          "params": [
            {
              "isRequired": false,
              "param": "onFulfilled",
              "type": "Function",
              "description": "Функция обратного вызова, которая будет вызвана в случае если объект-promise будет разрешён."
            },
            {
              "isRequired": false,
              "param": "onRejected",
              "type": "Function",
              "description": "Функция обратного вызова, которая будет вызвана в случае если объект-promise будет отклонён."
            },
            {
              "isRequired": false,
              "param": "onProgress",
              "type": "Function",
              "description": "Функция обратного вызова, которая будет вызвана при \"оповещении\" объекта-promise."
            },
            {
              "isRequired": false,
              "param": "ctx",
              "type": "Object",
              "description": "Контекст выполнения функций обратного вызова."
            }
          ],
          "desciption": "Аналог метода vow.Promise.then, завершающий цепочку промисов.\nКидает исключение в случае отклонения объекта-promise.",
          "name": "done"
        },
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": false,
              "param": "onFulfilled",
              "type": "Function",
              "description": "Функция обратного вызова, которая будет вызвана в случае если объект-promise будет разрешён."
            },
            {
              "isRequired": false,
              "param": "onRejected",
              "type": "Function",
              "description": "Функция обратного вызова, которая будет вызвана в случае если объект-promise будет отклонён."
            },
            {
              "isRequired": false,
              "param": "ctx",
              "type": "Object",
              "description": "Контекст выполнения функций обратного вызова."
            }
          ],
          "desciption": "Аналог метода vow.Promise.then, вызывающий функции обратного вызова с набором аргументов,\nсоответствующим массиву, которым будет разрешён/отклонён объект-promise.\nОбычно используется в сочетании с методами типа vow.all.\n\nВозвращает новый объект-promise.",
          "name": "spread"
        },
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": false,
              "param": "onFulfilled",
              "type": "Function",
              "description": "Функция обратного вызова, которая будет вызвана в случае если объект-promise будет разрешён."
            },
            {
              "isRequired": false,
              "param": "onRejected",
              "type": "Function",
              "description": "Функция обратного вызова, которая будет вызвана в случае если объект-promise будет отклонён."
            },
            {
              "isRequired": false,
              "param": "onProgress",
              "type": "Function",
              "description": "Функция обратного вызова, которая будет вызвана при \"оповещении\" объекта-promise."
            },
            {
              "isRequired": false,
              "param": "ctx",
              "type": "Object",
              "description": "Контекст выполнения функций обратного вызова."
            }
          ],
          "desciption": "Задаёт функцию-обработчик для объекта-promise.\n\nВозвращает новый объект-promise, см. спецификацию.",
          "name": "then"
        },
        {
          "return": "Object",
          "desciption": "Возвращает значение для разрешённого объекта-promise или причину отклонения для отклонённого.",
          "name": "valueOf"
        }
      ]
    }
  },
  {
    "name": "IBalloon",
    "url": "IBalloon",
    "def": {
      "name": "IBalloon",
      "description": "Расширяет\n            IPopup.\n\nИнтерфейс балуна.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IPopup"
      ],
      "methods": [
        {
          "return": "vow.Promise",
          "desciption": "Перемещает карту таким образом, чтобы балун оказался видимым.\n\nВозвращает объект-promise.",
          "name": "autoPan"
        }
      ]
    }
  },
  {
    "name": "IBalloonLayout",
    "url": "IBalloonLayout",
    "def": {
      "name": "IBalloonLayout",
      "description": "Расширяет\n            ILayout.\n\nИнтерфейс макета балуна.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "ILayout"
      ]
    }
  },
  {
    "name": "IBalloonManager",
    "url": "IBalloonManager",
    "def": {
      "name": "IBalloonManager",
      "description": "Расширяет\n            IPopupManager.\n\nИнтерфейс менеджера балуна.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IPopupManager"
      ],
      "methods": [
        {
          "return": "vow.Promise",
          "desciption": "Перемещает карту таким образом, чтобы балун оказался видимым.\n\nВозвращает объект-promise.",
          "name": "autoPan"
        }
      ]
    }
  },
  {
    "name": "IBalloonOwner",
    "url": "IBalloonOwner",
    "def": {
      "name": "IBalloonOwner",
      "description": "Объект, имеющий балун, доступный через свойство \"balloon\".\n\nКонструктор | Поля  | События ",
      "hasCtor": true,
      "props": [
        {
          "type": "IBalloonManager",
          "description": "Балун объекта.",
          "name": "balloon"
        }
      ]
    }
  },
  {
    "name": "IBaseCircleGeometry",
    "url": "IBaseCircleGeometry",
    "def": {
      "name": "IBaseCircleGeometry",
      "description": "Расширяет\n            IBaseGeometry, ICircleGeometryAccess.\n\nИнтерфейс геометрии \"Круг\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IBaseGeometry",
        "ICircleGeometryAccess"
      ],
      "methods": [
        {
          "return": "String",
          "desciption": "Возвращает строку \"Circle\".",
          "name": "getType"
        }
      ]
    }
  },
  {
    "name": "IBaseGeometry",
    "url": "IBaseGeometry",
    "def": {
      "name": "IBaseGeometry",
      "description": "Расширяет\n            IEventEmitter.\n\nИнтерфейс базовой геометрии.\n\nКонструктор | Поля  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IEventEmitter"
      ],
      "methods": [
        {
          "return": "Number[][]|null",
          "desciption": "Возвращает координаты двух противоположных углов области, охватывающей геометрию.\nПервый элемент массива - угол с наименьшими значениями координат относительно остальных точек области;\nвторой элемент - угол с наибольшими значениями координат.",
          "name": "getBounds"
        },
        {
          "return": "String",
          "desciption": "Возвращает идентификатор типа геометрии.",
          "name": "getType"
        }
      ]
    }
  },
  {
    "name": "IBaseLinearRingGeometry",
    "url": "IBaseLinearRingGeometry",
    "def": {
      "name": "IBaseLinearRingGeometry",
      "description": "Расширяет\n            IBaseGeometry, ILinearRingGeometryAccess.\n\nИнтерфейс геометрии \"Замкнутый контур\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IBaseGeometry",
        "ILinearRingGeometryAccess"
      ],
      "methods": [
        {
          "return": "String",
          "desciption": "Возвращает строку \"LinearRing\".",
          "name": "getType"
        }
      ]
    }
  },
  {
    "name": "IBaseLineStringGeometry",
    "url": "IBaseLineStringGeometry",
    "def": {
      "name": "IBaseLineStringGeometry",
      "description": "Расширяет\n            IBaseGeometry, ILineStringGeometryAccess.\n\nИнтерфейс геометрии \"Ломаная линия\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IBaseGeometry",
        "ILineStringGeometryAccess"
      ],
      "methods": [
        {
          "return": "String",
          "desciption": "Возвращает строку \"LineString\".",
          "name": "getType"
        }
      ]
    }
  },
  {
    "name": "IBasePointGeometry",
    "url": "IBasePointGeometry",
    "def": {
      "name": "IBasePointGeometry",
      "description": "Расширяет\n            IBaseGeometry, IPointGeometryAccess.\n\nИнтерфейс геометрии \"Точка\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IBaseGeometry",
        "IPointGeometryAccess"
      ],
      "methods": [
        {
          "return": "String",
          "desciption": "Возвращает строку \"Point\".",
          "name": "getType"
        }
      ]
    }
  },
  {
    "name": "IBasePolygonGeometry",
    "url": "IBasePolygonGeometry",
    "def": {
      "name": "IBasePolygonGeometry",
      "description": "Расширяет\n            IBaseGeometry, IPolygonGeometryAccess.\n\nИнтерфейс геометрии \"Многоугольник\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IBaseGeometry",
        "IPolygonGeometryAccess"
      ],
      "methods": [
        {
          "return": "String",
          "desciption": "Возвращает строку \"Polygon\".",
          "name": "getType"
        }
      ]
    }
  },
  {
    "name": "IBaseRectangleGeometry",
    "url": "IBaseRectangleGeometry",
    "def": {
      "name": "IBaseRectangleGeometry",
      "description": "Расширяет\n            IBaseGeometry, IRectangleGeometryAccess.\n\nИнтерфейс геометрии \"Прямоугольник\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IBaseGeometry",
        "IRectangleGeometryAccess"
      ],
      "methods": [
        {
          "return": "String",
          "desciption": "Возвращает строку \"Rectangle\".",
          "name": "getType"
        }
      ]
    }
  },
  {
    "name": "IBehavior",
    "url": "IBehavior",
    "def": {
      "name": "IBehavior",
      "description": "Расширяет\n            IChildOnMap, ICustomizable.\n\nПоведение карты. Добавляет к карте реакцию на определённые пользовательские действия\n(например, таскание, масштабирование правой кнопкой мыши, многосенсорное касание).\nПоведение по умолчанию выключено и включается вызовом метода enable.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции поведения."
        }
      ],
      "inherits": [
        "IChildOnMap",
        "ICustomizable"
      ],
      "methods": [
        {
          "desciption": "Выключает поведение.",
          "name": "disable"
        },
        {
          "desciption": "Включает поведение.",
          "name": "enable"
        },
        {
          "return": "Boolean",
          "desciption": "Проверяет, включено ли поведение.\n\nВозвращает true - поведение включено, false - выключено.",
          "name": "isEnabled"
        }
      ]
    }
  },
  {
    "name": "ICanvasTile",
    "url": "ICanvasTile",
    "def": {
      "name": "ICanvasTile",
      "description": "Интерфейс тайлов, умеющих отображаться на 2d-контексте объекта canvas.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "url",
          "type": "String",
          "description": "URL тайла."
        }
      ],
      "methods": [
        {
          "desciption": "Уничтожает тайл.",
          "name": "destroy"
        },
        {
          "return": "Boolean",
          "desciption": "Проверяет готовность тайла.\n\nВозвращает true - тайл готов, false - тайл не готов.",
          "name": "isReady"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "context",
              "type": "Object",
              "description": "2d-контекст объекта canvas."
            },
            {
              "isRequired": true,
              "param": "canvasSize",
              "type": "Number[]",
              "description": "размеры HTML-элемента canvas."
            },
            {
              "isRequired": true,
              "param": "bounds",
              "type": "Number[][]",
              "description": "Область в клиентских координатах, в которой нужно отрисовать тайл."
            },
            {
              "isRequired": false,
              "param": "animate",
              "type": "Boolean",
              "description": "true - анимировать рендеринг, false - нет."
            }
          ],
          "desciption": "Отрисовывает картиночный тайл на 2d-контексте объекта canvas.",
          "name": "renderAt"
        }
      ],
      "props": [
        {
          "type": "IEventManager",
          "description": "Менеджер событий тайла.",
          "name": "events"
        }
      ]
    }
  },
  {
    "name": "IChild",
    "url": "IChild",
    "def": {
      "name": "IChild",
      "description": "Расширяет\n            IEventEmitter.\n\nИнтерфейс объекта, имеющего родителя.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IEventEmitter"
      ],
      "methods": [
        {
          "return": "Object",
          "desciption": "Возвращает ссылку на родительский объект.",
          "name": "getParent"
        },
        {
          "return": "IChild",
          "params": [
            {
              "isRequired": true,
              "param": "parent",
              "type": "Object",
              "description": "Родительский объект."
            }
          ],
          "desciption": "Устанавливает родительский объект.\n\nВозвращает ссылку на себя.",
          "name": "setParent"
        }
      ]
    }
  },
  {
    "name": "IChildOnMap",
    "url": "IChildOnMap",
    "def": {
      "name": "IChildOnMap",
      "description": "Расширяет\n            IChild.\n\nИнтерфейс объекта, родитель которого относится к определенной карте.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IChild"
      ],
      "methods": [
        {
          "return": "IControlParent|null",
          "desciption": "Возвращает ссылку на родительский объект или null,\nесли родительский элемент не был установлен.",
          "name": "getParent"
        },
        {
          "return": "IChildOnMap",
          "params": [
            {
              "isRequired": true,
              "param": "parent",
              "type": "IControlParent|null",
              "description": "Родительский объект."
            }
          ],
          "desciption": "Устанавливает родительский объект. Если передать значение null,\nто элемент управления будет только удален из текущего родительского объекта.\n\nВозвращает ссылку на себя.",
          "name": "setParent"
        }
      ]
    }
  },
  {
    "name": "ICircleGeometry",
    "url": "ICircleGeometry",
    "def": {
      "name": "ICircleGeometry",
      "description": "Расширяет\n            ICircleGeometryAccess, IGeometry.\n\nИнтерфейс геометрии \"Круг\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "ICircleGeometryAccess",
        "IGeometry"
      ],
      "methods": [
        {
          "return": "String",
          "desciption": "Возвращает строку \"Circle\".",
          "name": "getType"
        }
      ]
    }
  },
  {
    "name": "ICircleGeometryAccess",
    "url": "ICircleGeometryAccess",
    "def": {
      "name": "ICircleGeometryAccess",
      "description": "Расширяет\n            IFreezable.\n\nИнтерфейс доступа к геометрии \"Круг\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IFreezable"
      ],
      "methods": [
        {
          "return": "Boolean",
          "params": [
            {
              "isRequired": true,
              "param": "position",
              "type": "Number[]",
              "description": "Координаты точки."
            }
          ],
          "desciption": "Проверяет, лежит ли переданная точка внутри круга.\n\nВозвращает признак принадлежности точки кругу.",
          "name": "contains"
        },
        {
          "return": "Object",
          "params": [
            {
              "isRequired": true,
              "param": "anchorPosition",
              "type": "Number[]",
              "description": "Координаты точки, для которой расчитывается ближайшая точка на окружности."
            }
          ],
          "desciption": "Ищет на окружности точку, ближайшую к anchorPosition.\n\nВозвращает объект со следующими полями:\n\n    position - точка на окружности, ближайшая к anchorPosition;\n    distance - расстояние от anchorPosition до position;\n",
          "name": "getClosest"
        },
        {
          "return": "Number[]|null",
          "desciption": "Возвращает координаты центра круга.",
          "name": "getCoordinates"
        },
        {
          "return": "Number",
          "desciption": "Возвращает радиус круга.",
          "name": "getRadius"
        },
        {
          "return": "ICircleGeometryAccess",
          "params": [
            {
              "isRequired": true,
              "param": "coordinates",
              "type": "Number[]|null",
              "description": "Координаты центра круга."
            }
          ],
          "desciption": "Задает координаты центра круга.\n\nВозвращает ссылку на себя.",
          "name": "setCoordinates"
        },
        {
          "return": "ICircleGeometryAccess",
          "params": [
            {
              "isRequired": true,
              "param": "radius",
              "type": "Number",
              "description": "Радиус круга."
            }
          ],
          "desciption": "Задает радиус круга.\n\nВозвращает ссылку на себя.",
          "name": "setRadius"
        }
      ]
    }
  },
  {
    "name": "ICollection",
    "url": "ICollection",
    "def": {
      "name": "ICollection",
      "description": "Расширяет\n            IEventEmitter.\n\nИнтерфейс коллекции.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IEventEmitter"
      ],
      "methods": [
        {
          "return": "ICollection",
          "params": [
            {
              "isRequired": true,
              "param": "object",
              "type": "Object",
              "description": "Добавляемый объект."
            }
          ],
          "desciption": "Добавляет в коллекцию дочерний объект.\n\nВозвращает ссылку на себя.",
          "name": "add"
        },
        {
          "return": "IIterator",
          "desciption": "Возвращает итератор по коллекции.",
          "name": "getIterator"
        },
        {
          "return": "ICollection",
          "params": [
            {
              "isRequired": true,
              "param": "object",
              "type": "Object",
              "description": "Удаляемый объект."
            }
          ],
          "desciption": "Удаляет из коллекции дочерний объект.\n\nВозвращает ссылку на себя.",
          "name": "remove"
        }
      ]
    }
  },
  {
    "name": "IContainerPane",
    "url": "IContainerPane",
    "def": {
      "name": "IContainerPane",
      "description": "Расширяет\n            IPane, IPositioningContext.\n\nИнтерфейс пейна карты, предназначенного для размещения отображений объектов, расположенных на\nповерхности карты. Предоставляет возможность перевода глобальных пикселей карты в собственную\nлокальную координатную систему, и т.о. позволяет объекту позиционироваться внутри себя.\nТакже информирует об изменении состояния карты и т.о. позволяет объекту обрабатывать эти\nизменения.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IPane",
        "IPositioningContext"
      ],
      "methods": [
        {
          "return": "Number[][]",
          "desciption": "Возвращает область показа пейна в клиентских координатах.",
          "name": "getViewport"
        }
      ]
    }
  },
  {
    "name": "IControl",
    "url": "IControl",
    "def": {
      "name": "IControl",
      "description": "Расширяет\n            IChildOnMap.\n\nЭлемент управления.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции элемента управления."
        }
      ],
      "inherits": [
        "IChildOnMap"
      ],
      "methods": [
        {
          "return": "IControlParent|null",
          "desciption": "Возвращает ссылку на родительский объект или null, \nесли родительский элемент не был установлен.",
          "name": "getParent"
        },
        {
          "return": "IChildOnMap",
          "params": [
            {
              "isRequired": true,
              "param": "parent",
              "type": "IControlParent|null",
              "description": "Родительский объект."
            }
          ],
          "desciption": "Устанавливает родительский объект. Если передать значение null,\nто элемент управления будет только удален из текущего родительского объекта.\n\nВозвращает ссылку на себя.",
          "name": "setParent"
        }
      ],
      "props": [
        {
          "type": "IOptionManager",
          "description": "Менеджер опций.",
          "name": "options"
        }
      ]
    }
  },
  {
    "name": "IControlParent",
    "url": "IControlParent",
    "def": {
      "name": "IControlParent",
      "description": "Расширяет\n            IParentOnMap.\n\nИнтерфейс родительского объекта для элемента управления.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IParentOnMap"
      ],
      "methods": [
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": true,
              "param": "child",
              "type": "IControl",
              "description": "Дочерний объект."
            }
          ],
          "desciption": "Возвращает объект-обещание, который подтвержается HTML-элементом,\nв котором должен разместиться дочерний элемент.\n\nВозвращает объект-обещание.",
          "name": "getChildElement"
        }
      ],
      "props": [
        {
          "type": "IDataManager",
          "description": "Менеджер состояний.",
          "name": "state"
        }
      ]
    }
  },
  {
    "name": "ICoordSystem",
    "url": "ICoordSystem",
    "def": {
      "name": "ICoordSystem",
      "description": "Интерфейс координатной системы карты. Этот интерфейс необходимо реализовать\nв случае использования нестандартных (например, цилиндрических) координат.\n\n\n\nСм.: coordSystem.geo coordSystem.cartesian \n\nКонструктор | Методы ",
      "hasCtor": true,
      "methods": [
        {
          "return": "Number",
          "params": [
            {
              "isRequired": true,
              "param": "point1",
              "type": "Number[]",
              "description": "Первая точка."
            },
            {
              "isRequired": true,
              "param": "point2",
              "type": "Number[]",
              "description": "Вторая точка."
            }
          ],
          "desciption": "Возвращает кратчайшее (вдоль геодезической линии)\nрасстояние между двумя заданными точками (в метрах).",
          "name": "getDistance"
        },
        {
          "return": "Object",
          "params": [
            {
              "isRequired": true,
              "param": "startPoint",
              "type": "Number[]",
              "description": "Точка отправления."
            },
            {
              "isRequired": true,
              "param": "direction",
              "type": "Number[]",
              "description": "Направление. Задаётся в виде\nвектора (приращение координат) [dlat, dlon] либо [dlon, dlat],\nв завивимости от параметра coordorder.\nДля того, чтобы получить из заданного таким образом направления\nазимут (угол между направлением движения и направлением на север),\nнеобходимо вычислить арктангенс величины dlat/dlon (в JavaScript\n- стандартная функция Math.atan2(dlat, dlon)); для того, чтобы по\nизвестному азимуту a вычислить направление движения, нужно положить\ndlat = cos(a), dlon = sin(a)."
            },
            {
              "isRequired": true,
              "param": "distance",
              "type": "Number",
              "description": "Пройденное расстояние в метрах."
            }
          ],
          "desciption": "Решает так называемую первую (прямую) геодезическую задачу:\nгде мы окажемся, если выйдем из указанной точки в указанном направлении\nи пройдём, не сворачивая, указанное расстояние.\n\nРешением прямой геодезической задачи являются следующие данные:\n\nконечная точка,\nконечное направление,\nфункция пути,\nфункция, позволяющая для произвольного момента времени указать, в какой точке мы будем находиться и в\nкаком направлении двигаться.\n\n\nВозвращает объект с полями:\n\n startPoint - начальная точка в геокоординатах,\n startDirection - начальное направление движения,\n endPoint - конечная точка в геокоординатах,\n endDirection - конечное направление движения,\n distance - расстояние в метрах,\n pathFunction - Функция, принимающая число от 0 до 1 (доля пройденного пути)\nи возвращающая структуру с полями point и direction.\n",
          "name": "solveDirectProblem"
        },
        {
          "return": "Object",
          "params": [
            {
              "isRequired": true,
              "param": "startPoint",
              "type": "Number[]",
              "description": "Точка отправления."
            },
            {
              "isRequired": true,
              "param": "endPoint",
              "type": "Number[]",
              "description": "Точка прибытия."
            },
            {
              "isRequired": false,
              "param": "reverseDirection",
              "type": "Boolean",
              "description": "Направление движения.\nfalse - выбрать кратчайшую дугу, true - выбрать обратную кратчайшей."
            }
          ],
          "desciption": "Решает так называемую вторую (обратную) геодезическую задачу:\nпостроить кратчайший маршрут между двумя точками на картографируемой поверхности и\nопределелить расстояние и направление движения.\n\nОбратите внимание: на карте земной поверхности кратчайшие маршруты\nизображаются кривыми линиями. Для геообъектов в API можно включить\nрежим отображения кратчайших расстояний между точками с помощью опции geodesic.\n\nВозвращает объект с полями:\n\n startPoint - начальная точка в геокоординатах, \n startDirection - начальное направление движения, \n endPoint - конечная точка в геокоординатах, \n endDirection - конечное направление движения, \n distance - расстояние в метрах, \n pathFunction - Функция пути, принимающая число от 0 до 1 (доля пройденного пути)\nи возвращающая структуру с полями point и direction. \n",
          "name": "solveInverseProblem"
        }
      ]
    }
  },
  {
    "name": "ICopyrightsAccessor",
    "url": "ICopyrightsAccessor",
    "def": {
      "name": "ICopyrightsAccessor",
      "description": "Расширяет\n            ICopyrightsProvider.\n\nИнтерфейс объекта, предоставляющего доступ к\nпользовательской информации об авторских правах, добавленной\nна карту с помощью метода map.Copyrights.add.\n\nСм.: map.Copyrights.add \n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "ICopyrightsProvider"
      ]
    }
  },
  {
    "name": "ICopyrightsProvider",
    "url": "ICopyrightsProvider",
    "def": {
      "name": "ICopyrightsProvider",
      "description": "Расширяет\n            IEventEmitter.\n\nПровайдер информации об авторских правах.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IEventEmitter"
      ],
      "methods": [
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": true,
              "param": "coords",
              "type": "Number[]",
              "description": "Точка на карте, для которой запрашивается\nинформация об авторских правах."
            },
            {
              "isRequired": true,
              "param": "zoom",
              "type": "Number",
              "description": "Уровень масштабирования, для которого запрашивается\nинформация об авторских правах."
            }
          ],
          "desciption": "Запрашивает информацию об авторских правах в указанной\nточке с указанным коэффициентом масштабирования.\nВозвращает объект-promise, который будет подтверждён\nи передаст в качестве результата массив строк или DOM-элементов\nс информацией об авторских правах.\n\nВозвращает объект-promise.",
          "name": "getCopyrights"
        },
        {
          "desciption": "Удаляет добавленную через данный объект информацию\nоб авторских правах.",
          "name": "remove"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "copyrights",
              "type": "String|HTMLElement|String[]|HTMLElement[]",
              "description": "Информация об авторских правах."
            }
          ],
          "desciption": "Задаёт новое значение для добавленной через\nданный объект информации об авторских правах.",
          "name": "setCopyrights"
        }
      ]
    }
  },
  {
    "name": "ICustomizable",
    "url": "ICustomizable",
    "def": {
      "name": "ICustomizable",
      "description": "Интерфейс объекта, который можно настраивать с помощью глобального реестра опций.\n\nКонструктор | Поля  | События ",
      "hasCtor": true,
      "props": [
        {
          "type": "IOptionManager",
          "description": "Менеджер опций.",
          "name": "options"
        }
      ]
    }
  },
  {
    "name": "IDataManager",
    "url": "IDataManager",
    "def": {
      "name": "IDataManager",
      "description": "Расширяет\n            IEventEmitter.\n\nИнтерфейс менеджера произвольных данных.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IEventEmitter"
      ],
      "methods": [
        {
          "return": "Object",
          "params": [
            {
              "isRequired": true,
              "param": "path",
              "type": "String",
              "description": "Строка с именем свойства; может содержать '.'."
            },
            {
              "isRequired": true,
              "param": "defaultValue",
              "type": "Object",
              "description": "Значение по умолчанию."
            }
          ],
          "desciption": "Возвращает значение поля данных.",
          "name": "get"
        }
      ]
    }
  },
  {
    "name": "IDomEvent",
    "url": "IDomEvent",
    "def": {
      "name": "IDomEvent",
      "description": "Расширяет\n            IEvent.\n\nОбъект DOM-события в системе API Яндекс.Карт.\nОборачивает оригинальное DOM-событие браузера с целью нормализации имен полей данных.\nТ.е. посредством методов get и callMethod можно получать доступ к полям и методам оригинального DOM-события.\nПри этом автоматически выполняется приведение к стандарту для тех полей и методов, реализация которых различна в\nразных браузерах.\nТак, event.callMethod('stopPropagation') остановит распространение DOM-события во всех браузерах, включая Internet\nExplorer.\n\nКонструктор | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "originalEvent",
          "type": "Object",
          "description": "Исходное DOM-событие."
        }
      ],
      "inherits": [
        "IEvent"
      ],
      "methods": [
        {
          "return": "Object",
          "params": [
            {
              "isRequired": true,
              "param": "name",
              "type": "String",
              "description": "Имя свойства.\nПоддерживаются дополнительные свойства:\n\n     'propagatedData' - данные события, которые сохраняются при его пропагировании\n    (распространении по DOM-дереву); \n     'position' - необязательное поле, которое содержит координаты события относительно документа.\n"
            }
          ],
          "desciption": "Возвращает заданное свойство события.\nС помощью этого метода можно получать доступ как к свойствам исходного события, так и к дополнительным свойствам,\nпредоставляемым API карт.\n\nВозвращает значение свойства.",
          "name": "get"
        },
        {
          "return": "IDomEvent",
          "desciption": "Возвращает исходное DOM-событие.",
          "name": "getSourceEvent"
        },
        {
          "desciption": "Отменяет реакцию по умолчанию на событие в рамках системы событий API Яндекс.Карт.\nВызов этого метода не влияет на обработку браузером действия по умолчанию исходного DOM-события.",
          "name": "preventDefault"
        },
        {
          "desciption": "Прекращает обработку события в системе событий API Яндекс.Карт.\nТ.е. после вызова данного метода ни один обработчик данного события не будет вызван.\nВызов этого метода не влияет на обработку исходного DOM-события на уровне браузера.",
          "name": "stopImmediatePropagation"
        },
        {
          "desciption": "Прекращает распространение DOM-события в системе событий API Яндекс.Карт.\nВызов этого метода не влияет на распространение исходного DOM-события по DOM-дереву.",
          "name": "stopPropagation"
        }
      ]
    }
  },
  {
    "name": "IDomEventEmitter",
    "url": "IDomEventEmitter",
    "def": {
      "name": "IDomEventEmitter",
      "description": "Расширяет\n            IEventEmitter.\n\nИнтерфейс объекта, генерирующего \"DOM-события\".\nДанный интерфейс декларирует перечень событий, используемых для отражения интерактивных действий пользователя с\nразличными объектами в среде API Яндекс Карт.\nОбъекты, реализующие данный интерфейс, не обязаны фактически генерировать все события декларируемые интерфейсом.\n\nКонструктор | Поля  | События ",
      "hasCtor": true,
      "inherits": [
        "IEventEmitter"
      ],
      "props": [
        {
          "type": "IEventManager",
          "description": "Менеджер событий.",
          "name": "events"
        }
      ]
    }
  },
  {
    "name": "IDomTile",
    "url": "IDomTile",
    "def": {
      "name": "IDomTile",
      "description": "Интерфейс тайлов, представляющих из себя DOM-объект.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "url",
          "type": "String",
          "description": "URL тайла."
        }
      ],
      "methods": [
        {
          "desciption": "Уничтожает тайл.",
          "name": "destroy"
        },
        {
          "return": "Boolean",
          "desciption": "Проверяет готовность тайла.\n\nВозвращает true - тайл готов, false - тайл не готов.",
          "name": "isReady"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "context",
              "type": "HTMLElement",
              "description": "Родительский HTML-элемент"
            },
            {
              "isRequired": true,
              "param": "clientBounds",
              "type": "Number[][]",
              "description": "Область в клиентских координатах, которую должен занять тайл."
            },
            {
              "isRequired": true,
              "param": "animate",
              "type": "Boolean",
              "description": "true - анимировать рендеринг, false - нет."
            }
          ],
          "desciption": "Добавляет тайл в родительский HTML-элемент.",
          "name": "renderAt"
        }
      ],
      "props": [
        {
          "type": "IEventManager",
          "description": "Менеджер событий тайла.",
          "name": "events"
        }
      ]
    }
  },
  {
    "name": "IEvent",
    "url": "IEvent",
    "def": {
      "name": "IEvent",
      "description": "Событие, бросаемое менеджером событий IEventManager.\n\nКонструктор | Методы ",
      "hasCtor": true,
      "methods": [
        {
          "desciption": "Разрешает распространение данного события на карту.",
          "name": "allowMapEvent"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "name",
              "type": "String",
              "description": "Имя метода."
            }
          ],
          "desciption": "Вызывает указанный метод у исходного события.\nВторой и последующие аргументы передаются методу при вызове.",
          "name": "callMethod"
        },
        {
          "return": "Object",
          "params": [
            {
              "isRequired": true,
              "param": "name",
              "type": "String",
              "description": "Имя свойства."
            }
          ],
          "desciption": "Возвращает свойство события по ключу. С помощью этого метода\nможно получать доступ как к свойствам исходного события,\nтак и к дополнительным свойствам, предоставляемым API карт.\n\nВозвращает значение свойства.",
          "name": "get"
        },
        {
          "return": "IEvent|null",
          "desciption": "Возвращает исходное событие.",
          "name": "getSourceEvent"
        },
        {
          "return": "Boolean",
          "desciption": "Возвращает true, если реакция по умолчанию на событие отменена.",
          "name": "isDefaultPrevented"
        },
        {
          "return": "Boolean",
          "desciption": "Возвращает true, если обработка события прервана.",
          "name": "isImmediatePropagationStopped"
        },
        {
          "return": "Boolean",
          "desciption": "Возвращает true, если событие карты разрешено.",
          "name": "isMapEventAllowed"
        },
        {
          "return": "Boolean",
          "desciption": "Возвращает true, если распространение события прервано,",
          "name": "isPropagationStopped"
        },
        {
          "desciption": "Отменяет реакцию по умолчанию на событие в рамках системы событий API Яндекс.Карт.",
          "name": "preventDefault"
        },
        {
          "desciption": "Прекращает обработку события в системе событий API Яндекс.Карт.\nТ.е. после вызова данного метода ни один обработчик данного события не будет вызван.",
          "name": "stopImmediatePropagation"
        },
        {
          "desciption": "Прекращает распространение события в системе событий API Яндекс.Карт.",
          "name": "stopPropagation"
        }
      ]
    }
  },
  {
    "name": "IEventController",
    "url": "IEventController",
    "def": {
      "name": "IEventController",
      "description": "Интерфейс контроллера событий. Позволяет\nконтролировать подписки и отписки от событий\nна определённом менеджере событий.\n\nКонструктор | Методы ",
      "hasCtor": true,
      "methods": [
        {
          "params": [
            {
              "isRequired": true,
              "param": "events",
              "type": "IEventManager",
              "description": "Менеджер событий."
            },
            {
              "isRequired": true,
              "param": "type",
              "type": "String",
              "description": "Тип события."
            }
          ],
          "desciption": "Вызывается при первой подписке на указанный\nтип событий через указанный менеджер событий.\nЭтот метод является необязательным.",
          "name": "onStartListening"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "events",
              "type": "IEventManager",
              "description": "Менеджер событий."
            },
            {
              "isRequired": true,
              "param": "type",
              "type": "String",
              "description": "Тип события."
            }
          ],
          "desciption": "Вызывается, когда определённый тип событий\nперестаёт слушаться на указанном менеджере событий\n(удалена последняя подписка).\nЭтот метод является необязательным.",
          "name": "onStopListening"
        }
      ]
    }
  },
  {
    "name": "IEventEmitter",
    "url": "IEventEmitter",
    "def": {
      "name": "IEventEmitter",
      "description": "Интерфейс объекта, у которого можно слушать события.\n\nКонструктор | Поля ",
      "hasCtor": true,
      "props": [
        {
          "type": "IEventManager",
          "description": "Менеджер событий.",
          "name": "events"
        }
      ]
    }
  },
  {
    "name": "IEventGroup",
    "url": "IEventGroup",
    "def": {
      "name": "IEventGroup",
      "description": "Группа слушателей событий.\n\nКонструктор | Методы ",
      "hasCtor": true,
      "methods": [
        {
          "return": "IEventGroup",
          "params": [
            {
              "isRequired": true,
              "param": "types",
              "type": "String|String[]",
              "description": "Тип события или массив типов."
            },
            {
              "isRequired": true,
              "param": "callback",
              "type": "Function",
              "description": "Функция-обработчик. В качестве параметра в функцию передается\nобъект события."
            },
            {
              "isRequired": false,
              "param": "context",
              "type": "Object",
              "description": "Контекст исполнения функции-обработчика."
            },
            {
              "isRequired": false,
              "param": "priority",
              "type": "Integer",
              "description": "Приоритет подписки."
            }
          ],
          "desciption": "Добавляет слушатель события.\n\nВозвращает ссылку на себя.",
          "name": "add"
        },
        {
          "return": "IEventGroup",
          "params": [
            {
              "isRequired": true,
              "param": "types",
              "type": "String|String[]",
              "description": "Тип или массив типов событий."
            },
            {
              "isRequired": true,
              "param": "callback",
              "type": "Function",
              "description": "Функция-обработчик. В качестве параметра в функцию передается\nобъект события."
            },
            {
              "isRequired": false,
              "param": "context",
              "type": "Object",
              "description": "Контекст исполнения функции-обработчика."
            },
            {
              "isRequired": false,
              "param": "priority",
              "type": "Integer",
              "description": "Приоритет подписки."
            }
          ],
          "desciption": "Удаляет слушатель события из группы.\n\nВозвращает ссылку на себя.",
          "name": "remove"
        },
        {
          "return": "IEventGroup",
          "desciption": "Удаляет всех слушателей событий из группы.\n\nВозвращает ссылку на себя.",
          "name": "removeAll"
        }
      ]
    }
  },
  {
    "name": "IEventManager",
    "url": "IEventManager",
    "def": {
      "name": "IEventManager",
      "description": "Расширяет\n            IEventTrigger.\n\nМенеджер событий. При помощи менеджера событий можно подписываться на события и отписываться от них,\nа также инициировать сами события.\n\nКонструктор | Методы ",
      "hasCtor": true,
      "inherits": [
        "IEventTrigger"
      ],
      "methods": [
        {
          "return": "IEventManager",
          "params": [
            {
              "isRequired": true,
              "param": "types",
              "type": "String|String[]",
              "description": "Тип или массив типов события."
            },
            {
              "isRequired": true,
              "param": "callback",
              "type": "Function",
              "description": "Функция-обработчик события. В качестве параметра в функцию передается\nобъект, описывающий событие. Может быть либо произвольным объектом, либо реализовывать интерфейс IEvent."
            },
            {
              "isRequired": false,
              "param": "context",
              "type": "Object",
              "description": "Контекст исполнения обработчика."
            },
            {
              "isRequired": false,
              "param": "priority",
              "type": "Integer",
              "description": "Приоритет подписки."
            }
          ],
          "desciption": "Добавляет новую подписку.\n\nВозвращает ссылку на себя.",
          "name": "add"
        },
        {
          "return": "IEventManager",
          "params": [
            {
              "isRequired": true,
              "param": "type",
              "type": "String",
              "description": "Тип события."
            },
            {
              "isRequired": false,
              "param": "event",
              "type": "Object|Event",
              "description": "Событие. Если передан хэш с данными, то для него будет вызван\nметод createEventObject, и дальнейшие действия будут производиться с новым созданным событием."
            }
          ],
          "desciption": "Инициирует событие.\n\nВозвращает ссылку на себя.",
          "name": "fire"
        },
        {
          "return": "IEventManager|null",
          "desciption": "Возвращает ссылку на родительский менеджер событий.",
          "name": "getParent"
        },
        {
          "return": "IEventGroup",
          "desciption": "Возвращает группу слушателей событий, ассоциированную с данным менеджером событий.",
          "name": "group"
        },
        {
          "return": "IEventManager",
          "params": [
            {
              "isRequired": true,
              "param": "types",
              "type": "String|String[]",
              "description": "Тип события или массив типов."
            },
            {
              "isRequired": true,
              "param": "callback",
              "type": "Function",
              "description": "Функция-обработчик события. В качестве параметра в функцию передается\nобъект события IEvent."
            },
            {
              "isRequired": false,
              "param": "context",
              "type": "Object",
              "description": "Контекст исполнения обработчика."
            },
            {
              "isRequired": false,
              "param": "priority",
              "type": "Integer",
              "description": "Приоритет подписки."
            }
          ],
          "desciption": "Удаляет существующую подписку.\n\nВозвращает ссылку на себя.",
          "name": "remove"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "parent",
              "type": "IEventManager|null",
              "description": "Родительский менеджер событий."
            }
          ],
          "desciption": "Устанавливает родительский менеджер событий.",
          "name": "setParent"
        }
      ]
    }
  },
  {
    "name": "IEventPane",
    "url": "IEventPane",
    "def": {
      "name": "IEventPane",
      "description": "Расширяет\n            IDomEventEmitter, IPane.\n\nИнтерфейс пейна событий карты. Позволяет отслеживать на карте DOM-события, но, в отличии от\nIContainerPane, не позволяет размещать отображения объектов карты внутри своего\nDOM-элемента.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IDomEventEmitter",
        "IPane"
      ]
    }
  },
  {
    "name": "IEventTrigger",
    "url": "IEventTrigger",
    "def": {
      "name": "IEventTrigger",
      "description": "Объект инициирующий события.\n\nКонструктор | Методы ",
      "hasCtor": true,
      "methods": [
        {
          "return": "IEventTrigger",
          "params": [
            {
              "isRequired": true,
              "param": "type",
              "type": "String",
              "description": "Тип события."
            },
            {
              "isRequired": false,
              "param": "eventObject",
              "type": "Object|IEvent",
              "description": "Объект, описывающий событие. Может быть\nлибо произвольным объектом, либо реализовывать интерфейс IEvent. Во втором случае\nпосле вызова каждого обработчика будет проверяться значение метода isImmediatePropagationStopped() -\nесли оно истинно, оповещение о событии немедленно прекращается."
            }
          ],
          "desciption": "Инициирует событие.\n\nВозвращает ссылку на себя.",
          "name": "fire"
        }
      ]
    }
  },
  {
    "name": "IEventWorkflowController",
    "url": "IEventWorkflowController",
    "def": {
      "name": "IEventWorkflowController",
      "description": "Расширяет\n            IEventController.\n\nИнтерфейс контроллера событий,\nпозволяющего влиять на распространение\nсобытий по дереву.\n\nКонструктор | Методы ",
      "hasCtor": true,
      "inherits": [
        "IEventController"
      ],
      "methods": [
        {
          "params": [
            {
              "isRequired": true,
              "param": "events",
              "type": "IEventManager",
              "description": "Менеджер событий."
            },
            {
              "isRequired": true,
              "param": "type",
              "type": "String",
              "description": "Тип события."
            },
            {
              "isRequired": false,
              "param": "event",
              "type": "IEvent",
              "description": "Событие."
            }
          ],
          "desciption": "Функция, вызываемая после окончания обработки события\nменеджером событий.\nЭтот метод является необязательным.",
          "name": "onAfterEventFiring"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "events",
              "type": "IEventManager",
              "description": "Менеджер событий."
            },
            {
              "isRequired": true,
              "param": "type",
              "type": "String",
              "description": "Тип события."
            },
            {
              "isRequired": false,
              "param": "event",
              "type": "IEvent",
              "description": "Событие."
            }
          ],
          "desciption": "Функция, вызываемая до начала обработки события\nменеджером событий.\nЭтот метод является необязательным.",
          "name": "onBeforeEventFiring"
        }
      ]
    }
  },
  {
    "name": "IExpandableControlLayout",
    "url": "IExpandableControlLayout",
    "def": {
      "name": "IExpandableControlLayout",
      "description": "Расширяет\n            ILayout.\n\nИнтерфейс макета, который может находится в свернутом и развернутом состоянии.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "ILayout"
      ]
    }
  },
  {
    "name": "IFreezable",
    "url": "IFreezable",
    "def": {
      "name": "IFreezable",
      "description": "Интерфейс объекта с отключаемым событием изменения состояния.\nОбъект, реализующий IFreezable, может функционировать в одном из следующих режимов:\n\n    1. Активный. В этом режиме каждое изменение внутреннего состояния объекта сопровождается генерацией события\n    IFreezable.change.\n    2. Замороженный. В этом режиме изменения состояния объекта не сопровождаются событием IFreezable.change, но\n    если изменения имели место, событие IFreezable.change будет сгенерировано один раз при переходе в активный режим.\n\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "methods": [
        {
          "return": "IFreezable",
          "desciption": "Переводит объект в \"замороженный\" режим.\n\nВозвращает Cсылку на себя.",
          "name": "freeze"
        },
        {
          "return": "Boolean",
          "desciption": "Возвращает true, если объект находится в \"замороженном\" режиме, иначе false.",
          "name": "isFrozen"
        },
        {
          "return": "IFreezable",
          "desciption": "Переводит объект в активный режим.\n\nВозвращает Cсылку на себя.",
          "name": "unfreeze"
        }
      ],
      "props": [
        {
          "type": "IEventManager",
          "description": "Менеджер событий объекта.",
          "name": "events"
        }
      ]
    }
  },
  {
    "name": "IGeocodeProvider",
    "url": "IGeocodeProvider",
    "def": {
      "name": "IGeocodeProvider",
      "description": "Интерфейс провайдера геокодера.\n\nКонструктор | Методы ",
      "hasCtor": true,
      "methods": [
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": true,
              "param": "request",
              "type": "String",
              "description": "Строка запроса."
            },
            {
              "isRequired": false,
              "param": "options",
              "type": "Object",
              "description": "Опции."
            }
          ],
          "desciption": "Отправляет запрос на геокодирование. Добавить функцию-обработчик для\nобработки результата геокодирования можно через возвращаемый объект-promise.\nОбъект, поступающий на вход функции-обработчика может\nсодержать поля только следующего вида: geoObjects, layers, mapState, metaData.\n\nВозвращает объект-promise.",
          "name": "geocode"
        },
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": true,
              "param": "request",
              "type": "String",
              "description": "Строка запроса."
            },
            {
              "isRequired": false,
              "param": "options",
              "type": "Object",
              "description": "Опции."
            }
          ],
          "desciption": "Отправляет запрос за поисковыми подсказками. Возвращает объект-promise,\nкоторый будет либо отклонён с ошибкой, либо подтверждён массивом объектов\nвида { displayName: \"Мытищи, Московская область\", value: \"Россия, Московская область, Мытищи \" }.\nПоле displayName отвечает за представление топонима в удобном для чтения\nпользователем виде, поле value - значение, которое необходимо подставить в\nполе ввода после выбора пользователем данной подсказки.\n\n\n\n\nЭтот метод является опциональным.\n\nВозвращает объект-promise.",
          "name": "suggest"
        }
      ]
    }
  },
  {
    "name": "IGeometry",
    "url": "IGeometry",
    "def": {
      "name": "IGeometry",
      "description": "Расширяет\n            IBaseGeometry, ICustomizable.\n\nИнтерфейс геометрии.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IBaseGeometry",
        "ICustomizable"
      ],
      "methods": [
        {
          "return": "Number[][]|null",
          "desciption": "Возвращает координаты двух противоположных углов области, охватывающей геометрию.\nПервый элемент массива - юго-западный угол области; второй элемент - северо-восточный угол соответственно.",
          "name": "getBounds"
        },
        {
          "return": "Map|null",
          "desciption": "Возвращает текущую карту.",
          "name": "getMap"
        },
        {
          "return": "IPixelGeometry",
          "params": [
            {
              "isRequired": false,
              "param": "options",
              "type": "Object",
              "description": "Хэш опций, позволяющий перекрыть часть текущих опций геометрии для данного расчета."
            }
          ],
          "desciption": "Возвращает пиксельную геометрию, соответствующую данной геометрии, ее опциям и состоянию карты.",
          "name": "getPixelGeometry"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "map",
              "type": "Map|null",
              "description": "Ссылка на карту."
            }
          ],
          "desciption": "Задает карту.",
          "name": "setMap"
        }
      ]
    }
  },
  {
    "name": "IGeometryEditor",
    "url": "IGeometryEditor",
    "def": {
      "name": "IGeometryEditor",
      "description": "Расширяет\n            ICustomizable, IEventEmitter.\n\nИнтерфейс редактора геометрии.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "ICustomizable",
        "IEventEmitter"
      ],
      "methods": [
        {
          "desciption": "Включает режим редактирования.",
          "name": "startEditing"
        },
        {
          "desciption": "Отключает режим редактирования.",
          "name": "stopEditing"
        }
      ],
      "props": [
        {
          "type": "IGeometry",
          "description": "Редактируемая геометрия.",
          "name": "geometry"
        },
        {
          "type": "IDataManager",
          "description": "Состояние редактора геометрии.",
          "name": "state"
        }
      ]
    }
  },
  {
    "name": "IGeometryEditorChildModel",
    "url": "IGeometryEditorChildModel",
    "def": {
      "name": "IGeometryEditorChildModel",
      "description": "Расширяет\n            IGeometryEditorModel.\n\nИнтерфейс дочерней модели данных.\n\nКонструктор | Поля  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "geometry",
          "type": "IBaseGeometry",
          "description": "Редактируемая дочерняя геометрия. Интерфейс IBaseGeometry не подразумевает наличие\nсобытия pixelgeometrychange, поэтому пиксельные данные получаются от родительской модели данных."
        },
        {
          "isRequired": true,
          "param": "editor",
          "type": "IGeometryEditor",
          "description": "Ссылка на редактор геометрии."
        },
        {
          "isRequired": true,
          "param": "pixels",
          "type": "Number[]",
          "description": "Пиксельные данные модели."
        },
        {
          "isRequired": true,
          "param": "parent",
          "type": "IGeometryEditorModel",
          "description": "Родительская модель данных."
        }
      ],
      "inherits": [
        "IGeometryEditorModel"
      ],
      "methods": [
        {
          "return": "IGeometryEditorModel",
          "desciption": "Возвращает родительскую модель данных.",
          "name": "getParent"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "pixels",
              "type": "Number[]",
              "description": "Пиксельные данные."
            }
          ],
          "desciption": "Задает пиксельные данные модели.",
          "name": "setPixels"
        }
      ],
      "props": [
        {
          "type": "IGeometryEditor",
          "description": "Редактор геометрии.",
          "name": "editor"
        },
        {
          "type": "IBaseGeometry",
          "description": "Геометрия модели.",
          "name": "geometry"
        }
      ]
    }
  },
  {
    "name": "IGeometryEditorModel",
    "url": "IGeometryEditorModel",
    "def": {
      "name": "IGeometryEditorModel",
      "description": "Расширяет\n            IEventEmitter.\n\nИнтерфейс модели данных редактора геометрии.\n\nКонструктор | Поля  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "geometry",
          "type": "IBaseGeometry",
          "description": "Редактируемая геометрия."
        },
        {
          "isRequired": true,
          "param": "editor",
          "type": "IGeometryEditor",
          "description": "Ссылка на редактор геометрии."
        }
      ],
      "inherits": [
        "IEventEmitter"
      ],
      "methods": [
        {
          "desciption": "Деструктор.",
          "name": "destroy"
        },
        {
          "return": "Number[]",
          "desciption": "Возвращает пиксельные данные модели.",
          "name": "getPixels"
        }
      ]
    }
  },
  {
    "name": "IGeometryEditorRootModel",
    "url": "IGeometryEditorRootModel",
    "def": {
      "name": "IGeometryEditorRootModel",
      "description": "Расширяет\n            IGeometryEditorModel.\n\nИнтерфейс корневой модели данных.\n\nКонструктор | Поля  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "geometry",
          "type": "IGeometry",
          "description": "Редактируемая геометрия."
        },
        {
          "isRequired": true,
          "param": "editor",
          "type": "IGeometryEditor",
          "description": "Ссылка на редактор геометрии."
        }
      ],
      "inherits": [
        "IGeometryEditorModel"
      ]
    }
  },
  {
    "name": "IGeometryJson",
    "url": "IGeometryJson",
    "def": {
      "name": "IGeometryJson",
      "description": "Интерфейс объекта, описывающего JSON-представление геометрии.\n\nКонструктор | Поля ",
      "hasCtor": true,
      "props": [
        {
          "type": "String",
          "description": "Идентификатор типа геометрии.",
          "name": "type"
        }
      ]
    }
  },
  {
    "name": "IGeoObject",
    "url": "IGeoObject",
    "def": {
      "name": "IGeoObject",
      "description": "Расширяет\n            IChildOnMap, ICustomizable, IDomEventEmitter, IParentOnMap.\n\nИнтерфейс геообъекта.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IChildOnMap",
        "ICustomizable",
        "IDomEventEmitter",
        "IParentOnMap"
      ],
      "methods": [
        {
          "return": "vow.Promise",
          "desciption": "Возвращает объект-обещание, который подтверждается объектом оверлея в\nмомент его фактического создания, либо отклоняется с передачей соответствующей ошибки.",
          "name": "getOverlay"
        },
        {
          "return": "IOverlay|null",
          "desciption": "Метод предоставляет синхронный доступ к оверлею.\n\nВозвращает ссылку на оверелей, либо null, если оверлей отсутствует.",
          "name": "getOverlaySync"
        }
      ],
      "props": [
        {
          "type": "IGeometry|null",
          "description": "Геометрия геообъекта.",
          "name": "geometry"
        },
        {
          "type": "IDataManager",
          "description": "Данные геообъекта.",
          "name": "properties"
        },
        {
          "type": "IDataManager",
          "description": "Состояние геообъекта.",
          "name": "state"
        }
      ]
    }
  },
  {
    "name": "IGeoObjectCollection",
    "url": "IGeoObjectCollection",
    "def": {
      "name": "IGeoObjectCollection",
      "description": "Расширяет\n            ICustomizable, IEventEmitter, IParentOnMap.\n\nИнтерфейс коллекции геообъектов.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "ICustomizable",
        "IEventEmitter",
        "IParentOnMap"
      ],
      "methods": [
        {
          "return": "IGeoObjectCollection",
          "params": [
            {
              "isRequired": true,
              "param": "child",
              "type": "IGeoObject",
              "description": "Дочерний геообъект."
            },
            {
              "isRequired": false,
              "param": "index",
              "type": "Integer",
              "description": "Индекс, в который добавляется новый объект.\nПо умолчанию объект добавляется в конец коллекции."
            }
          ],
          "desciption": "Добавляет (вставляет) дочерний геообъект в коллекцию.\n\nВозвращает ссылку на себя.",
          "name": "add"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "callback",
              "type": "Function",
              "description": "Функция-обработчик."
            },
            {
              "isRequired": false,
              "param": "context",
              "type": "Object",
              "description": "Контекст выполнения функции-обработчика."
            }
          ],
          "desciption": "Для каждого дочернего геообъекта, вызывает функцию-обработчик.",
          "name": "each"
        },
        {
          "return": "IGeoObject",
          "params": [
            {
              "isRequired": true,
              "param": "index",
              "type": "Integer",
              "description": "Индекс."
            }
          ],
          "desciption": "Возвращает дочерний геообъект с заданным индексом.\n\nВозвращает дочерний геообъект.",
          "name": "get"
        },
        {
          "return": "Number[][]|null",
          "desciption": "Возвращает географические координаты области, охватывающей коллекции и ее дочерние\nгеообъекты.",
          "name": "getBounds"
        },
        {
          "return": "IIterator",
          "desciption": "Возвращает итератор по коллекции.",
          "name": "getIterator"
        },
        {
          "return": "Integer",
          "desciption": "Возвращает длину коллекции.",
          "name": "getLength"
        },
        {
          "return": "Number[][]|null",
          "desciption": "Возвращает глобальные пиксельные координаты области, охватывающей коллекцию и ее дочерние\nгеообъекты.",
          "name": "getPixelBounds"
        },
        {
          "return": "Integer",
          "params": [
            {
              "isRequired": true,
              "param": "object",
              "type": "Object",
              "description": "Дочерний геообъект."
            }
          ],
          "desciption": "Возвращает индекс дочернего геообъекта.\nЕсли геообъект в коллекции не найден, возвращается -1.",
          "name": "indexOf"
        },
        {
          "return": "IGeoObjectCollection",
          "params": [
            {
              "isRequired": true,
              "param": "child",
              "type": "IGeoObject",
              "description": "Удаляемый геообъект."
            }
          ],
          "desciption": "Удаляет дочерний геообъект из коллекции.\n\nВозвращает ссылку на себя.",
          "name": "remove"
        },
        {
          "return": "IGeoObjectCollection",
          "desciption": "Очищает коллекцию.\n\nВозвращает ссылку на себя.",
          "name": "removeAll"
        },
        {
          "return": "IGeoObjectCollection",
          "params": [
            {
              "isRequired": true,
              "param": "index",
              "type": "Integer",
              "description": "Индекс."
            },
            {
              "isRequired": true,
              "param": "child",
              "type": "IGeoObject",
              "description": "Дочерний геообъект."
            }
          ],
          "desciption": "Записывает в коллекцию новый дочерний геообъект.\n\nВозвращает ссылку на себя.",
          "name": "set"
        },
        {
          "return": "IGeoObjectCollection",
          "params": [
            {
              "isRequired": true,
              "param": "index",
              "type": "Integer",
              "description": "Индекс геообъекта, с которого начинается удаление."
            },
            {
              "isRequired": true,
              "param": "number",
              "type": "Integer",
              "description": "Количество удаляемых геообъектов."
            }
          ],
          "desciption": "Удаляет геообъекты из коллекции. Если необходимо, вставляет на их место другие.\nОбъекты, которые будут вставлены вместо удаляемых, передаются как дополнительные параметры\n(после параметра number).\n\nВозвращает коллекция удаленных геообъектов.",
          "name": "splice"
        }
      ]
    }
  },
  {
    "name": "IGeoObjectPopupData",
    "url": "IGeoObjectPopupData",
    "def": {
      "name": "IGeoObjectPopupData",
      "description": "Статический объект.\n\nОбъект с данными, передаваемый геообъектом своему инфо-объекту (например, балуну или хинту).\n\nПоля ",
      "hasCtor": false,
      "props": [
        {
          "type": "IGeometry",
          "description": "Ссылка на геометрию геообъекта.",
          "name": "geometry"
        },
        {
          "type": "IGeoObject",
          "description": "Ссылка на геообъект.",
          "name": "geoObject"
        },
        {
          "type": "IDataManager",
          "description": "Ссылка на свойства геообъекта.",
          "name": "properties"
        },
        {
          "type": "Object",
          "description": "Пользовательские данные.",
          "name": "userData"
        }
      ]
    }
  },
  {
    "name": "IGeoObjectSequence",
    "url": "IGeoObjectSequence",
    "def": {
      "name": "IGeoObjectSequence",
      "description": "Расширяет\n            ICustomizable, IEventEmitter, IParentOnMap.\n\nИнтерфейс неизменяемой коллекции геообъектов.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "ICustomizable",
        "IEventEmitter",
        "IParentOnMap"
      ],
      "methods": [
        {
          "params": [
            {
              "isRequired": true,
              "param": "callback",
              "type": "Function",
              "description": "Функция-обработчик."
            },
            {
              "isRequired": false,
              "param": "context",
              "type": "Object",
              "description": "Контекст выполнения функции-обработчика."
            }
          ],
          "desciption": "Для каждого дочернего геообъекта, вызывает функцию-обработчик.",
          "name": "each"
        },
        {
          "return": "IGeoObject",
          "params": [
            {
              "isRequired": true,
              "param": "index",
              "type": "Integer",
              "description": "Индекс."
            }
          ],
          "desciption": "Возвращает дочерний геообъект с заданным индексом.\n\nВозвращает дочерний геообъект.",
          "name": "get"
        },
        {
          "return": "Number[][]|null",
          "desciption": "Возвращает географические координаты области, охватывающей коллекции и ее\nдочерние геообъекты.",
          "name": "getBounds"
        },
        {
          "return": "IIterator",
          "desciption": "Возвращает итератор по дочерним геообъектам коллекции.",
          "name": "getIterator"
        },
        {
          "return": "Integer",
          "desciption": "Возвращает длину коллекции.",
          "name": "getLength"
        },
        {
          "return": "Number[][]|null",
          "desciption": "Возвращает глобальные пиксельные координаты области, охватывающей коллекцию и\nее дочерние геообъекты.",
          "name": "getPixelBounds"
        },
        {
          "return": "Integer",
          "params": [
            {
              "isRequired": true,
              "param": "object",
              "type": "IGeoObject",
              "description": "Дочерний геообъект."
            }
          ],
          "desciption": "Возвращает индекс дочернего геообъекта.\nЕсли геообъект в коллекции не найден, возвращается -1.",
          "name": "indexOf"
        }
      ]
    }
  },
  {
    "name": "IGroupControlLayout",
    "url": "IGroupControlLayout",
    "def": {
      "name": "IGroupControlLayout",
      "description": "Расширяет\n            ILayout.\n\nИнтерфейс макета группового элемента управления.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "data",
          "type": "Object",
          "description": "Данные макета."
        }
      ],
      "inherits": [
        "ILayout"
      ],
      "methods": [
        {
          "return": "Object",
          "desciption": "Возвращает ссылку на DOM-элемент, в который должны быть добавлены дочерние элементы.",
          "name": "getChildContainerElement"
        }
      ]
    }
  },
  {
    "name": "IHint",
    "url": "IHint",
    "def": {
      "name": "IHint",
      "description": "Расширяет\n            IPopup.\n\nИнтерфейс хинта.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IPopup"
      ]
    }
  },
  {
    "name": "IHintManager",
    "url": "IHintManager",
    "def": {
      "name": "IHintManager",
      "description": "Расширяет\n            IPopupManager.\n\nИнтерфейс менеджера хинта.\n\nКонструктор | Поля  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IPopupManager"
      ]
    }
  },
  {
    "name": "IHintOwner",
    "url": "IHintOwner",
    "def": {
      "name": "IHintOwner",
      "description": "Объект, имеющий хинт, доступный через свойство \"hint\".\n\nКонструктор | Поля  | События ",
      "hasCtor": true,
      "props": [
        {
          "type": "IHintManager",
          "description": "Хинт объекта.",
          "name": "hint"
        }
      ]
    }
  },
  {
    "name": "IHotspot",
    "url": "IHotspot",
    "def": {
      "name": "IHotspot",
      "description": "Расширяет\n            IDomEventEmitter.\n\nИнтерфейс фигуры, определяющей геометрию активной области.\nПримечание.&nbsp;Фигура должна задаваться в глобальных пиксельных координатах.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IDomEventEmitter"
      ],
      "methods": [
        {
          "return": "IShape",
          "desciption": "Возвращает фигуру активной области.",
          "name": "getShape"
        },
        {
          "return": "Number",
          "desciption": "Возвращает zIndex активной области.",
          "name": "getZIndex"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "shape",
              "type": "IShape",
              "description": "Фигура."
            }
          ],
          "desciption": "Задает фигуру активной области.",
          "name": "setShape"
        },
        {
          "desciption": "Задает активной области.",
          "name": "setZIndex"
        }
      ]
    }
  },
  {
    "name": "IHotspotLayerObject",
    "url": "IHotspotLayerObject",
    "def": {
      "name": "IHotspotLayerObject",
      "description": "Расширяет\n            ICustomizable, IDomEventEmitter.\n\nИнтерфейс объекта слоя активных областей.\nПримечание.&nbsp;Фигура, описывающая активную область, должна задаваться в глобальных пиксельных координатах.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "ICustomizable",
        "IDomEventEmitter"
      ],
      "methods": [
        {
          "return": "Object",
          "desciption": "Возвращает реальную геометрию объекта.",
          "name": "getGeometry"
        },
        {
          "return": "IHotspot",
          "desciption": "Возвращает объект, описывающий активную область.",
          "name": "getHotspot"
        },
        {
          "return": "Number",
          "desciption": "Возвращает идентификатор объекта.",
          "name": "getId"
        },
        {
          "return": "Object",
          "desciption": "Возвращает данные объекта.",
          "name": "getProperties"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "geometry",
              "type": "Object",
              "description": "Реальная геометрия объекта."
            }
          ],
          "desciption": "Задает реальную геометрию объекта.",
          "name": "setGeometry"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "id",
              "type": "Number",
              "description": "Идентификатор объекта."
            }
          ],
          "desciption": "Задает идентификатор объекта.",
          "name": "setId"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "properties",
              "type": "Object",
              "description": "Данные объекта."
            }
          ],
          "desciption": "Задает данные объекта.",
          "name": "setProperties"
        }
      ]
    }
  },
  {
    "name": "IHotspotObjectSource",
    "url": "IHotspotObjectSource",
    "def": {
      "name": "IHotspotObjectSource",
      "description": "Расширяет\n            ICustomizable.\n\nИсточник объектов для слоёв активных областей.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "ICustomizable"
      ],
      "methods": [
        {
          "desciption": "Отменяет последний запрос за данными.",
          "name": "cancelLastRequest"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "layer",
              "type": "hotspot.Layer",
              "description": "Слой активных областей."
            },
            {
              "isRequired": true,
              "param": "tileNumber",
              "type": "Number[]",
              "description": "Тайловые координаты."
            },
            {
              "isRequired": true,
              "param": "zoom",
              "type": "Number",
              "description": "Коэффициент масштабирования."
            },
            {
              "isRequired": true,
              "param": "callback",
              "type": "Function",
              "description": "Функция-обработчик."
            }
          ],
          "desciption": "Строит массив объектов IHotspotLayerObject,\nсоответствующих определенному слою, тайлу и коэффициенту\nмасштабирования карты, и передает его в функцию callback.",
          "name": "requestObjects"
        }
      ]
    }
  },
  {
    "name": "IHotspotShape",
    "url": "IHotspotShape",
    "def": {
      "name": "IHotspotShape",
      "description": "Расширяет\n            ICustomizable, IDomEventEmitter.\n\nИнтерфейс фигуры, определяющей геометрию активной области.\nПримечание.&nbsp;Не поддерживается начиная с версии 2.1.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "ICustomizable",
        "IDomEventEmitter"
      ],
      "methods": [
        {
          "return": "IHotspotContainer",
          "desciption": "Возвращает контейнер активных областей.",
          "name": "getContainer"
        },
        {
          "return": "Object",
          "desciption": "Возвращает реальную геометрию фигуры.",
          "name": "getGeometry"
        },
        {
          "return": "Number",
          "desciption": "Возвращает идентификатор объекта.",
          "name": "getId"
        },
        {
          "return": "Object",
          "desciption": "Возвращает данные объекта.",
          "name": "getProperties"
        },
        {
          "return": "IShape",
          "desciption": "Возвращает фигуру, описывающую активную область.",
          "name": "getShape"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "container",
              "type": "IHotspotContainer",
              "description": "Контейнер, в который добавляется фигура."
            }
          ],
          "desciption": "Метод для добавления фигуры в контейнер активных областей.",
          "name": "setContainer"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "geometry",
              "type": "Object",
              "description": "Реальная геометрия фигуры."
            }
          ],
          "desciption": "Задает реальную геометрию фигуры.",
          "name": "setGeometry"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "id",
              "type": "Number",
              "description": "Идентификатор объекта."
            }
          ],
          "desciption": "Задает идентификатор объекта.",
          "name": "setId"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "properties",
              "type": "Object",
              "description": "Данные объекта."
            }
          ],
          "desciption": "Задает данные объекта.",
          "name": "setProperties"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "shape",
              "type": "IShape",
              "description": "Фигура, описывающая активную область."
            }
          ],
          "name": "setShape"
        }
      ]
    }
  },
  {
    "name": "IIterator",
    "url": "IIterator",
    "def": {
      "name": "IIterator",
      "description": "Интерфейс итератора.\nИтератор позволяет перебрать все составляющие элементы той или иной коллекции.\n\nКонструктор | Поля  | Методы ",
      "hasCtor": true,
      "methods": [
        {
          "return": "Object|IIterator.STOP_ITERATION",
          "desciption": "Возвращает ссылку на очередной элемент коллекции.\nВозвращает объект IIterator.STOP_ITERATION, если перебор завершен.\n\nВозвращает ссылку на очередной объект или IIterator.STOP_ITERATION.",
          "name": "getNext"
        }
      ],
      "props": [
        {
          "type": "Object",
          "description": "Объект, возвращаемый методом IIterator.getNext по окончанию перебора.",
          "name": "STOP_ITERATION"
        }
      ]
    }
  },
  {
    "name": "ILayer",
    "url": "ILayer",
    "def": {
      "name": "ILayer",
      "description": "Расширяет\n            IChildOnMap, ICustomizable, IEventEmitter.\n\nИнтерфейс слоя карты.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IChildOnMap",
        "ICustomizable",
        "IEventEmitter"
      ],
      "methods": [
        {
          "return": "Number",
          "desciption": "Необязательный метод.\nВозвращает яркость слоя.\nВ зависимости от суммарной яркости слоев, добавленных на карту,\nвыбирается цвет логотипа и копирайтов на карте.\n\nВозвращает значение яркости от 0 до 1 (0 - нулевая яркость, 1 - максимальная яркость).",
          "name": "getBrightness"
        },
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": true,
              "param": "coords",
              "type": "Number[]",
              "description": "Точка на карте, для которой запрашивается\nинформация об авторских правах."
            },
            {
              "isRequired": true,
              "param": "zoom",
              "type": "Number",
              "description": "Уровень масштабирования, для которого запрашивается\nинформация об авторских правах."
            }
          ],
          "desciption": "Необязательный метод.\nЗапрашивает информацию об авторских правах в указанной\nточке с указанным коэффициентом масштабирования.\nВозвращает объект-promise, который будет подтверждён\nи передаст в качестве результата массив строк или DOM-элементов\nс информацией об авторских правах.\n\nВозвращает объект-promise.",
          "name": "getCopyrights"
        },
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": true,
              "param": "point",
              "type": "Number[]",
              "description": "Точка"
            }
          ],
          "desciption": "Необязательный метод.\nОпределяет доступный в указанной точке диапазон уровней масштабирования.\nЕсли данные есть, то возвращенный объект-promise будет подтвержден\nи передаст в качестве результата массив из двух чисел - минимальный и\nмаксимальный доступный в точке уровень масштабирования.\nЕсли данных нет, то promise отклоняется с указанием ошибки.\n\nВозвращает объект-promise.",
          "name": "getZoomRange"
        }
      ]
    }
  },
  {
    "name": "ILayout",
    "url": "ILayout",
    "def": {
      "name": "ILayout",
      "description": "Расширяет\n            IDomEventEmitter.\n\nИнтерфейс макета.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "data",
          "type": "Object",
          "description": "Данные макета."
        }
      ],
      "inherits": [
        "IDomEventEmitter"
      ],
      "methods": [
        {
          "desciption": "Деструктор. Вызывается при завершении работы с макетом.",
          "name": "destroy"
        },
        {
          "return": "Object",
          "desciption": "Возвращает объект данных макета.",
          "name": "getData"
        },
        {
          "return": "HTMLElement",
          "desciption": "Возвращает родительский html-элемент.",
          "name": "getParentElement"
        },
        {
          "return": "IShape|null",
          "desciption": "Возвращает фигуру, описывающую форму области, охватывающей макет, либо null, если нет возможности\nрассчитать данную фигуру.\nКоординаты геометрии фигуры должны отсчитываться от точки привязки родительского элемента макета.",
          "name": "getShape"
        },
        {
          "return": "Boolean",
          "desciption": "Возвращает true, если макет пуст, т.е. не имеет содержимого.\nДанный признак используется для сокрытия пустых объектов, таких как хинт, балун и другие.",
          "name": "isEmpty"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "data",
              "type": "Object",
              "description": "Данные макета."
            }
          ],
          "desciption": "Задает данные макета.",
          "name": "setData"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "parent",
              "type": "HTMLElement|null",
              "description": "Родительский html-элемент.\nРодительский элемент должен быть добавлен в DOM-дерево.\nЕсли передан null, то элемент удаляется из DOM-дерева."
            }
          ],
          "desciption": "Добавляет макет в DOM-дерево.",
          "name": "setParentElement"
        }
      ]
    }
  },
  {
    "name": "ILineStringGeometry",
    "url": "ILineStringGeometry",
    "def": {
      "name": "ILineStringGeometry",
      "description": "Расширяет\n            IGeometry, ILineStringGeometryAccess.\n\nИнтерфейс геометрии \"Ломаная линия\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IGeometry",
        "ILineStringGeometryAccess"
      ],
      "methods": [
        {
          "return": "String",
          "desciption": "Возвращает строку \"LineString\".",
          "name": "getType"
        }
      ]
    }
  },
  {
    "name": "ILinearRingGeometryAccess",
    "url": "ILinearRingGeometryAccess",
    "def": {
      "name": "ILinearRingGeometryAccess",
      "description": "Расширяет\n            IFreezable.\n\nИнтерфейс доступа к геометрии \"Замкнутый контур\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IFreezable"
      ],
      "methods": [
        {
          "return": "Boolean",
          "params": [
            {
              "isRequired": true,
              "param": "position",
              "type": "Number[]",
              "description": "Координаты точки."
            }
          ],
          "desciption": "Проверяет, лежит ли переданная точка внутри контура.\n\nВозвращает признак принадлежности точки контуру.",
          "name": "contains"
        },
        {
          "return": "Number[]",
          "params": [
            {
              "isRequired": true,
              "param": "index",
              "type": "Integer",
              "description": "Индекс точки."
            }
          ],
          "desciption": "Возвращает координаты точки с заданным индексом.",
          "name": "get"
        },
        {
          "return": "IPointGeometryAccess",
          "params": [
            {
              "isRequired": true,
              "param": "index",
              "type": "Integer",
              "description": "Индекс вершины контура."
            }
          ],
          "desciption": "Создает и возвращает объект IPointGeometryAccess для заданной вершины контура.\n\nВозвращает объект геометрии \"Точка\", соответствующий заданной вершине.",
          "name": "getChildGeometry"
        },
        {
          "return": "Object",
          "params": [
            {
              "isRequired": true,
              "param": "anchorPosition",
              "type": "Number[]",
              "description": "Координаты точки, для которой расчитывается ближайшая точка на контуре."
            }
          ],
          "desciption": "Ищет на контуре точку, ближайшую к anchorPosition.\n\nВозвращает объект со следующими полями:\n\n    position - точка на контуре ближайшая к anchorPosition;\n    distance - расстояние от anchorPosition до position;\n    closestPointIndex - индекс вершины, ближайшей к position;\n    nextPointIndex - индекс вершины, следующей за position;\n    prevPointIndex - индекс вершины, предшествующей position.\n\nПоля nextPointIndex, prevPointIndex могут отсутствовать, если position совпадает с одной из вершин контура.",
          "name": "getClosest"
        },
        {
          "return": "Number[][]",
          "desciption": "Возвращает массив координат геометрии.",
          "name": "getCoordinates"
        },
        {
          "return": "String",
          "desciption": "Возвращает идентификатор алгоритма заливки.",
          "name": "getFillRule"
        },
        {
          "return": "Integer",
          "desciption": "Возвращает количество точек в геометрии.",
          "name": "getLength"
        },
        {
          "return": "ILinearRingGeometryAccess",
          "params": [
            {
              "isRequired": true,
              "param": "index",
              "type": "Integer",
              "description": "Индекс точки."
            },
            {
              "isRequired": true,
              "param": "coordinates",
              "type": "Number[]",
              "description": "Координаты точки."
            }
          ],
          "desciption": "Добавляет новую точку с заданным индексом.\n\nВозвращает ссылку на себя.",
          "name": "insert"
        },
        {
          "return": "Number[]",
          "params": [
            {
              "isRequired": true,
              "param": "index",
              "type": "Integer",
              "description": "Индекс точки."
            }
          ],
          "desciption": "Удаляет точку с заданным индексом.\n\nВозвращает координаты удаленной точки.",
          "name": "remove"
        },
        {
          "return": "ILinearRingGeometryAccess",
          "params": [
            {
              "isRequired": true,
              "param": "index",
              "type": "Integer",
              "description": "Индекс точки."
            },
            {
              "isRequired": true,
              "param": "coordinates",
              "type": "Number[]",
              "description": "Координаты точки."
            }
          ],
          "desciption": "Задает координаты точки c заданным индексом.\n\nВозвращает ссылка на себя.",
          "name": "set"
        },
        {
          "return": "ILinearRingGeometryAccess",
          "params": [
            {
              "isRequired": true,
              "param": "coordinates",
              "type": "Number[][]",
              "description": "Координаты геометрии."
            }
          ],
          "desciption": "Задает массив координат геометрии.\n\nВозвращает ссылка на себя.",
          "name": "setCoordinates"
        },
        {
          "return": "ILinearRingGeometryAccess",
          "params": [
            {
              "isRequired": true,
              "param": "fillRule",
              "type": "String",
              "description": "Идентификатор алгоритма заливки."
            }
          ],
          "desciption": "Задает алгоритм заливки контура.\n\nВозвращает ссылку на себя.",
          "name": "setFillRule"
        },
        {
          "return": "Number[][]",
          "params": [
            {
              "isRequired": true,
              "param": "index",
              "type": "Integer",
              "description": "Индекс, начиная с которого производится удаление и добавление точек."
            },
            {
              "isRequired": true,
              "param": "number",
              "type": "Integer",
              "description": "Количество удаляемых точек."
            }
          ],
          "desciption": "Удаляет определенное число точек начиная с заданного индекса.\nПри этом на место удаляемых точек могут быть добавлены новые.\nКоординаты новых точек можно передавать дополнительными аргументами после параметра number.\n\nВозвращает массив координат удаленных точек.",
          "name": "splice"
        }
      ]
    }
  },
  {
    "name": "IMapAction",
    "url": "IMapAction",
    "def": {
      "name": "IMapAction",
      "description": "Расширяет\n            IEventEmitter.\n\nИнтерфейс объекта, управляющего движением карты.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IEventEmitter"
      ],
      "methods": [
        {
          "params": [
            {
              "isRequired": true,
              "param": "mapActionManager",
              "type": "map.action.Manager",
              "description": "Менеджер действий карты, на которой исполняется движение."
            }
          ],
          "desciption": "Запускает движение на исполнение картой. Этот метод автоматически вызывается\nменеджером движений карты. С момента вызова\nIMapAction.begin менеджер движений слушает события\nIMapAction.tick и IMapAction.end\nи исполняет их.",
          "name": "begin"
        },
        {
          "desciption": "Останавливает движение.",
          "name": "end"
        }
      ]
    }
  },
  {
    "name": "ILineStringGeometryAccess",
    "url": "ILineStringGeometryAccess",
    "def": {
      "name": "ILineStringGeometryAccess",
      "description": "Расширяет\n            IFreezable.\n\nИнтерфейс доступа к геометрии \"Ломаная линия\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IFreezable"
      ],
      "methods": [
        {
          "return": "Number[]",
          "params": [
            {
              "isRequired": true,
              "param": "index",
              "type": "Integer",
              "description": "Индекс точки."
            }
          ],
          "desciption": "Возвращает координаты точки с заданным индексом.",
          "name": "get"
        },
        {
          "return": "IPointGeometryAccess",
          "params": [
            {
              "isRequired": true,
              "param": "index",
              "type": "Integer",
              "description": "Индекс вершины."
            }
          ],
          "desciption": "Создает и возвращает объект IPointGeometryAccess для заданной вершины ломаной линии.\n\nВозвращает объект геометрии \"Точка\", соответствующий заданной вершине.",
          "name": "getChildGeometry"
        },
        {
          "return": "Object",
          "params": [
            {
              "isRequired": true,
              "param": "anchorPosition",
              "type": "Number[]",
              "description": "Координаты точки, для которой расчитывается ближайшая точка на ломаной."
            }
          ],
          "desciption": "Ищет на ломаной линии точку, ближайшую к anchorPosition.\n\nВозвращает объект со следующими полями:\n\n    position - точка на ломаной, ближайшая к anchorPosition;\n    distance - расстояние от anchorPosition до position;\n    closestPointIndex - индекс вершины, ближайшей к position;\n    nextPointIndex - индекс вершины, следующей за position;\n    prevPointIndex - индекс вершины, предшествующей position.\n\nПоля nextPointIndex, prevPointIndex могут отсутствовать, если position совпадает с одной из вершин ломаной линии.",
          "name": "getClosest"
        },
        {
          "return": "Number[][]",
          "desciption": "Возвращает массив координат геометрии.",
          "name": "getCoordinates"
        },
        {
          "return": "Integer",
          "desciption": "Возвращает количество точек в геометрии.",
          "name": "getLength"
        },
        {
          "return": "ILineStringGeometryAccess",
          "params": [
            {
              "isRequired": true,
              "param": "index",
              "type": "Integer",
              "description": "Индекс точки."
            },
            {
              "isRequired": true,
              "param": "coordinates",
              "type": "Number[]",
              "description": "Координаты точки."
            }
          ],
          "desciption": "Добавляет новую точку с заданным индексом.\n\nВозвращает ссылку на себя.",
          "name": "insert"
        },
        {
          "return": "Number[]",
          "params": [
            {
              "isRequired": true,
              "param": "index",
              "type": "Integer",
              "description": "Индекс точки."
            }
          ],
          "desciption": "Удаляет точку с заданным индексом.\n\nВозвращает координаты удаленной точки.",
          "name": "remove"
        },
        {
          "return": "ILineStringGeometryAccess",
          "params": [
            {
              "isRequired": true,
              "param": "index",
              "type": "Integer",
              "description": "Индекс точки."
            },
            {
              "isRequired": true,
              "param": "coordinates",
              "type": "Number[]",
              "description": "Координаты точки."
            }
          ],
          "desciption": "Задает координаты точки c заданным индексом.\n\nВозвращает ссылка на себя.",
          "name": "set"
        },
        {
          "return": "ILineStringGeometryAccess",
          "params": [
            {
              "isRequired": true,
              "param": "coordinates",
              "type": "Number[][]",
              "description": "Координаты геометрии."
            }
          ],
          "desciption": "Задает массив координат геометрии.\n\nВозвращает ссылка на себя.",
          "name": "setCoordinates"
        },
        {
          "return": "Number[][]",
          "params": [
            {
              "isRequired": true,
              "param": "index",
              "type": "Integer",
              "description": "Индекс, начиная с которого производится удаление и добавление точек."
            },
            {
              "isRequired": true,
              "param": "number",
              "type": "Integer",
              "description": "Количество удаляемых точек."
            }
          ],
          "desciption": "Удаляет определенное число точек начиная с заданного индекса.\nПри этом на место удаляемых точек могут быть добавлены новые.\nКоординаты новых точек можно передавать дополнительными аргументами после параметра number.\n\nВозвращает массив координат удаленных точек.",
          "name": "splice"
        }
      ]
    }
  },
  {
    "name": "IMapObjectCollection",
    "url": "IMapObjectCollection",
    "def": {
      "name": "IMapObjectCollection",
      "description": "Расширяет\n            ICollection, ICustomizable, IParentOnMap.\n\nКоллекция объектов на карте.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "ICollection",
        "ICustomizable",
        "IParentOnMap"
      ]
    }
  },
  {
    "name": "IMapState",
    "url": "IMapState",
    "def": {
      "name": "IMapState",
      "description": "Объект-описание состояния карты.\nОбъекты с таким интерфейсом возвращаются сервисом загрузки\nYMapsML.\n\nСм.: geoXml.load \n\nКонструктор | Методы ",
      "hasCtor": true,
      "methods": [
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": true,
              "param": "map",
              "type": "Map",
              "description": "Карта."
            }
          ],
          "desciption": "Применяет состояние к переданной карте.\n\nВозвращает объект-promise.",
          "name": "applyToMap"
        }
      ]
    }
  },
  {
    "name": "IMultiRouteModelJson",
    "url": "IMultiRouteModelJson",
    "def": {
      "name": "IMultiRouteModelJson",
      "description": "Интерфейс объекта-описания модели мультимаршрута.\n\nКонструктор | Поля ",
      "hasCtor": true,
      "props": [
        {
          "type": "IMultiRouteParams",
          "description": "Параметры маршрутизации.",
          "name": "params"
        },
        {
          "type": "IMultiRouteReferencePoint[]",
          "description": "Описание опорных точек мультимаршрута. Также смотрите описание параметра\nIMultiRouteParams.viaIndexes.",
          "name": "referencePoints"
        }
      ]
    }
  },
  {
    "name": "IMultiRouteParams",
    "url": "IMultiRouteParams",
    "def": {
      "name": "IMultiRouteParams",
      "description": "Интерфейс объекта, описывающего формат задания параметров модели мультимаршрута.\n\nКонструктор | Поля ",
      "hasCtor": true,
      "props": [
        {
          "type": "Boolean",
          "description": "Позволяет прокладывать мультимаршрут с учетом информации о текущих пробках на дорогах.\nЗначение по умолчанию false.",
          "name": "avoidTrafficJams"
        },
        {
          "type": "Number[][]|null",
          "description": "Позволяет задать область на карте, где предположительно находятся искомые объекты.\nИспользуется, если точки маршрута заданы почтовым адресом, а не координатами.\nЗначение по умолчанию null.",
          "name": "boundedBy"
        },
        {
          "type": "Integer",
          "description": "Максимально допустимое число маршрутов, возвращаемых мультимаршрутизатором.\nЗначение по умолчанию 3.",
          "name": "results"
        },
        {
          "type": "String",
          "description": "Тип маршрутизации. Может принимать одно из двух строковых значений:\n\n    \"auto\" - автомобильная маршрутизация;\n    \"masstransit\" - маршрутизация с использованием общественного транспорта.\n\nЗначение по умолчанию \"auto\".",
          "name": "routingMode"
        },
        {
          "type": "String",
          "description": "Определяет способ трактовки описаний опорных точек, заданных в виде массивов координат или\nгеометрий. Может принимать одно из двух значений: \"longlat\", либо \"latlong\".\nПо умолчанию используется текущее значение параметра\ncoordorder API.",
          "name": "searchCoordOrder"
        },
        {
          "type": "Boolean",
          "description": "Искать объекты только внутри области, заданной параметром boundedBy.\nИспользуется, если точки маршрута заданы почтовым адресом, а не координатами.\nЗначение по умолчанию false.",
          "name": "strictBounds"
        },
        {
          "type": "Integer[]",
          "description": "Индексы транзитных точек во множестве опорных точек мультимаршрута.\nПо умолчанию массив пуст.",
          "name": "viaIndexes"
        }
      ]
    }
  },
  {
    "name": "IMultiRouteReferencePoint",
    "url": "IMultiRouteReferencePoint",
    "def": {
      "name": "IMultiRouteReferencePoint",
      "description": "Интерфейс объекта, описывающего формат задания опорной точки мультимаршрута.\n\nКонструктор",
      "hasCtor": true
    }
  },
  {
    "name": "IOverlay",
    "url": "IOverlay",
    "def": {
      "name": "IOverlay",
      "description": "Расширяет\n            ICustomizable, IDomEventEmitter.\n\nИнтерфейс оверлея.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "ICustomizable",
        "IDomEventEmitter"
      ],
      "methods": [
        {
          "return": "Object",
          "desciption": "Возвращает объект данных оверлея.",
          "name": "getData"
        },
        {
          "return": "IPixelGeometry",
          "desciption": "Возвращает текущую пиксельную геометрию.",
          "name": "getGeometry"
        },
        {
          "return": "Map|null",
          "desciption": "Возвращает ссылку на текущую карту.",
          "name": "getMap"
        },
        {
          "return": "IShape|null",
          "desciption": "Возвращает фигуру, описывающую форму области, охватывающей оверлей в глобальных пиксельных\nкоординатах, либо null, если нет возможности рассчитать фигуру.",
          "name": "getShape"
        },
        {
          "return": "Boolean",
          "desciption": "Возвращает true, если макет пуст, т.е. не имеет содержимого.\nДанный признак используется для сокрытия пустых объектов, таких как хинт, балун и другие.",
          "name": "isEmpty"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "data",
              "type": "Object",
              "description": "Данные оверлея."
            }
          ],
          "desciption": "Задает данные оверлея.",
          "name": "setData"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "geometry",
              "type": "IPixelGeometry",
              "description": "Геометрия в глобальных пиксельных координатах."
            }
          ],
          "desciption": "Задает пиксельную геометрию оверлея.",
          "name": "setGeometry"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "map",
              "type": "Map|null",
              "description": "Ссылка на карту."
            }
          ],
          "desciption": "Задает карту, на которой должен отобразиться оверлей.",
          "name": "setMap"
        }
      ]
    }
  },
  {
    "name": "IPane",
    "url": "IPane",
    "def": {
      "name": "IPane",
      "description": "Расширяет\n            IEventEmitter.\n\nИнтерфейс пейна карты. Пейн карты представляет собой объект, размещающий внутри контейнера\nкарты свой DOM-элемент с определенным zIndex.  Пейн может служить контейнером для размещения\nотображений различных элементов карты, таких как тайлы, оверлеи, статические элементы управления\nкартой и т.д. Также пейн может выполнять роль непрозрачного для DOM-событий экрана, на котором\nмогут слушаться события мыши.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IEventEmitter"
      ],
      "methods": [
        {
          "desciption": "Уничтожает пейн.",
          "name": "destroy"
        },
        {
          "return": "HTMLElement",
          "desciption": "Возвращает ссылку на DOM-контейнер пейна.",
          "name": "getElement"
        },
        {
          "return": "Map",
          "desciption": "Возвращает карту, которой принадлежит пейн.",
          "name": "getMap"
        },
        {
          "return": "String",
          "desciption": "Возвращает значение параметра \"overflow\", определяющего видимость содержимого пейна\nпри выходе за пределы контейнера карты. Данный параметр может принимать одно из следующих\nстроковых значений:\n\n    \"visible\" - при выходе за пределы контейнера карты содержимое пейна остается видимым;\n    \"hidden\" - область отображения содержимого пейна ограничена контейнером карты.\n",
          "name": "getOverflow"
        },
        {
          "return": "Number",
          "desciption": "Возвращает zIndex пейна.",
          "name": "getZIndex"
        }
      ]
    }
  },
  {
    "name": "overlay.Rectangle",
    "url": "overlay.Rectangle",
    "def": {
      "name": "overlay.Rectangle",
      "description": "Расширяет\n            IOverlay.\n\nОверлей прямоугольника.\nПо умолчанию оверлеи не добавлены в package.full (стандартного набора модулей).\nДля создания собственного экземпляра оверлея необходимо использовать overlay.storage.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "geometry",
          "type": "IPixelRectangleGeometry",
          "description": "Пиксельная геометрия фигуры."
        },
        {
          "isRequired": false,
          "param": "data",
          "type": "Object",
          "description": "Данные."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции."
        }
      ],
      "inherits": [
        "IOverlay"
      ]
    }
  },
  {
    "name": "IParentOnMap",
    "url": "IParentOnMap",
    "def": {
      "name": "IParentOnMap",
      "description": "Интерфейс родительского объекта, относящегося к определенному объекту карты.\n\nКонструктор | События  | Методы ",
      "hasCtor": true,
      "methods": [
        {
          "return": "Map",
          "desciption": "Возвращает ссылку на карту.",
          "name": "getMap"
        }
      ]
    }
  },
  {
    "name": "IPixelCircleGeometry",
    "url": "IPixelCircleGeometry",
    "def": {
      "name": "IPixelCircleGeometry",
      "description": "Расширяет\n            IPixelGeometry.\n\nИнтерфейс пиксельной геометрии \"Круг\".\n\nКонструктор | Поля  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IPixelGeometry"
      ],
      "methods": [
        {
          "return": "Number[]",
          "desciption": "Возвращает координаты центра круга.",
          "name": "getCoordinates"
        },
        {
          "return": "Number",
          "desciption": "Возвращает радиус круга.",
          "name": "getRadius"
        }
      ]
    }
  },
  {
    "name": "IPixelGeometry",
    "url": "IPixelGeometry",
    "def": {
      "name": "IPixelGeometry",
      "description": "Расширяет\n            IBaseGeometry.\n\nИнтерфейс пиксельной геометрии.\n\nКонструктор | Поля  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IBaseGeometry"
      ],
      "methods": [
        {
          "return": "Boolean",
          "params": [
            {
              "isRequired": true,
              "param": "geometry",
              "type": "IPixelGeometry",
              "description": "Геометрия, с которой производится сравнение."
            }
          ],
          "desciption": "Возвращает true, если переданная геометрия эквивалентна данной.",
          "name": "equals"
        },
        {
          "return": "Object",
          "desciption": "Возвращает метаданные пиксельной геометрии.",
          "name": "getMetaData"
        },
        {
          "return": "IPixelGeometry",
          "params": [
            {
              "isRequired": true,
              "param": "factor",
              "type": "Number",
              "description": "Масштабный коэффициент."
            }
          ],
          "desciption": "Создает отмасштабированную копию геометрии.\n\nВозвращает отмасштабированную копию геометрии.",
          "name": "scale"
        },
        {
          "return": "IPixelGeometry",
          "params": [
            {
              "isRequired": true,
              "param": "offset",
              "type": "Number[]",
              "description": "Величина сдвига по осям."
            }
          ],
          "desciption": "Создает копию геометрии сдвинутую на заданную величину.\n\nВозвращает сдвинутую копию геометрии.",
          "name": "shift"
        }
      ]
    }
  },
  {
    "name": "IPixelLineStringGeometry",
    "url": "IPixelLineStringGeometry",
    "def": {
      "name": "IPixelLineStringGeometry",
      "description": "Расширяет\n            IPixelGeometry.\n\nИнтерфейс пиксельной геометрии \"Ломаная линия\".\n\nКонструктор | Поля  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IPixelGeometry"
      ],
      "methods": [
        {
          "return": "Object",
          "params": [
            {
              "isRequired": true,
              "param": "anchorPosition",
              "type": "Number[]",
              "description": "Координаты точки, для которой расчитывается ближайшая точка на ломаной."
            }
          ],
          "desciption": "Ищет на ломаной линии точку, ближайшую к anchorPosition.\n\nВозвращает объект со следующими полями:\n\n    position - точка на ломаной ближайшая к anchorPosition;\n    distance - расстояние от anchorPosition до position;\n    closestPointIndex - индекс вершины, ближайшей к position;\n    nextPointIndex - индекс вершины, следующей за position;\n    prevPointIndex - индекс вершины, предшествующей position.\n\nПоля nextPointIndex, prevPointIndex могут отсутствовать, если position совпадает с одной из вершин ломаной линии.",
          "name": "getClosest"
        },
        {
          "return": "Number[][]",
          "desciption": "Возвращает координаты линии.",
          "name": "getCoordinates"
        },
        {
          "return": "Integer",
          "desciption": "Возвращает количество точек в геометрии.",
          "name": "getLength"
        }
      ]
    }
  },
  {
    "name": "IPixelMultiPolygonGeometry",
    "url": "IPixelMultiPolygonGeometry",
    "def": {
      "name": "IPixelMultiPolygonGeometry",
      "description": "Расширяет\n            IPixelGeometry.\n\nИнтерфейс пиксельной геометрии \"Мультимногоугольник\".\n\nКонструктор | Поля  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IPixelGeometry"
      ],
      "methods": [
        {
          "return": "Boolean",
          "params": [
            {
              "isRequired": true,
              "param": "position",
              "type": "Number[]",
              "description": "Координаты точки."
            }
          ],
          "desciption": "Проверяет лежит ли переданная точка внутри мультимногоугольника.\n\nВозвращает признак принадлежности точки мультимногоугольнику.",
          "name": "contains"
        },
        {
          "return": "Object",
          "params": [
            {
              "isRequired": true,
              "param": "anchorPosition",
              "type": "Number[]",
              "description": "Координаты точки, для которой расчитывается ближайшая точка на контуре многоугольника."
            }
          ],
          "desciption": "Ищет на контуре мультимногоугольника точку, ближайшую к anchorPosition.\n\nВозвращает объект со следующими полями:\n\n    position - точка на контуре мультимногоугольника ближайшая к anchorPosition;\n    distance - расстояние от anchorPosition до position;\n    closestPointIndex - индекс вершины мультимногоугольника, ближайшей к position;\n    nextPointIndex - индекс вершины мультимногоугольника, следующей за position;\n    prevPointIndex - индекс вершины мультимногоугольника, предшествующей position;\n    pathIndex - индекс контура мультимногоугольника, к которому относится найденная точка.\n\nПоля nextPointIndex, prevPointIndex могут отсутствовать, если position совпадает с одной из вершин мультимногоугольника.",
          "name": "getClosest"
        },
        {
          "return": "Number[][][][]",
          "desciption": "Возвращает координаты мультимногоугольника.",
          "name": "getCoordinates"
        },
        {
          "return": "String",
          "desciption": "Возвращает строковый идентификатор, определяющий алгоритм заливки мультимногоугольника.\nИдентификатор может иметь одно из двух значений:\n\n    evenOdd - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки\n    до бесконечности в любом направлении и подсчета количества сегментов контура в пределах заданной фигуры, которые\n    пересекает этот луч. Если это число нечетное, точка находится внутри; если четное, точка находится снаружи.\n    nonZero - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки\n    до бесконечности в любом направлении и проверки точек, в которых сегмент фигуры пересекает этот луч. Начиная с\n    нуля, добавляется единица каждый раз, когда сегмент пересекает луч слева направо, и вычитается единица каждый\n    раз, когда сегмент пересекает луч справа налево. Если после подсчета пересечений результат равен нулю, точка\n    находится снаружи контура. В противном случае она находится внутри.\n",
          "name": "getFillRule"
        },
        {
          "return": "Integer",
          "desciption": "Возвращает количество многоугольников в мультимногоугольнике.",
          "name": "getLength"
        }
      ]
    }
  },
  {
    "name": "IPixelPointGeometry",
    "url": "IPixelPointGeometry",
    "def": {
      "name": "IPixelPointGeometry",
      "description": "Расширяет\n            IPixelGeometry.\n\nИнтерфейс пиксельной геометрии \"Точка\".\n\nКонструктор | Поля  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IPixelGeometry"
      ],
      "methods": [
        {
          "return": "Number[]",
          "desciption": "Возвращает координаты точки.",
          "name": "getCoordinates"
        }
      ]
    }
  },
  {
    "name": "IPixelPolygonGeometry",
    "url": "IPixelPolygonGeometry",
    "def": {
      "name": "IPixelPolygonGeometry",
      "description": "Расширяет\n            IPixelGeometry.\n\nИнтерфейс пиксельной геометрии \"Многоугольник\".\n\nКонструктор | Поля  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IPixelGeometry"
      ],
      "methods": [
        {
          "return": "Boolean",
          "params": [
            {
              "isRequired": true,
              "param": "position",
              "type": "Number[]",
              "description": "Координаты точки."
            }
          ],
          "desciption": "Проверяет лежит ли переданная точка внутри многоугольника.\n\nВозвращает признак принадлежности точки многоугольнику.",
          "name": "contains"
        },
        {
          "return": "Object",
          "params": [
            {
              "isRequired": true,
              "param": "anchorPosition",
              "type": "Number[]",
              "description": "Координаты точки, для которой расчитывается ближайшая точка на контуре многоугольника."
            }
          ],
          "desciption": "Ищет на контуре многоугольника точку, ближайшую к anchorPosition.\n\nВозвращает объект со следующими полями:\n\n    position - точка на контуре многоугольника ближайшая к anchorPosition;\n    distance - расстояние от anchorPosition до position;\n    closestPointIndex - индекс вершины многоугольника, ближайшей к position;\n    nextPointIndex - индекс вершины многоугольника, следующей за position;\n    prevPointIndex - индекс вершины многоугольника, предшествующей position;\n    pathIndex - индекс контура многоугольника, к которому относится найденная точка.\n\nПоля nextPointIndex, prevPointIndex могут отсутствовать, если position совпадает с одной из вершин многоугольника.",
          "name": "getClosest"
        },
        {
          "return": "Number[][][]",
          "desciption": "Возвращает координаты многоугольника.",
          "name": "getCoordinates"
        },
        {
          "return": "String",
          "desciption": "Возвращает строковый идентификатор, определяющий алгоритм заливки многоугольника.\nИдентификатор может принимать одно из двух значений:\n\n    evenOdd - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки\n    до бесконечности в любом направлении и подсчета количества сегментов контура в пределах заданной фигуры, которые\n    пересекает этот луч. Если это число нечетное, точка находится внутри; если четное, точка находится снаружи.\n    nonZero - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки\n    до бесконечности в любом направлении и проверки точек, в которых сегмент фигуры пересекает этот луч. Начиная с\n    нуля, добавляется единица каждый раз, когда сегмент пересекает луч слева направо, и вычитается единица каждый\n    раз, когда сегмент пересекает луч справа налево. Если после подсчета пересечений результат равен нулю, точка\n    находится снаружи контура. В противном случае она находится внутри.\n",
          "name": "getFillRule"
        },
        {
          "return": "Integer",
          "desciption": "Возвращает количество контуров в многоугольнике.",
          "name": "getLength"
        }
      ]
    }
  },
  {
    "name": "IPixelRectangleGeometry",
    "url": "IPixelRectangleGeometry",
    "def": {
      "name": "IPixelRectangleGeometry",
      "description": "Расширяет\n            IPixelGeometry.\n\nИнтерфейс пиксельной геометрии \"Прямоугольник\".\n\nКонструктор | Поля  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IPixelGeometry"
      ],
      "methods": [
        {
          "return": "Object",
          "params": [
            {
              "isRequired": true,
              "param": "anchorPosition",
              "type": "Number[]",
              "description": "Координаты точки, для которой расчитывается ближайшая точка на прямоугольнике."
            }
          ],
          "desciption": "Ищет на прямоугольнике точку, ближайшую к anchorPosition.\n\nВозвращает объект со следующими полями:\n\n    position - точка на прямоугольнике, ближайшая к anchorPosition;\n    distance - расстояние от anchorPosition до position;\n    closestPointIndex - индекс вершины прямоугольника, ближайшей к position;\n    nextPointIndex - индекс вершины прямоугольника, следующей за position;\n    prevPointIndex - индекс вершины прямоугольника, предшествующей position;\n    pathIndex - индекс контура прямоугольника, к которому относится найденная точка.\n\nПоля nextPointIndex, prevPointIndex могут отсутствовать, если position совпадает с одной из вершин прямоугольника.",
          "name": "getClosest"
        },
        {
          "return": "Number[][]",
          "desciption": "Возвращает координаты двух противоположных углов прямоугольника.",
          "name": "getCoordinates"
        }
      ]
    }
  },
  {
    "name": "IPointGeometry",
    "url": "IPointGeometry",
    "def": {
      "name": "IPointGeometry",
      "description": "Расширяет\n            IGeometry, IPointGeometryAccess.\n\nИнтерфейс геометрии \"Точка\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IGeometry",
        "IPointGeometryAccess"
      ],
      "methods": [
        {
          "return": "String",
          "desciption": "Возвращает строку \"Point\".",
          "name": "getType"
        }
      ]
    }
  },
  {
    "name": "IPointGeometryAccess",
    "url": "IPointGeometryAccess",
    "def": {
      "name": "IPointGeometryAccess",
      "description": "Интерфейс доступа к геометрии \"Точка\".\n\nКонструктор | События  | Методы ",
      "hasCtor": true,
      "methods": [
        {
          "return": "Number[]|null",
          "desciption": "Возвращает координаты точки.",
          "name": "getCoordinates"
        },
        {
          "return": "IPointGeometryAccess",
          "params": [
            {
              "isRequired": true,
              "param": "coordinates",
              "type": "Number[]|null",
              "description": "Координаты точки."
            }
          ],
          "desciption": "Задает координаты точки.\n\nВозвращает ссылку на себя.",
          "name": "setCoordinates"
        }
      ]
    }
  },
  {
    "name": "IPolygonGeometry",
    "url": "IPolygonGeometry",
    "def": {
      "name": "IPolygonGeometry",
      "description": "Расширяет\n            IGeometry, IPolygonGeometryAccess.\n\nИнтерфейс геометрии \"Многоугольник\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IGeometry",
        "IPolygonGeometryAccess"
      ],
      "methods": [
        {
          "return": "String",
          "desciption": "Возвращает строку \"Polygon\".",
          "name": "getType"
        }
      ]
    }
  },
  {
    "name": "IPolygonGeometryAccess",
    "url": "IPolygonGeometryAccess",
    "def": {
      "name": "IPolygonGeometryAccess",
      "description": "Расширяет\n            IFreezable.\n\nИнтерфейс доступа к геометрии \"Многоугольник\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IFreezable"
      ],
      "methods": [
        {
          "return": "Boolean",
          "params": [
            {
              "isRequired": true,
              "param": "position",
              "type": "Number[]",
              "description": "Координаты точки."
            }
          ],
          "desciption": "Проверяет, лежит ли переданная точка внутри многоугольника.\n\nВозвращает признак принадлежности точки многоугольнику.",
          "name": "contains"
        },
        {
          "return": "Number[][]",
          "params": [
            {
              "isRequired": true,
              "param": "index",
              "type": "Integer",
              "description": "Индекс контура."
            }
          ],
          "desciption": "Возвращает координаты контура с заданным индексом.",
          "name": "get"
        },
        {
          "return": "ILinearRingGeometryAccess",
          "params": [
            {
              "isRequired": true,
              "param": "index",
              "type": "Integer",
              "description": "Индекс контура."
            }
          ],
          "desciption": "Создает и возвращает объект ILinearRingGeometryAccess для заданного контура.\n\nВозвращает объект геометрии, соответствующий заданному контуру.",
          "name": "getChildGeometry"
        },
        {
          "return": "Object",
          "params": [
            {
              "isRequired": true,
              "param": "anchorPosition",
              "type": "Number[]",
              "description": "Координаты точки, для которой расчитывается ближайшая точка на контуре многоугольника."
            }
          ],
          "desciption": "Ищет на контуре многоугольника точку, ближайшую к anchorPosition.\n\nВозвращает объект со следующими полями:\n\n    position - точка на контуре многоугольника ближайшая к anchorPosition;\n    distance - расстояние от anchorPosition до position;\n    closestPointIndex - индекс вершины многоугольника, ближайшей к position;\n    nextPointIndex - индекс вершины многоугольника, следующей за position;\n    prevPointIndex - индекс вершины многоугольника, предшествующей position;\n    pathIndex - индекс контура многоугольника, к которому относится найденная точка.\n\nПоля nextPointIndex, prevPointIndex могут отсутствовать, если position совпадает с одной из вершин многоугольника.",
          "name": "getClosest"
        },
        {
          "return": "Number[][][]",
          "desciption": "Возвращает массив координат геометрии.",
          "name": "getCoordinates"
        },
        {
          "return": "String",
          "desciption": "Возвращает идентификатор алгоритма заливки.",
          "name": "getFillRule"
        },
        {
          "return": "Integer",
          "desciption": "Возвращает количество контуров в геометрии.",
          "name": "getLength"
        },
        {
          "return": "IPolygonGeometryAccess",
          "params": [
            {
              "isRequired": true,
              "param": "index",
              "type": "Integer",
              "description": "Индекс контура."
            },
            {
              "isRequired": true,
              "param": "path",
              "type": "Number[][]",
              "description": "Координаты контура."
            }
          ],
          "desciption": "Добавляет новый контур с заданным индексом.\n\nВозвращает ссылку на себя.",
          "name": "insert"
        },
        {
          "return": "ILinearRingGeometryAccess",
          "params": [
            {
              "isRequired": true,
              "param": "index",
              "type": "Integer",
              "description": "Индекс контура."
            }
          ],
          "desciption": "Удаляет контур с заданным индексом.\n\nВозвращает удаленный контур.",
          "name": "remove"
        },
        {
          "return": "IPolygonGeometryAccess",
          "params": [
            {
              "isRequired": true,
              "param": "index",
              "type": "Integer",
              "description": "Индекс контура."
            },
            {
              "isRequired": true,
              "param": "path",
              "type": "Number[][]",
              "description": "Координаты контура."
            }
          ],
          "desciption": "Задает координаты контура c заданным индексом.\n\nВозвращает ссылка на себя.",
          "name": "set"
        },
        {
          "return": "IPolygonGeometryAccess",
          "params": [
            {
              "isRequired": true,
              "param": "coordinates",
              "type": "Number[][][]",
              "description": "Координаты геометрии."
            }
          ],
          "desciption": "Задает массив координат геометрии.\n\nВозвращает ссылка на себя.",
          "name": "setCoordinates"
        },
        {
          "return": "IPolygonGeometryAccess",
          "params": [
            {
              "isRequired": true,
              "param": "fillRule",
              "type": "String",
              "description": "Идентификатор алгоритма заливки."
            }
          ],
          "desciption": "Задает алгоритм заливки многоугольника.\n\nВозвращает ссылку на себя.",
          "name": "setFillRule"
        },
        {
          "return": "ILinearRingGeometryAccess[]",
          "params": [
            {
              "isRequired": true,
              "param": "index",
              "type": "Integer",
              "description": "Индекс, начиная с которого производится удаление и добавление контуров."
            },
            {
              "isRequired": true,
              "param": "number",
              "type": "Integer",
              "description": "Количество удаляемых контуров."
            }
          ],
          "desciption": "Удаляет определенное число контуров начиная с заданного индекса.\nПри этом на место удаляемых контуров могут быть добавлены новые.\nКоординаты новых контуров можно передавать дополнительными аргументами после параметра number.\n\nВозвращает удаленные контуры.",
          "name": "splice"
        }
      ]
    }
  },
  {
    "name": "IPopup",
    "url": "IPopup",
    "def": {
      "name": "IPopup",
      "description": "Расширяет\n            ICustomizable, IEventEmitter.\n\nИнтерфейс инфо-объекта.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "ICustomizable",
        "IEventEmitter"
      ],
      "methods": [
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": false,
              "param": "force",
              "type": "Boolean",
              "description": "Мгновенное закрытие."
            }
          ],
          "desciption": "Закрывает инфо-объект.\n\nВозвращает объект-promise.",
          "name": "close"
        },
        {
          "desciption": "Возвращает данные инфо-объекта.",
          "name": "getData"
        },
        {
          "return": "vow.Promise",
          "desciption": "Возвращает объект-обещание вернуть оверлей.",
          "name": "getOverlay"
        },
        {
          "return": "IOverlay",
          "desciption": "Возвращает оверлей, если тот существует.",
          "name": "getOverlaySync"
        },
        {
          "desciption": "Возвращает координаты инфо-объекта.",
          "name": "getPosition"
        },
        {
          "return": "Boolean",
          "desciption": "Возвращает состояние инфо-объекта: открыт/закрыт.",
          "name": "isOpen"
        },
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": false,
              "param": "position",
              "type": "Number[]",
              "description": "Точка, где необходимо расположить балун."
            },
            {
              "isRequired": false,
              "param": "data",
              "type": "Object|String|HTMLElement",
              "description": "Данные оверлея."
            }
          ],
          "desciption": "Открывает инфо-объект в указанной позиции.\nЕсли инфо-объект уже открыт, перемещает его в указанную точку.\nФормат и суть координат определяется проекцией IProjection, которая содержится в опциях.\n\nВозвращает объект-promise.",
          "name": "open"
        },
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": true,
              "param": "data",
              "type": "Object|String|HTMLElement",
              "description": "Данные инфо-объекта."
            }
          ],
          "desciption": "Задаёт инфо-объекту новые данные.\n\nВозвращает объект-promise.",
          "name": "setData"
        },
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": true,
              "param": "position",
              "type": "Number[]",
              "description": "Координаты инфо-объекта."
            }
          ],
          "desciption": "Задаёт инфо-объекту новую позицию.\n\nВозвращает объект-promise.",
          "name": "setPosition"
        }
      ]
    }
  },
  {
    "name": "IPopupManager",
    "url": "IPopupManager",
    "def": {
      "name": "IPopupManager",
      "description": "Расширяет\n            IEventEmitter.\n\nИнтерфейс менеджера инфо-объекта.\n\nКонструктор | Поля  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IEventEmitter"
      ],
      "methods": [
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": false,
              "param": "force",
              "type": "Boolean",
              "description": "Мгновенное закрытие."
            }
          ],
          "desciption": "Закрывает инфо-объект.\n\nВозвращает объект-promise.",
          "name": "close"
        },
        {
          "desciption": "Отключает менеджер инфо-объекта.",
          "name": "destroy"
        },
        {
          "desciption": "Возвращает данные инфо-объекта.",
          "name": "getData"
        },
        {
          "return": "IOptionManager",
          "desciption": "Возвращает менеджер опций.",
          "name": "getOptions"
        },
        {
          "return": "vow.Promise",
          "desciption": "Возвращает объект-обещание вернуть оверлей.",
          "name": "getOverlay"
        },
        {
          "return": "IOverlay",
          "desciption": "Возвращает оверлей, если тот существует.",
          "name": "getOverlaySync"
        },
        {
          "desciption": "Возвращает координаты инфо-объекта.",
          "name": "getPosition"
        },
        {
          "return": "Boolean",
          "desciption": "Возвращает состояние инфо-объекта: открыт/закрыт.",
          "name": "isOpen"
        },
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": false,
              "param": "position",
              "type": "Number[]",
              "description": "Координаты открытия."
            },
            {
              "isRequired": false,
              "param": "data",
              "type": "Object|String|HTMLElement",
              "description": "Данные."
            },
            {
              "isRequired": false,
              "param": "options",
              "type": "Object",
              "description": "Опции."
            }
          ],
          "desciption": "Открывает инфо-объект в указанной позиции.\n\nВозвращает объект-promise.",
          "name": "open"
        },
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": true,
              "param": "data",
              "type": "Object|String|HTMLElement",
              "description": "Данные инфо-объекта."
            }
          ],
          "desciption": "Задаёт инфо-объекту новые данные.\n\nВозвращает объект-promise.",
          "name": "setData"
        },
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": true,
              "param": "options",
              "type": "Object",
              "description": "Опции инфо-объекта."
            }
          ],
          "desciption": "Задаёт инфо-объекту новые опции.\n\nВозвращает объект-promise.",
          "name": "setOptions"
        },
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": true,
              "param": "position",
              "type": "Number[]",
              "description": "Координаты инфо-объекта."
            }
          ],
          "desciption": "Задаёт инфо-объекту новую позицию.\n\nВозвращает объект-promise.",
          "name": "setPosition"
        }
      ]
    }
  },
  {
    "name": "IPositioningContext",
    "url": "IPositioningContext",
    "def": {
      "name": "IPositioningContext",
      "description": "Интерфейс контекста позиционирования - объекта, позволяющего\nпозиционировать внутри себя объект, заданный глобальными пиксельными\nкоординатами.\n\nКонструктор | Методы ",
      "hasCtor": true,
      "methods": [
        {
          "return": "Number[]",
          "params": [
            {
              "isRequired": true,
              "param": "clientPixelPoint",
              "type": "Number[]",
              "description": "Клиентские пиксельные координаты."
            }
          ],
          "desciption": "Преобразует клиентские пиксельные координаты в глобальные.\n\nВозвращает глобальные пиксельные координаты.",
          "name": "fromClientPixels"
        },
        {
          "return": "Number",
          "desciption": "Возвращает текущий уровень масштабирования, в котором работает контекст позиционирования.",
          "name": "getZoom"
        },
        {
          "return": "Number[]",
          "params": [
            {
              "isRequired": true,
              "param": "globalPixelPoint",
              "type": "Number[]",
              "description": "Глобальные пиксельные координаты."
            }
          ],
          "desciption": "Преобразует глобальные пиксельные координаты в клиентские.\n\nВозвращает клиентские пиксельные координаты.",
          "name": "toClientPixels"
        }
      ]
    }
  },
  {
    "name": "IProjection",
    "url": "IProjection",
    "def": {
      "name": "IProjection",
      "description": "Проекция. Описывает, каким образом реальная карта\nпроецируется на бесконечную пиксельную плоскость.\nОдин \"мир\" должен иметь размеры 256х256 пикселей на нулевом масштабе,\nпри этом левый верхний угол \"мира\" имеет координаты (0, 0), координатные\nоси направлены вправо и вниз. \"Миры\" могут быть склеенными по любой оси\n(либо по обеим осям сразу).\n\nКонструктор | Методы ",
      "hasCtor": true,
      "methods": [
        {
          "return": "Number[]",
          "params": [
            {
              "isRequired": true,
              "param": "globalPixelPoint",
              "type": "Number[]",
              "description": "Точка в пиксельных координатах."
            },
            {
              "isRequired": true,
              "param": "zoom",
              "type": "Number",
              "description": "Уровень масштабирования."
            }
          ],
          "desciption": "Преобразует пиксельные координаты на указанном\nуровне масштабирования в координаты проекции.\n\nВозвращает точку в координатах проекции.",
          "name": "fromGlobalPixels"
        },
        {
          "return": "ICoordSystem",
          "desciption": "Возвращает координатную систему, используемую проекцией.\n\nВозвращает координатную систему.",
          "name": "getCoordSystem"
        },
        {
          "return": "Boolean[]",
          "desciption": "Показатель зацикленности проекции.\n\nВозвращает пару флагов, показывающих, склеена ли\nкарта по пиксельным осям (x/y).",
          "name": "isCycled"
        },
        {
          "return": "Number[]",
          "params": [
            {
              "isRequired": true,
              "param": "coordPoint",
              "type": "Number[]",
              "description": "Точка в координатах проекции."
            },
            {
              "isRequired": true,
              "param": "zoom",
              "type": "Number",
              "description": "Уровень масштабирования."
            }
          ],
          "desciption": "Преобразует координаты проекции в глобальные пиксельные\nна указанном уровне масштабирования.\n\nВозвращает пару пиксельных координат.",
          "name": "toGlobalPixels"
        }
      ]
    }
  },
  {
    "name": "IPromiseProvider",
    "url": "IPromiseProvider",
    "def": {
      "name": "IPromiseProvider",
      "description": "Объект, выполняющий \"обещание\".\n\nКонструктор | Методы ",
      "hasCtor": true,
      "methods": [
        {
          "return": "IPromiseProvider",
          "params": [
            {
              "isRequired": true,
              "param": "onResolve",
              "type": "Function",
              "description": "Функция-обработчик, которая вызывается, если обещание выполнено."
            },
            {
              "isRequired": true,
              "param": "onReject",
              "type": "Function",
              "description": "Функция-обработчик, которая вызывается, если обещание не выполнено (произошла ошибка)."
            }
          ],
          "desciption": "Возвращает объект-обещание.\n\nВозвращает ссылку на себя или новый объект-обещание.",
          "name": "then"
        }
      ]
    }
  },
  {
    "name": "IRatioMap",
    "url": "IRatioMap",
    "def": {
      "name": "IRatioMap",
      "description": "Интерфейс объекта, содержащего соотношение произвольных данных к devicePixelRatio.\nИспользуется в случаях, когда требуется поддержка экранов с отношением виртуальных\nпикселей к физическим более единицы.\nВ качестве ключей в объекте должны использваться строки, состоящие из целого или дробного числа,\nобозначающего коэффициент плотности пикселей.\n\nКонструктор",
      "hasCtor": true
    }
  },
  {
    "name": "IRectangleGeometry",
    "url": "IRectangleGeometry",
    "def": {
      "name": "IRectangleGeometry",
      "description": "Расширяет\n            IGeometry, IRectangleGeometryAccess.\n\nИнтерфейс геометрии \"Прямоугольник\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IGeometry",
        "IRectangleGeometryAccess"
      ],
      "methods": [
        {
          "return": "String",
          "desciption": "Возвращает строку \"Rectangle\".",
          "name": "getType"
        }
      ]
    }
  },
  {
    "name": "IRectangleGeometryAccess",
    "url": "IRectangleGeometryAccess",
    "def": {
      "name": "IRectangleGeometryAccess",
      "description": "Расширяет\n            IFreezable.\n\nИнтерфейс доступа к геометрии \"Прямоугольник\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IFreezable"
      ],
      "methods": [
        {
          "return": "Boolean",
          "params": [
            {
              "isRequired": true,
              "param": "position",
              "type": "Number[]",
              "description": "Координаты точки."
            }
          ],
          "desciption": "Проверяет, лежит ли переданная точка внутри прямоугольника.\n\nВозвращает признак принадлежности точки прямоугольнику.",
          "name": "contains"
        },
        {
          "return": "Object",
          "params": [
            {
              "isRequired": true,
              "param": "anchorPosition",
              "type": "Number[]",
              "description": "Координаты точки, для которой расчитывается ближайшая точка на прямоугольнике."
            }
          ],
          "desciption": "Ищет на контуре  прямоугольника точку, ближайшую к anchorPosition.\n\nВозвращает объект со следующими полями:\n\n    position - точка на контуре прямоугольника, ближайшая к anchorPosition;\n    distance - расстояние от anchorPosition до position;\n",
          "name": "getClosest"
        },
        {
          "return": "Number[][]",
          "desciption": "Возвращает координаты двух противоположных углов прямоугольника.",
          "name": "getCoordinates"
        },
        {
          "return": "IRectangleGeometryAccess",
          "params": [
            {
              "isRequired": true,
              "param": "coordinates",
              "type": "Number[][]",
              "description": "Координаты углов."
            }
          ],
          "desciption": "Задает координаты двух противоположных углов прямоугольника.\n\nВозвращает ссылка на себя.",
          "name": "setCoordinates"
        }
      ]
    }
  },
  {
    "name": "ISearchControlLayout",
    "url": "ISearchControlLayout",
    "def": {
      "name": "ISearchControlLayout",
      "description": "Расширяет\n            IExpandableControlLayout.\n\nИнтерфейс макета элемента управления \"Поиск по карте\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IExpandableControlLayout"
      ]
    }
  },
  {
    "name": "ISearchProvider",
    "url": "ISearchProvider",
    "def": {
      "name": "ISearchProvider",
      "description": "Интерфейс провайдера поиска.\n\nКонструктор | Методы ",
      "hasCtor": true,
      "methods": [
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": true,
              "param": "request",
              "type": "String",
              "description": "Строка запроса."
            },
            {
              "isRequired": false,
              "param": "options",
              "type": "Object",
              "description": "Опции."
            }
          ],
          "desciption": "Отправляет запрос на поиск геообъектов. Добавить функцию-обработчик для\nобработки результата геокодирования можно через возвращаемый объект-promise.\nОбъект, поступающий на вход функции-обработчика может\nсодержать поля только следующего вида: geoObjects, layers, mapState, metaData.\n\nВозвращает объект-promise.",
          "name": "search"
        },
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": true,
              "param": "request",
              "type": "String",
              "description": "Строка запроса."
            },
            {
              "isRequired": false,
              "param": "options",
              "type": "Object",
              "description": "Опции."
            }
          ],
          "desciption": "Отправляет запрос за поисковыми подсказками. Возвращает объект-promise,\nкоторый будет либо отклонён с ошибкой, либо подтверждён массивом объектов\nвида { displayName: \"Мытищи, Московская область\", value: \"Россия, Московская область, Мытищи \" }.\nПоле displayName отвечает за представление топонима в удобном для чтения\nпользователем виде, поле value - значение, которое необходимо подставить в\nполе ввода после выбора пользователем данной подсказки.\n\n\n\n\nЭтот метод является опциональным.\n\nВозвращает объект-promise.",
          "name": "suggest"
        }
      ]
    }
  },
  {
    "name": "ISelectableControl",
    "url": "ISelectableControl",
    "def": {
      "name": "ISelectableControl",
      "description": "Расширяет\n            IControl.\n\nИнтерфейс переключаемого и выбираемого элемента управления.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IControl"
      ],
      "methods": [
        {
          "desciption": "Отменяет выбор элемента управления (выключает).",
          "name": "deselect"
        },
        {
          "desciption": "Делает элемент управления недоступным (запрещены пользовательские действия).",
          "name": "disable"
        },
        {
          "desciption": "Делает элемент управления доступным (разрешены пользовательские действия).",
          "name": "enable"
        },
        {
          "return": "Boolean",
          "desciption": "Возвращает true - элемент управления доступен, false - недоступен.",
          "name": "isEnabled"
        },
        {
          "return": "Boolean",
          "desciption": "Возвращает true - элемент управления выбран, false - не выбран.",
          "name": "isSelected"
        },
        {
          "desciption": "Выбирает (включает) элемент управления.",
          "name": "select"
        }
      ]
    }
  },
  {
    "name": "ISelectableControlLayout",
    "url": "ISelectableControlLayout",
    "def": {
      "name": "ISelectableControlLayout",
      "description": "Расширяет\n            ILayout.\n\nИнтерфейс макета кнопки.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "ILayout"
      ]
    }
  },
  {
    "name": "IShape",
    "url": "IShape",
    "def": {
      "name": "IShape",
      "description": "Интерфейс фигуры.\nФигура представляет совокупность пиксельной геометрии, а также математических и логических параметров ее отображения\n(таких как наличие контура и его ширина, наличие заливки).\n\nКонструктор | Методы ",
      "hasCtor": true,
      "methods": [
        {
          "return": "Boolean",
          "params": [
            {
              "isRequired": true,
              "param": "position",
              "type": "Number[]",
              "description": "Координаты точки."
            }
          ],
          "desciption": "Проверяет лежит ли переданная точка внутри фигуры.\n\nВозвращает true, если переданная точка лежит внутри фигуры.",
          "name": "contains"
        },
        {
          "return": "Boolean",
          "params": [
            {
              "isRequired": true,
              "param": "shape",
              "type": "IShape",
              "description": "Фигура, с которой производится сравнение."
            }
          ],
          "desciption": "Возвращает true, если переданная фигура эквивалентна данной.",
          "name": "equals"
        },
        {
          "return": "Number[][]|null",
          "desciption": "Возвращает координаты двух противоположных углов области, охватывающей фигуру.\nПервый элемент массива - угол с наименьшими значениями координат относительно остальных точек области;\nвторой элемент - угол с наибольшими значениями координат.",
          "name": "getBounds"
        },
        {
          "return": "IPixelGeometry",
          "desciption": "Возвращает пиксельную геометрию фигуры.",
          "name": "getGeometry"
        },
        {
          "return": "String",
          "desciption": "Возвращает идентификатор типа фигуры.",
          "name": "getType"
        },
        {
          "return": "IShape",
          "params": [
            {
              "isRequired": true,
              "param": "factor",
              "type": "Number",
              "description": "Масштабный коэффициент."
            }
          ],
          "desciption": "Создает отмасштабированную копию фигуры.\n\nВозвращает отмасштабированную копию фигуры.",
          "name": "scale"
        },
        {
          "return": "IShape",
          "params": [
            {
              "isRequired": true,
              "param": "offset",
              "type": "Number[]",
              "description": "Величина сдвига по осям."
            }
          ],
          "desciption": "Создает копию фигуры сдвинутую на заданную величину.\n\nВозвращает сдвинутую копию фигуры.",
          "name": "shift"
        }
      ]
    }
  },
  {
    "name": "ISuggestProvider",
    "url": "ISuggestProvider",
    "def": {
      "name": "ISuggestProvider",
      "description": "Интерфейс провайдера поисковых подсказок.\n\nКонструктор | Методы ",
      "hasCtor": true,
      "methods": [
        {
          "return": "vow.Promise",
          "params": [
            {
              "isRequired": true,
              "param": "request",
              "type": "String",
              "description": "Строка запроса."
            },
            {
              "isRequired": false,
              "param": "options",
              "type": "Object",
              "description": "Опции."
            }
          ],
          "desciption": "Отправляет запрос за поисковыми подсказками. Возвращает объект-promise,\nкоторый будет либо отклонён с ошибкой, либо подтверждён массивом объектов\nвида { displayName: \"Мытищи, Московская область\", value: \"Россия, Московская область, Мытищи \", hl: [[0,5]] }.\nПоле displayName отвечает за представление топонима в удобном для чтения\nпользователем виде, поле value - значение, которое необходимо подставить в\nполе ввода после выбора пользователем данной подсказки, поле hl - массив диапазонов подсветки, необходимых, чтобы\nпоказать, какая именно часть результата совпала с запросом. Диапазон подсветки - массив из двух чисел:\nиндексы начального и конечного символов диапазона.\n\nВозвращает объект-promise.",
          "name": "suggest"
        }
      ]
    }
  },
  {
    "name": "ISuggestViewLayout",
    "url": "ISuggestViewLayout",
    "def": {
      "name": "ISuggestViewLayout",
      "description": "Интерфейс макета панели поисковых подсказок.\n\nКонструктор | События ",
      "hasCtor": true
    }
  },
  {
    "name": "ITrafficProvider",
    "url": "ITrafficProvider",
    "def": {
      "name": "ITrafficProvider",
      "description": "Расширяет\n            ICustomizable, IEventEmitter.\n\nИнтерфейс провайдера данных о пробках.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "ICustomizable",
        "IEventEmitter"
      ],
      "methods": [
        {
          "return": "Map|null",
          "desciption": "Возвращает ссылку на карту.",
          "name": "getMap"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "Ссылка",
              "type": "Map|null",
              "description": "на карту."
            }
          ],
          "name": "setMap"
        }
      ]
    }
  },
  {
    "name": "ITrafficControlLayout",
    "url": "ITrafficControlLayout",
    "def": {
      "name": "ITrafficControlLayout",
      "description": "Расширяет\n            IExpandableControlLayout.\n\nИнтерфейс макета элемента управления \"Панель управления пробками\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IExpandableControlLayout"
      ]
    }
  },
  {
    "name": "IZoomControlLayout",
    "url": "IZoomControlLayout",
    "def": {
      "name": "IZoomControlLayout",
      "description": "Расширяет\n            ILayout.\n\nИнтерфейс макета элемента управления \"Ползунок масштаба\".\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "ILayout"
      ]
    }
  },
  {
    "name": "IOptionManager",
    "url": "IOptionManager",
    "def": {
      "name": "IOptionManager",
      "description": "Расширяет\n            IChild, IEventEmitter, IFreezable.\n\nИнтерфейс менеджера опций. Менеджер опций позволяет задавать значения опций, строить иерархию наследования\nопций, а также разрешать значения опций в контексте существующей иерархии наследования.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "inherits": [
        "IChild",
        "IEventEmitter",
        "IFreezable"
      ],
      "methods": [
        {
          "params": [
            {
              "isRequired": true,
              "param": "key",
              "type": "String",
              "description": "Имя опции."
            },
            {
              "isRequired": false,
              "param": "defaultValue",
              "type": "Object",
              "description": "Значение по умолчанию."
            }
          ],
          "desciption": "Возвращает значение заданной опции в контексте существующей иерархии наследования опций. При вызове данного\nметода сначала происходит поиск значения в текущем менеджере опций, а затем, если значение не определено, поиск\nпродолжается в иерархии родительских менеджеров.\n\nВозвращает значение заданной опции, либо defaultValue, если значение опции не определено.",
          "name": "get"
        },
        {
          "return": "Object",
          "desciption": "Возвращает ссылку на внутренний хэш хранящий значения опций.",
          "name": "getAll"
        },
        {
          "return": "String",
          "desciption": "Возвращает имя менеджера опций.",
          "name": "getName"
        },
        {
          "return": "Object",
          "params": [
            {
              "isRequired": true,
              "param": "key",
              "type": "String",
              "description": "Имя опции."
            }
          ],
          "desciption": "Возвращает значение заданной опции, определенное на данном уровне иерархии опций, т.е. в данном менеджере.",
          "name": "getNative"
        },
        {
          "return": "IOptionManager|null",
          "desciption": "Возвращает родительский менеджер опций.",
          "name": "getParent"
        },
        {
          "return": "Object",
          "params": [
            {
              "isRequired": true,
              "param": "key",
              "type": "String",
              "description": "Имя опции."
            },
            {
              "isRequired": false,
              "param": "name",
              "type": "String",
              "description": "Имя дочернего менеджера опций."
            }
          ],
          "desciption": "Метод, предназначенный для вызова дочерними менеджерами опций.\n\nВозвращает значение опции в родительском контексте.",
          "name": "resolve"
        },
        {
          "params": [
            {
              "isRequired": true,
              "param": "name",
              "type": "String",
              "description": "Имя менеджера опций."
            }
          ],
          "desciption": "Задает имя менеджера опций.",
          "name": "setName"
        },
        {
          "return": "IChild",
          "params": [
            {
              "isRequired": true,
              "param": "parent",
              "type": "IOptionManager|null",
              "description": "Родительский менеджер опций."
            }
          ],
          "desciption": "Задает родительский менеджер опций.\n\nВозвращает ссылку на себя.",
          "name": "setParent"
        }
      ]
    }
  },
  {
    "name": "multiRouter.Editor",
    "url": "multiRouter.Editor",
    "def": {
      "name": "multiRouter.Editor",
      "description": "Расширяет\n            ICustomizable, IEventEmitter.\n\nРедактор мультимаршрута.\n\nКонструктор | Поля  | События  | Методы ",
      "hasCtor": true,
      "ctorParams": [
        {
          "isRequired": true,
          "param": "multiRoute",
          "type": "multiRouter.MultiRoute",
          "description": "Редактируемый мультимаршрут."
        },
        {
          "isRequired": false,
          "param": "state",
          "type": "Object",
          "description": "Объект, описывающий начальное состояние редактора. Список доступных\nполей смотрите в описании multiRouter.Editor.state."
        },
        {
          "isRequired": false,
          "param": "options",
          "type": "Object",
          "description": "Опции."
        }
      ],
      "inherits": [
        "ICustomizable",
        "IEventEmitter"
      ],
      "methods": [
        {
          "desciption": "Уничтожает редактор мультимаршрута.",
          "name": "destroy"
        },
        {
          "return": "multiRouter.MultiRoute",
          "desciption": "Возвращает ссылку на редактируемый мультимаршрут.",
          "name": "getMultiRoute"
        }
      ],
      "props": [
        {
          "type": "data.Manager",
          "description": "Менеджер состояния редактора мультимаршрута.\n\n\nДоступные поля:",
          "name": "state"
        }
      ]
    }
  }
]